var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var entry = {};

var vue$1 = {exports: {}};

var compilerDom = {exports: {}};

var compilerCore = {exports: {}};

var shared = {exports: {}};

var shared_cjs = {};

/**
* @vue/shared v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredShared_cjs;
function requireShared_cjs () {
	if (hasRequiredShared_cjs) return shared_cjs;
	hasRequiredShared_cjs = 1;
	Object.defineProperty(shared_cjs, '__esModule', { value: true });
	/*! #__NO_SIDE_EFFECTS__ */
	function makeMap(str, expectsLowerCase) {
	  const set = new Set(str.split(","));
	  return expectsLowerCase ? (val) => set.has(val.toLowerCase()) : (val) => set.has(val);
	}
	const EMPTY_OBJ = Object.freeze({}) ;
	const EMPTY_ARR = Object.freeze([]) ;
	const NOOP = () => {
	};
	const NO = () => false;
	const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 &&
	(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
	const isModelListener = (key) => key.startsWith("onUpdate:");
	const extend = Object.assign;
	const remove = (arr, el) => {
	  const i = arr.indexOf(el);
	  if (i > -1) {
	    arr.splice(i, 1);
	  }
	};
	const hasOwnProperty = Object.prototype.hasOwnProperty;
	const hasOwn = (val, key) => hasOwnProperty.call(val, key);
	const isArray = Array.isArray;
	const isMap = (val) => toTypeString(val) === "[object Map]";
	const isSet = (val) => toTypeString(val) === "[object Set]";
	const isDate = (val) => toTypeString(val) === "[object Date]";
	const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
	const isFunction = (val) => typeof val === "function";
	const isString = (val) => typeof val === "string";
	const isSymbol = (val) => typeof val === "symbol";
	const isObject = (val) => val !== null && typeof val === "object";
	const isPromise = (val) => {
	  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
	};
	const objectToString = Object.prototype.toString;
	const toTypeString = (value) => objectToString.call(value);
	const toRawType = (value) => {
	  return toTypeString(value).slice(8, -1);
	};
	const isPlainObject = (val) => toTypeString(val) === "[object Object]";
	const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
	const isReservedProp =  makeMap(
	  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
	);
	const isBuiltInDirective =  makeMap(
	  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
	);
	const cacheStringFunction = (fn) => {
	  const cache =  Object.create(null);
	  return (str) => {
	    const hit = cache[str];
	    return hit || (cache[str] = fn(str));
	  };
	};
	const camelizeRE = /-(\w)/g;
	const camelize = cacheStringFunction((str) => {
	  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
	});
	const hyphenateRE = /\B([A-Z])/g;
	const hyphenate = cacheStringFunction(
	  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
	);
	const capitalize = cacheStringFunction((str) => {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	});
	const toHandlerKey = cacheStringFunction((str) => {
	  const s = str ? `on${capitalize(str)}` : ``;
	  return s;
	});
	const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
	const invokeArrayFns = (fns, ...arg) => {
	  for (let i = 0; i < fns.length; i++) {
	    fns[i](...arg);
	  }
	};
	const def = (obj, key, value, writable = false) => {
	  Object.defineProperty(obj, key, {
	    configurable: true,
	    enumerable: false,
	    writable,
	    value
	  });
	};
	const looseToNumber = (val) => {
	  const n = parseFloat(val);
	  return isNaN(n) ? val : n;
	};
	const toNumber = (val) => {
	  const n = isString(val) ? Number(val) : NaN;
	  return isNaN(n) ? val : n;
	};
	let _globalThis;
	const getGlobalThis = () => {
	  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : {});
	};
	const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
	function genPropsAccessExp(name) {
	  return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
	}
	const PatchFlags = {
	  "TEXT": 1,
	  "1": "TEXT",
	  "CLASS": 2,
	  "2": "CLASS",
	  "STYLE": 4,
	  "4": "STYLE",
	  "PROPS": 8,
	  "8": "PROPS",
	  "FULL_PROPS": 16,
	  "16": "FULL_PROPS",
	  "NEED_HYDRATION": 32,
	  "32": "NEED_HYDRATION",
	  "STABLE_FRAGMENT": 64,
	  "64": "STABLE_FRAGMENT",
	  "KEYED_FRAGMENT": 128,
	  "128": "KEYED_FRAGMENT",
	  "UNKEYED_FRAGMENT": 256,
	  "256": "UNKEYED_FRAGMENT",
	  "NEED_PATCH": 512,
	  "512": "NEED_PATCH",
	  "DYNAMIC_SLOTS": 1024,
	  "1024": "DYNAMIC_SLOTS",
	  "DEV_ROOT_FRAGMENT": 2048,
	  "2048": "DEV_ROOT_FRAGMENT",
	  "HOISTED": -1,
	  "-1": "HOISTED",
	  "BAIL": -2,
	  "-2": "BAIL"
	};
	const PatchFlagNames = {
	  [1]: `TEXT`,
	  [2]: `CLASS`,
	  [4]: `STYLE`,
	  [8]: `PROPS`,
	  [16]: `FULL_PROPS`,
	  [32]: `NEED_HYDRATION`,
	  [64]: `STABLE_FRAGMENT`,
	  [128]: `KEYED_FRAGMENT`,
	  [256]: `UNKEYED_FRAGMENT`,
	  [512]: `NEED_PATCH`,
	  [1024]: `DYNAMIC_SLOTS`,
	  [2048]: `DEV_ROOT_FRAGMENT`,
	  [-1]: `HOISTED`,
	  [-2]: `BAIL`
	};
	const ShapeFlags = {
	  "ELEMENT": 1,
	  "1": "ELEMENT",
	  "FUNCTIONAL_COMPONENT": 2,
	  "2": "FUNCTIONAL_COMPONENT",
	  "STATEFUL_COMPONENT": 4,
	  "4": "STATEFUL_COMPONENT",
	  "TEXT_CHILDREN": 8,
	  "8": "TEXT_CHILDREN",
	  "ARRAY_CHILDREN": 16,
	  "16": "ARRAY_CHILDREN",
	  "SLOTS_CHILDREN": 32,
	  "32": "SLOTS_CHILDREN",
	  "TELEPORT": 64,
	  "64": "TELEPORT",
	  "SUSPENSE": 128,
	  "128": "SUSPENSE",
	  "COMPONENT_SHOULD_KEEP_ALIVE": 256,
	  "256": "COMPONENT_SHOULD_KEEP_ALIVE",
	  "COMPONENT_KEPT_ALIVE": 512,
	  "512": "COMPONENT_KEPT_ALIVE",
	  "COMPONENT": 6,
	  "6": "COMPONENT"
	};
	const SlotFlags = {
	  "STABLE": 1,
	  "1": "STABLE",
	  "DYNAMIC": 2,
	  "2": "DYNAMIC",
	  "FORWARDED": 3,
	  "3": "FORWARDED"
	};
	const slotFlagsText = {
	  [1]: "STABLE",
	  [2]: "DYNAMIC",
	  [3]: "FORWARDED"
	};
	const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error";
	const isGloballyAllowed =  makeMap(GLOBALS_ALLOWED);
	const isGloballyWhitelisted = isGloballyAllowed;
	const range = 2;
	function generateCodeFrame(source, start = 0, end = source.length) {
	  start = Math.max(0, Math.min(start, source.length));
	  end = Math.max(0, Math.min(end, source.length));
	  if (start > end) return "";
	  let lines = source.split(/(\r?\n)/);
	  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
	  lines = lines.filter((_, idx) => idx % 2 === 0);
	  let count = 0;
	  const res = [];
	  for (let i = 0; i < lines.length; i++) {
	    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
	    if (count >= start) {
	      for (let j = i - range; j <= i + range || end > count; j++) {
	        if (j < 0 || j >= lines.length) continue;
	        const line = j + 1;
	        res.push(
	          `${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`
	        );
	        const lineLength = lines[j].length;
	        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
	        if (j === i) {
	          const pad = start - (count - (lineLength + newLineSeqLength));
	          const length = Math.max(
	            1,
	            end > count ? lineLength - pad : end - start
	          );
	          res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
	        } else if (j > i) {
	          if (end > count) {
	            const length = Math.max(Math.min(end - count, lineLength), 1);
	            res.push(`   |  ` + "^".repeat(length));
	          }
	          count += lineLength + newLineSeqLength;
	        }
	      }
	      break;
	    }
	  }
	  return res.join("\n");
	}
	function normalizeStyle(value) {
	  if (isArray(value)) {
	    const res = {};
	    for (let i = 0; i < value.length; i++) {
	      const item = value[i];
	      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
	      if (normalized) {
	        for (const key in normalized) {
	          res[key] = normalized[key];
	        }
	      }
	    }
	    return res;
	  } else if (isString(value) || isObject(value)) {
	    return value;
	  }
	}
	const listDelimiterRE = /;(?![^(]*\))/g;
	const propertyDelimiterRE = /:([^]+)/;
	const styleCommentRE = /\/\*[^]*?\*\//g;
	function parseStringStyle(cssText) {
	  const ret = {};
	  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
	    if (item) {
	      const tmp = item.split(propertyDelimiterRE);
	      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
	    }
	  });
	  return ret;
	}
	function stringifyStyle(styles) {
	  let ret = "";
	  if (!styles || isString(styles)) {
	    return ret;
	  }
	  for (const key in styles) {
	    const value = styles[key];
	    if (isString(value) || typeof value === "number") {
	      const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
	      ret += `${normalizedKey}:${value};`;
	    }
	  }
	  return ret;
	}
	function normalizeClass(value) {
	  let res = "";
	  if (isString(value)) {
	    res = value;
	  } else if (isArray(value)) {
	    for (let i = 0; i < value.length; i++) {
	      const normalized = normalizeClass(value[i]);
	      if (normalized) {
	        res += normalized + " ";
	      }
	    }
	  } else if (isObject(value)) {
	    for (const name in value) {
	      if (value[name]) {
	        res += name + " ";
	      }
	    }
	  }
	  return res.trim();
	}
	function normalizeProps(props) {
	  if (!props) return null;
	  let { class: klass, style } = props;
	  if (klass && !isString(klass)) {
	    props.class = normalizeClass(klass);
	  }
	  if (style) {
	    props.style = normalizeStyle(style);
	  }
	  return props;
	}
	const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
	const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
	const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
	const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
	const isHTMLTag =  makeMap(HTML_TAGS);
	const isSVGTag =  makeMap(SVG_TAGS);
	const isMathMLTag =  makeMap(MATH_TAGS);
	const isVoidTag =  makeMap(VOID_TAGS);
	const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
	const isSpecialBooleanAttr =  makeMap(specialBooleanAttrs);
	const isBooleanAttr =  makeMap(
	  specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
	);
	function includeBooleanAttr(value) {
	  return !!value || value === "";
	}
	const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
	const attrValidationCache = {};
	function isSSRSafeAttrName(name) {
	  if (attrValidationCache.hasOwnProperty(name)) {
	    return attrValidationCache[name];
	  }
	  const isUnsafe = unsafeAttrCharRE.test(name);
	  if (isUnsafe) {
	    console.error(`unsafe attribute name: ${name}`);
	  }
	  return attrValidationCache[name] = !isUnsafe;
	}
	const propsToAttrMap = {
	  acceptCharset: "accept-charset",
	  className: "class",
	  htmlFor: "for",
	  httpEquiv: "http-equiv"
	};
	const isKnownHtmlAttr =  makeMap(
	  `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
	);
	const isKnownSvgAttr =  makeMap(
	  `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
	);
	function isRenderableAttrValue(value) {
	  if (value == null) {
	    return false;
	  }
	  const type = typeof value;
	  return type === "string" || type === "number" || type === "boolean";
	}
	const escapeRE = /["'&<>]/;
	function escapeHtml(string) {
	  const str = "" + string;
	  const match = escapeRE.exec(str);
	  if (!match) {
	    return str;
	  }
	  let html = "";
	  let escaped;
	  let index;
	  let lastIndex = 0;
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        escaped = "&quot;";
	        break;
	      case 38:
	        escaped = "&amp;";
	        break;
	      case 39:
	        escaped = "&#39;";
	        break;
	      case 60:
	        escaped = "&lt;";
	        break;
	      case 62:
	        escaped = "&gt;";
	        break;
	      default:
	        continue;
	    }
	    if (lastIndex !== index) {
	      html += str.slice(lastIndex, index);
	    }
	    lastIndex = index + 1;
	    html += escaped;
	  }
	  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
	}
	const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
	function escapeHtmlComment(src) {
	  return src.replace(commentStripRE, "");
	}
	function looseCompareArrays(a, b) {
	  if (a.length !== b.length) return false;
	  let equal = true;
	  for (let i = 0; equal && i < a.length; i++) {
	    equal = looseEqual(a[i], b[i]);
	  }
	  return equal;
	}
	function looseEqual(a, b) {
	  if (a === b) return true;
	  let aValidType = isDate(a);
	  let bValidType = isDate(b);
	  if (aValidType || bValidType) {
	    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
	  }
	  aValidType = isSymbol(a);
	  bValidType = isSymbol(b);
	  if (aValidType || bValidType) {
	    return a === b;
	  }
	  aValidType = isArray(a);
	  bValidType = isArray(b);
	  if (aValidType || bValidType) {
	    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
	  }
	  aValidType = isObject(a);
	  bValidType = isObject(b);
	  if (aValidType || bValidType) {
	    if (!aValidType || !bValidType) {
	      return false;
	    }
	    const aKeysCount = Object.keys(a).length;
	    const bKeysCount = Object.keys(b).length;
	    if (aKeysCount !== bKeysCount) {
	      return false;
	    }
	    for (const key in a) {
	      const aHasKey = a.hasOwnProperty(key);
	      const bHasKey = b.hasOwnProperty(key);
	      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
	        return false;
	      }
	    }
	  }
	  return String(a) === String(b);
	}
	function looseIndexOf(arr, val) {
	  return arr.findIndex((item) => looseEqual(item, val));
	}
	const isRef = (val) => {
	  return !!(val && val.__v_isRef === true);
	};
	const toDisplayString = (val) => {
	  return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
	};
	const replacer = (_key, val) => {
	  if (isRef(val)) {
	    return replacer(_key, val.value);
	  } else if (isMap(val)) {
	    return {
	      [`Map(${val.size})`]: [...val.entries()].reduce(
	        (entries, [key, val2], i) => {
	          entries[stringifySymbol(key, i) + " =>"] = val2;
	          return entries;
	        },
	        {}
	      )
	    };
	  } else if (isSet(val)) {
	    return {
	      [`Set(${val.size})`]: [...val.values()].map((v) => stringifySymbol(v))
	    };
	  } else if (isSymbol(val)) {
	    return stringifySymbol(val);
	  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
	    return String(val);
	  }
	  return val;
	};
	const stringifySymbol = (v, i = "") => {
	  var _a;
	  return (
	    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v
	  );
	};
	shared_cjs.EMPTY_ARR = EMPTY_ARR;
	shared_cjs.EMPTY_OBJ = EMPTY_OBJ;
	shared_cjs.NO = NO;
	shared_cjs.NOOP = NOOP;
	shared_cjs.PatchFlagNames = PatchFlagNames;
	shared_cjs.PatchFlags = PatchFlags;
	shared_cjs.ShapeFlags = ShapeFlags;
	shared_cjs.SlotFlags = SlotFlags;
	shared_cjs.camelize = camelize;
	shared_cjs.capitalize = capitalize;
	shared_cjs.def = def;
	shared_cjs.escapeHtml = escapeHtml;
	shared_cjs.escapeHtmlComment = escapeHtmlComment;
	shared_cjs.extend = extend;
	shared_cjs.genPropsAccessExp = genPropsAccessExp;
	shared_cjs.generateCodeFrame = generateCodeFrame;
	shared_cjs.getGlobalThis = getGlobalThis;
	shared_cjs.hasChanged = hasChanged;
	shared_cjs.hasOwn = hasOwn;
	shared_cjs.hyphenate = hyphenate;
	shared_cjs.includeBooleanAttr = includeBooleanAttr;
	shared_cjs.invokeArrayFns = invokeArrayFns;
	shared_cjs.isArray = isArray;
	shared_cjs.isBooleanAttr = isBooleanAttr;
	shared_cjs.isBuiltInDirective = isBuiltInDirective;
	shared_cjs.isDate = isDate;
	shared_cjs.isFunction = isFunction;
	shared_cjs.isGloballyAllowed = isGloballyAllowed;
	shared_cjs.isGloballyWhitelisted = isGloballyWhitelisted;
	shared_cjs.isHTMLTag = isHTMLTag;
	shared_cjs.isIntegerKey = isIntegerKey;
	shared_cjs.isKnownHtmlAttr = isKnownHtmlAttr;
	shared_cjs.isKnownSvgAttr = isKnownSvgAttr;
	shared_cjs.isMap = isMap;
	shared_cjs.isMathMLTag = isMathMLTag;
	shared_cjs.isModelListener = isModelListener;
	shared_cjs.isObject = isObject;
	shared_cjs.isOn = isOn;
	shared_cjs.isPlainObject = isPlainObject;
	shared_cjs.isPromise = isPromise;
	shared_cjs.isRegExp = isRegExp;
	shared_cjs.isRenderableAttrValue = isRenderableAttrValue;
	shared_cjs.isReservedProp = isReservedProp;
	shared_cjs.isSSRSafeAttrName = isSSRSafeAttrName;
	shared_cjs.isSVGTag = isSVGTag;
	shared_cjs.isSet = isSet;
	shared_cjs.isSpecialBooleanAttr = isSpecialBooleanAttr;
	shared_cjs.isString = isString;
	shared_cjs.isSymbol = isSymbol;
	shared_cjs.isVoidTag = isVoidTag;
	shared_cjs.looseEqual = looseEqual;
	shared_cjs.looseIndexOf = looseIndexOf;
	shared_cjs.looseToNumber = looseToNumber;
	shared_cjs.makeMap = makeMap;
	shared_cjs.normalizeClass = normalizeClass;
	shared_cjs.normalizeProps = normalizeProps;
	shared_cjs.normalizeStyle = normalizeStyle;
	shared_cjs.objectToString = objectToString;
	shared_cjs.parseStringStyle = parseStringStyle;
	shared_cjs.propsToAttrMap = propsToAttrMap;
	shared_cjs.remove = remove;
	shared_cjs.slotFlagsText = slotFlagsText;
	shared_cjs.stringifyStyle = stringifyStyle;
	shared_cjs.toDisplayString = toDisplayString;
	shared_cjs.toHandlerKey = toHandlerKey;
	shared_cjs.toNumber = toNumber;
	shared_cjs.toRawType = toRawType;
	shared_cjs.toTypeString = toTypeString;
	return shared_cjs;
}

var hasRequiredShared;
function requireShared () {
	if (hasRequiredShared) return shared.exports;
	hasRequiredShared = 1;
	{
	  shared.exports = requireShared_cjs();
	}
	return shared.exports;
}

var decode = {};

var decodeDataHtml = {};

var hasRequiredDecodeDataHtml;
function requireDecodeDataHtml () {
	if (hasRequiredDecodeDataHtml) return decodeDataHtml;
	hasRequiredDecodeDataHtml = 1;
	Object.defineProperty(decodeDataHtml, "__esModule", { value: true });
	decodeDataHtml.default = new Uint16Array(
	"\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c"
	    .split("")
	    .map(function (c) { return c.charCodeAt(0); }));
	return decodeDataHtml;
}

var decodeDataXml = {};

var hasRequiredDecodeDataXml;
function requireDecodeDataXml () {
	if (hasRequiredDecodeDataXml) return decodeDataXml;
	hasRequiredDecodeDataXml = 1;
	Object.defineProperty(decodeDataXml, "__esModule", { value: true });
	decodeDataXml.default = new Uint16Array(
	"\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022"
	    .split("")
	    .map(function (c) { return c.charCodeAt(0); }));
	return decodeDataXml;
}

var decode_codepoint = {};

var hasRequiredDecode_codepoint;
function requireDecode_codepoint () {
	if (hasRequiredDecode_codepoint) return decode_codepoint;
	hasRequiredDecode_codepoint = 1;
	(function (exports) {
		var _a;
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.replaceCodePoint = exports.fromCodePoint = void 0;
		var decodeMap = new Map([
		    [0, 65533],
		    [128, 8364],
		    [130, 8218],
		    [131, 402],
		    [132, 8222],
		    [133, 8230],
		    [134, 8224],
		    [135, 8225],
		    [136, 710],
		    [137, 8240],
		    [138, 352],
		    [139, 8249],
		    [140, 338],
		    [142, 381],
		    [145, 8216],
		    [146, 8217],
		    [147, 8220],
		    [148, 8221],
		    [149, 8226],
		    [150, 8211],
		    [151, 8212],
		    [152, 732],
		    [153, 8482],
		    [154, 353],
		    [155, 8250],
		    [156, 339],
		    [158, 382],
		    [159, 376],
		]);
		exports.fromCodePoint =
		(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
		    var output = "";
		    if (codePoint > 0xffff) {
		        codePoint -= 0x10000;
		        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
		        codePoint = 0xdc00 | (codePoint & 0x3ff);
		    }
		    output += String.fromCharCode(codePoint);
		    return output;
		};
		function replaceCodePoint(codePoint) {
		    var _a;
		    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
		        return 0xfffd;
		    }
		    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
		}
		exports.replaceCodePoint = replaceCodePoint;
		function decodeCodePoint(codePoint) {
		    return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
		}
		exports.default = decodeCodePoint;
	} (decode_codepoint));
	return decode_codepoint;
}

var hasRequiredDecode;
function requireDecode () {
	if (hasRequiredDecode) return decode;
	hasRequiredDecode = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
		    if (mod && mod.__esModule) return mod;
		    var result = {};
		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		    __setModuleDefault(result, mod);
		    return result;
		};
		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
		    return (mod && mod.__esModule) ? mod : { "default": mod };
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
		var decode_data_html_js_1 = __importDefault(requireDecodeDataHtml());
		exports.htmlDecodeTree = decode_data_html_js_1.default;
		var decode_data_xml_js_1 = __importDefault(requireDecodeDataXml());
		exports.xmlDecodeTree = decode_data_xml_js_1.default;
		var decode_codepoint_js_1 = __importStar(requireDecode_codepoint());
		exports.decodeCodePoint = decode_codepoint_js_1.default;
		var decode_codepoint_js_2 = requireDecode_codepoint();
		Object.defineProperty(exports, "replaceCodePoint", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });
		Object.defineProperty(exports, "fromCodePoint", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });
		var CharCodes;
		(function (CharCodes) {
		    CharCodes[CharCodes["NUM"] = 35] = "NUM";
		    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
		    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
		    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
		    CharCodes[CharCodes["NINE"] = 57] = "NINE";
		    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
		    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
		    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
		    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
		    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
		    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
		    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
		})(CharCodes || (CharCodes = {}));
		var TO_LOWER_BIT = 32;
		var BinTrieFlags;
		(function (BinTrieFlags) {
		    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
		    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
		    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
		})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
		function isNumber(code) {
		    return code >= CharCodes.ZERO && code <= CharCodes.NINE;
		}
		function isHexadecimalCharacter(code) {
		    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||
		        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));
		}
		function isAsciiAlphaNumeric(code) {
		    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||
		        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||
		        isNumber(code));
		}
		function isEntityInAttributeInvalidEnd(code) {
		    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
		}
		var EntityDecoderState;
		(function (EntityDecoderState) {
		    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
		    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
		    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
		    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
		    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
		})(EntityDecoderState || (EntityDecoderState = {}));
		var DecodingMode;
		(function (DecodingMode) {
		    DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
		    DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
		    DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
		})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
		var EntityDecoder =  (function () {
		    function EntityDecoder(
		    decodeTree,
		    emitCodePoint,
		    errors) {
		        this.decodeTree = decodeTree;
		        this.emitCodePoint = emitCodePoint;
		        this.errors = errors;
		        this.state = EntityDecoderState.EntityStart;
		        this.consumed = 1;
		        this.result = 0;
		        this.treeIndex = 0;
		        this.excess = 1;
		        this.decodeMode = DecodingMode.Strict;
		    }
		    EntityDecoder.prototype.startEntity = function (decodeMode) {
		        this.decodeMode = decodeMode;
		        this.state = EntityDecoderState.EntityStart;
		        this.result = 0;
		        this.treeIndex = 0;
		        this.excess = 1;
		        this.consumed = 1;
		    };
		    EntityDecoder.prototype.write = function (str, offset) {
		        switch (this.state) {
		            case EntityDecoderState.EntityStart: {
		                if (str.charCodeAt(offset) === CharCodes.NUM) {
		                    this.state = EntityDecoderState.NumericStart;
		                    this.consumed += 1;
		                    return this.stateNumericStart(str, offset + 1);
		                }
		                this.state = EntityDecoderState.NamedEntity;
		                return this.stateNamedEntity(str, offset);
		            }
		            case EntityDecoderState.NumericStart: {
		                return this.stateNumericStart(str, offset);
		            }
		            case EntityDecoderState.NumericDecimal: {
		                return this.stateNumericDecimal(str, offset);
		            }
		            case EntityDecoderState.NumericHex: {
		                return this.stateNumericHex(str, offset);
		            }
		            case EntityDecoderState.NamedEntity: {
		                return this.stateNamedEntity(str, offset);
		            }
		        }
		    };
		    EntityDecoder.prototype.stateNumericStart = function (str, offset) {
		        if (offset >= str.length) {
		            return -1;
		        }
		        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
		            this.state = EntityDecoderState.NumericHex;
		            this.consumed += 1;
		            return this.stateNumericHex(str, offset + 1);
		        }
		        this.state = EntityDecoderState.NumericDecimal;
		        return this.stateNumericDecimal(str, offset);
		    };
		    EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {
		        if (start !== end) {
		            var digitCount = end - start;
		            this.result =
		                this.result * Math.pow(base, digitCount) +
		                    parseInt(str.substr(start, digitCount), base);
		            this.consumed += digitCount;
		        }
		    };
		    EntityDecoder.prototype.stateNumericHex = function (str, offset) {
		        var startIdx = offset;
		        while (offset < str.length) {
		            var char = str.charCodeAt(offset);
		            if (isNumber(char) || isHexadecimalCharacter(char)) {
		                offset += 1;
		            }
		            else {
		                this.addToNumericResult(str, startIdx, offset, 16);
		                return this.emitNumericEntity(char, 3);
		            }
		        }
		        this.addToNumericResult(str, startIdx, offset, 16);
		        return -1;
		    };
		    EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {
		        var startIdx = offset;
		        while (offset < str.length) {
		            var char = str.charCodeAt(offset);
		            if (isNumber(char)) {
		                offset += 1;
		            }
		            else {
		                this.addToNumericResult(str, startIdx, offset, 10);
		                return this.emitNumericEntity(char, 2);
		            }
		        }
		        this.addToNumericResult(str, startIdx, offset, 10);
		        return -1;
		    };
		    EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {
		        var _a;
		        if (this.consumed <= expectedLength) {
		            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
		            return 0;
		        }
		        if (lastCp === CharCodes.SEMI) {
		            this.consumed += 1;
		        }
		        else if (this.decodeMode === DecodingMode.Strict) {
		            return 0;
		        }
		        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
		        if (this.errors) {
		            if (lastCp !== CharCodes.SEMI) {
		                this.errors.missingSemicolonAfterCharacterReference();
		            }
		            this.errors.validateNumericCharacterReference(this.result);
		        }
		        return this.consumed;
		    };
		    EntityDecoder.prototype.stateNamedEntity = function (str, offset) {
		        var decodeTree = this.decodeTree;
		        var current = decodeTree[this.treeIndex];
		        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
		        for (; offset < str.length; offset++, this.excess++) {
		            var char = str.charCodeAt(offset);
		            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
		            if (this.treeIndex < 0) {
		                return this.result === 0 ||
		                    (this.decodeMode === DecodingMode.Attribute &&
		                        (valueLength === 0 ||
		                            isEntityInAttributeInvalidEnd(char)))
		                    ? 0
		                    : this.emitNotTerminatedNamedEntity();
		            }
		            current = decodeTree[this.treeIndex];
		            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
		            if (valueLength !== 0) {
		                if (char === CharCodes.SEMI) {
		                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
		                }
		                if (this.decodeMode !== DecodingMode.Strict) {
		                    this.result = this.treeIndex;
		                    this.consumed += this.excess;
		                    this.excess = 0;
		                }
		            }
		        }
		        return -1;
		    };
		    EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {
		        var _a;
		        var _b = this, result = _b.result, decodeTree = _b.decodeTree;
		        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
		        this.emitNamedEntityData(result, valueLength, this.consumed);
		        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
		        return this.consumed;
		    };
		    EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {
		        var decodeTree = this.decodeTree;
		        this.emitCodePoint(valueLength === 1
		            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH
		            : decodeTree[result + 1], consumed);
		        if (valueLength === 3) {
		            this.emitCodePoint(decodeTree[result + 2], consumed);
		        }
		        return consumed;
		    };
		    EntityDecoder.prototype.end = function () {
		        var _a;
		        switch (this.state) {
		            case EntityDecoderState.NamedEntity: {
		                return this.result !== 0 &&
		                    (this.decodeMode !== DecodingMode.Attribute ||
		                        this.result === this.treeIndex)
		                    ? this.emitNotTerminatedNamedEntity()
		                    : 0;
		            }
		            case EntityDecoderState.NumericDecimal: {
		                return this.emitNumericEntity(0, 2);
		            }
		            case EntityDecoderState.NumericHex: {
		                return this.emitNumericEntity(0, 3);
		            }
		            case EntityDecoderState.NumericStart: {
		                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
		                return 0;
		            }
		            case EntityDecoderState.EntityStart: {
		                return 0;
		            }
		        }
		    };
		    return EntityDecoder;
		}());
		exports.EntityDecoder = EntityDecoder;
		function getDecoder(decodeTree) {
		    var ret = "";
		    var decoder = new EntityDecoder(decodeTree, function (str) { return (ret += (0, decode_codepoint_js_1.fromCodePoint)(str)); });
		    return function decodeWithTrie(str, decodeMode) {
		        var lastIndex = 0;
		        var offset = 0;
		        while ((offset = str.indexOf("&", offset)) >= 0) {
		            ret += str.slice(lastIndex, offset);
		            decoder.startEntity(decodeMode);
		            var len = decoder.write(str,
		            offset + 1);
		            if (len < 0) {
		                lastIndex = offset + decoder.end();
		                break;
		            }
		            lastIndex = offset + len;
		            offset = len === 0 ? lastIndex + 1 : lastIndex;
		        }
		        var result = ret + str.slice(lastIndex);
		        ret = "";
		        return result;
		    };
		}
		function determineBranch(decodeTree, current, nodeIdx, char) {
		    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
		    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
		    if (branchCount === 0) {
		        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
		    }
		    if (jumpOffset) {
		        var value = char - jumpOffset;
		        return value < 0 || value >= branchCount
		            ? -1
		            : decodeTree[nodeIdx + value] - 1;
		    }
		    var lo = nodeIdx;
		    var hi = lo + branchCount - 1;
		    while (lo <= hi) {
		        var mid = (lo + hi) >>> 1;
		        var midVal = decodeTree[mid];
		        if (midVal < char) {
		            lo = mid + 1;
		        }
		        else if (midVal > char) {
		            hi = mid - 1;
		        }
		        else {
		            return decodeTree[mid + branchCount];
		        }
		    }
		    return -1;
		}
		exports.determineBranch = determineBranch;
		var htmlDecoder = getDecoder(decode_data_html_js_1.default);
		var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
		function decodeHTML(str, mode) {
		    if (mode === void 0) { mode = DecodingMode.Legacy; }
		    return htmlDecoder(str, mode);
		}
		exports.decodeHTML = decodeHTML;
		function decodeHTMLAttribute(str) {
		    return htmlDecoder(str, DecodingMode.Attribute);
		}
		exports.decodeHTMLAttribute = decodeHTMLAttribute;
		function decodeHTMLStrict(str) {
		    return htmlDecoder(str, DecodingMode.Strict);
		}
		exports.decodeHTMLStrict = decodeHTMLStrict;
		function decodeXML(str) {
		    return xmlDecoder(str, DecodingMode.Strict);
		}
		exports.decodeXML = decodeXML;
	} (decode));
	return decode;
}

var lib = {};

var hasRequiredLib;
function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	Object.defineProperty(lib, '__esModule', {
	  value: true
	});
	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}
	class Position {
	  constructor(line, col, index) {
	    this.line = void 0;
	    this.column = void 0;
	    this.index = void 0;
	    this.line = line;
	    this.column = col;
	    this.index = index;
	  }
	}
	class SourceLocation {
	  constructor(start, end) {
	    this.start = void 0;
	    this.end = void 0;
	    this.filename = void 0;
	    this.identifierName = void 0;
	    this.start = start;
	    this.end = end;
	  }
	}
	function createPositionWithColumnOffset(position, columnOffset) {
	  const {
	    line,
	    column,
	    index
	  } = position;
	  return new Position(line, column + columnOffset, index + columnOffset);
	}
	const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
	var ModuleErrors = {
	  ImportMetaOutsideModule: {
	    message: `import.meta may appear only with 'sourceType: "module"'`,
	    code
	  },
	  ImportOutsideModule: {
	    message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
	    code
	  }
	};
	const NodeDescriptions = {
	  ArrayPattern: "array destructuring pattern",
	  AssignmentExpression: "assignment expression",
	  AssignmentPattern: "assignment expression",
	  ArrowFunctionExpression: "arrow function expression",
	  ConditionalExpression: "conditional expression",
	  CatchClause: "catch clause",
	  ForOfStatement: "for-of statement",
	  ForInStatement: "for-in statement",
	  ForStatement: "for-loop",
	  FormalParameters: "function parameter list",
	  Identifier: "identifier",
	  ImportSpecifier: "import specifier",
	  ImportDefaultSpecifier: "import default specifier",
	  ImportNamespaceSpecifier: "import namespace specifier",
	  ObjectPattern: "object destructuring pattern",
	  ParenthesizedExpression: "parenthesized expression",
	  RestElement: "rest element",
	  UpdateExpression: {
	    true: "prefix operation",
	    false: "postfix operation"
	  },
	  VariableDeclarator: "variable declaration",
	  YieldExpression: "yield expression"
	};
	const toNodeDescription = node => node.type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
	var StandardErrors = {
	  AccessorIsGenerator: ({
	    kind
	  }) => `A ${kind}ter cannot be a generator.`,
	  ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
	  AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
	  AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
	  AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
	  AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
	  AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
	  AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
	  AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
	  BadGetterArity: "A 'get' accessor must not have any formal parameters.",
	  BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
	  BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
	  ConstructorClassField: "Classes may not have a field named 'constructor'.",
	  ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
	  ConstructorIsAccessor: "Class constructor may not be an accessor.",
	  ConstructorIsAsync: "Constructor can't be an async function.",
	  ConstructorIsGenerator: "Constructor can't be a generator.",
	  DeclarationMissingInitializer: ({
	    kind
	  }) => `Missing initializer in ${kind} declaration.`,
	  DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
	  DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
	  DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
	  DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
	  DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
	  DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
	  DecoratorStaticBlock: "Decorators can't be used with a static block.",
	  DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
	  DeletePrivateField: "Deleting a private field is not allowed.",
	  DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
	  DuplicateConstructor: "Duplicate constructor in the same class.",
	  DuplicateDefaultExport: "Only one default export allowed per module.",
	  DuplicateExport: ({
	    exportName
	  }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
	  DuplicateProto: "Redefinition of __proto__ property.",
	  DuplicateRegExpFlags: "Duplicate regular expression flag.",
	  DynamicImportPhaseRequiresImportExpressions: ({
	    phase
	  }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
	  ElementAfterRest: "Rest element must be last element.",
	  EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
	  ExportBindingIsString: ({
	    localName,
	    exportName
	  }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
	  ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
	  ForInOfLoopInitializer: ({
	    type
	  }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
	  ForInUsing: "For-in loop may not start with 'using' declaration.",
	  ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
	  ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
	  GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
	  IllegalBreakContinue: ({
	    type
	  }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
	  IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
	  IllegalReturn: "'return' outside of function.",
	  ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
	  ImportBindingIsString: ({
	    importName
	  }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,
	  ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
	  ImportCallArity: ({
	    maxArgumentCount
	  }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
	  ImportCallNotNewExpression: "Cannot use new with import(...).",
	  ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
	  ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
	  ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
	  ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
	  IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
	  InvalidBigIntLiteral: "Invalid BigIntLiteral.",
	  InvalidCodePoint: "Code point out of bounds.",
	  InvalidCoverInitializedName: "Invalid shorthand property initializer.",
	  InvalidDecimal: "Invalid decimal.",
	  InvalidDigit: ({
	    radix
	  }) => `Expected number in radix ${radix}.`,
	  InvalidEscapeSequence: "Bad character escape sequence.",
	  InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
	  InvalidEscapedReservedWord: ({
	    reservedWord
	  }) => `Escape sequence in keyword ${reservedWord}.`,
	  InvalidIdentifier: ({
	    identifierName
	  }) => `Invalid identifier ${identifierName}.`,
	  InvalidLhs: ({
	    ancestor
	  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
	  InvalidLhsBinding: ({
	    ancestor
	  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
	  InvalidLhsOptionalChaining: ({
	    ancestor
	  }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
	  InvalidNumber: "Invalid number.",
	  InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
	  InvalidOrUnexpectedToken: ({
	    unexpected
	  }) => `Unexpected character '${unexpected}'.`,
	  InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
	  InvalidPrivateFieldResolution: ({
	    identifierName
	  }) => `Private name #${identifierName} is not defined.`,
	  InvalidPropertyBindingPattern: "Binding member expression.",
	  InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
	  InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
	  LabelRedeclaration: ({
	    labelName
	  }) => `Label '${labelName}' is already declared.`,
	  LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
	  LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
	  MalformedRegExpFlags: "Invalid regular expression flag.",
	  MissingClassName: "A class name is required.",
	  MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
	  MissingSemicolon: "Missing semicolon.",
	  MissingPlugin: ({
	    missingPlugin
	  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
	  MissingOneOfPlugins: ({
	    missingPlugin
	  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
	  MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
	  MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
	  ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
	  ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
	  ModuleAttributesWithDuplicateKeys: ({
	    key
	  }) => `Duplicate key "${key}" is not allowed in module attributes.`,
	  ModuleExportNameHasLoneSurrogate: ({
	    surrogateCharCode
	  }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
	  ModuleExportUndefined: ({
	    localName
	  }) => `Export '${localName}' is not defined.`,
	  MultipleDefaultsInSwitch: "Multiple default clauses.",
	  NewlineAfterThrow: "Illegal newline after throw.",
	  NoCatchOrFinally: "Missing catch or finally clause.",
	  NumberIdentifier: "Identifier directly after number.",
	  NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
	  ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
	  OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
	  OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
	  OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
	  ParamDupe: "Argument name clash.",
	  PatternHasAccessor: "Object pattern can't contain getter or setter.",
	  PatternHasMethod: "Object pattern can't contain methods.",
	  PrivateInExpectedIn: ({
	    identifierName
	  }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
	  PrivateNameRedeclaration: ({
	    identifierName
	  }) => `Duplicate private name #${identifierName}.`,
	  RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
	  RecordNoProto: "'__proto__' is not allowed in Record expressions.",
	  RestTrailingComma: "Unexpected trailing comma after rest element.",
	  SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
	  SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
	  SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
	  StaticPrototype: "Classes may not have static property named prototype.",
	  SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
	  SuperPrivateField: "Private fields can't be accessed on super.",
	  TrailingDecorator: "Decorators must be attached to a class element.",
	  TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
	  UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
	  UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
	  UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
	  UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
	  UnexpectedKeyword: ({
	    keyword
	  }) => `Unexpected keyword '${keyword}'.`,
	  UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
	  UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
	  UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
	  UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
	  UnexpectedPrivateField: "Unexpected private name.",
	  UnexpectedReservedWord: ({
	    reservedWord
	  }) => `Unexpected reserved word '${reservedWord}'.`,
	  UnexpectedSuper: "'super' is only allowed in object methods and classes.",
	  UnexpectedToken: ({
	    expected,
	    unexpected
	  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
	  UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
	  UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
	  UnsupportedBind: "Binding should be performed on object property.",
	  UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
	  UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
	  UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
	  UnsupportedMetaProperty: ({
	    target,
	    onlyValidPropertyName
	  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
	  UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
	  UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
	  UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
	  UnterminatedComment: "Unterminated comment.",
	  UnterminatedRegExp: "Unterminated regular expression.",
	  UnterminatedString: "Unterminated string constant.",
	  UnterminatedTemplate: "Unterminated template.",
	  UsingDeclarationExport: "Using declaration cannot be exported.",
	  UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
	  VarRedeclaration: ({
	    identifierName
	  }) => `Identifier '${identifierName}' has already been declared.`,
	  YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
	  YieldInParameter: "Yield expression is not allowed in formal parameters.",
	  ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
	};
	var StrictModeErrors = {
	  StrictDelete: "Deleting local variable in strict mode.",
	  StrictEvalArguments: ({
	    referenceName
	  }) => `Assigning to '${referenceName}' in strict mode.`,
	  StrictEvalArgumentsBinding: ({
	    bindingName
	  }) => `Binding '${bindingName}' in strict mode.`,
	  StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
	  StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
	  StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
	  StrictWith: "'with' in strict mode."
	};
	const UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
	var PipelineOperatorErrors = {
	  PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
	  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
	  PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
	  PipeTopicUnconfiguredToken: ({
	    token
	  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
	  PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
	  PipeUnparenthesizedBody: ({
	    type
	  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
	    type
	  })}; please wrap it in parentheses.`,
	  PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
	  PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
	  PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
	  PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
	  PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
	  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
	};
	const _excluded = ["toMessage"],
	  _excluded2 = ["message"];
	function defineHidden(obj, key, value) {
	  Object.defineProperty(obj, key, {
	    enumerable: false,
	    configurable: true,
	    value
	  });
	}
	function toParseErrorConstructor(_ref) {
	  let {
	      toMessage
	    } = _ref,
	    properties = _objectWithoutPropertiesLoose(_ref, _excluded);
	  return function constructor(loc, details) {
	    const error = new SyntaxError();
	    Object.assign(error, properties, {
	      loc,
	      pos: loc.index
	    });
	    if ("missingPlugin" in details) {
	      Object.assign(error, {
	        missingPlugin: details.missingPlugin
	      });
	    }
	    defineHidden(error, "clone", function clone(overrides = {}) {
	      var _overrides$loc;
	      const {
	        line,
	        column,
	        index
	      } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
	      return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
	    });
	    defineHidden(error, "details", details);
	    Object.defineProperty(error, "message", {
	      configurable: true,
	      get() {
	        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
	        this.message = message;
	        return message;
	      },
	      set(value) {
	        Object.defineProperty(this, "message", {
	          value,
	          writable: true
	        });
	      }
	    });
	    return error;
	  };
	}
	function ParseErrorEnum(argument, syntaxPlugin) {
	  if (Array.isArray(argument)) {
	    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);
	  }
	  const ParseErrorConstructors = {};
	  for (const reasonCode of Object.keys(argument)) {
	    const template = argument[reasonCode];
	    const _ref2 = typeof template === "string" ? {
	        message: () => template
	      } : typeof template === "function" ? {
	        message: template
	      } : template,
	      {
	        message
	      } = _ref2,
	      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);
	    const toMessage = typeof message === "string" ? () => message : message;
	    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
	      code: "BABEL_PARSER_SYNTAX_ERROR",
	      reasonCode,
	      toMessage
	    }, syntaxPlugin ? {
	      syntaxPlugin
	    } : {}, rest));
	  }
	  return ParseErrorConstructors;
	}
	const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
	const {
	  defineProperty
	} = Object;
	const toUnenumerable = (object, key) => {
	  if (object) {
	    defineProperty(object, key, {
	      enumerable: false,
	      value: object[key]
	    });
	  }
	};
	function toESTreeLocation(node) {
	  toUnenumerable(node.loc.start, "index");
	  toUnenumerable(node.loc.end, "index");
	  return node;
	}
	var estree = superClass => class ESTreeParserMixin extends superClass {
	  parse() {
	    const file = toESTreeLocation(super.parse());
	    if (this.options.tokens) {
	      file.tokens = file.tokens.map(toESTreeLocation);
	    }
	    return file;
	  }
	  parseRegExpLiteral({
	    pattern,
	    flags
	  }) {
	    let regex = null;
	    try {
	      regex = new RegExp(pattern, flags);
	    } catch (_) {}
	    const node = this.estreeParseLiteral(regex);
	    node.regex = {
	      pattern,
	      flags
	    };
	    return node;
	  }
	  parseBigIntLiteral(value) {
	    let bigInt;
	    try {
	      bigInt = BigInt(value);
	    } catch (_unused) {
	      bigInt = null;
	    }
	    const node = this.estreeParseLiteral(bigInt);
	    node.bigint = String(node.value || value);
	    return node;
	  }
	  parseDecimalLiteral(value) {
	    const decimal = null;
	    const node = this.estreeParseLiteral(decimal);
	    node.decimal = String(node.value || value);
	    return node;
	  }
	  estreeParseLiteral(value) {
	    return this.parseLiteral(value, "Literal");
	  }
	  parseStringLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }
	  parseNumericLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }
	  parseNullLiteral() {
	    return this.estreeParseLiteral(null);
	  }
	  parseBooleanLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }
	  directiveToStmt(directive) {
	    const expression = directive.value;
	    delete directive.value;
	    expression.type = "Literal";
	    expression.raw = expression.extra.raw;
	    expression.value = expression.extra.expressionValue;
	    const stmt = directive;
	    stmt.type = "ExpressionStatement";
	    stmt.expression = expression;
	    stmt.directive = expression.extra.rawValue;
	    delete expression.extra;
	    return stmt;
	  }
	  initFunction(node, isAsync) {
	    super.initFunction(node, isAsync);
	    node.expression = false;
	  }
	  checkDeclaration(node) {
	    if (node != null && this.isObjectProperty(node)) {
	      this.checkDeclaration(node.value);
	    } else {
	      super.checkDeclaration(node);
	    }
	  }
	  getObjectOrClassMethodParams(method) {
	    return method.value.params;
	  }
	  isValidDirective(stmt) {
	    var _stmt$expression$extr;
	    return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
	  }
	  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
	    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
	    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
	    node.body = directiveStatements.concat(node.body);
	    delete node.directives;
	  }
	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
	    if (method.typeParameters) {
	      method.value.typeParameters = method.typeParameters;
	      delete method.typeParameters;
	    }
	    classBody.body.push(method);
	  }
	  parsePrivateName() {
	    const node = super.parsePrivateName();
	    {
	      if (!this.getPluginOption("estree", "classFeatures")) {
	        return node;
	      }
	    }
	    return this.convertPrivateNameToPrivateIdentifier(node);
	  }
	  convertPrivateNameToPrivateIdentifier(node) {
	    const name = super.getPrivateNameSV(node);
	    node = node;
	    delete node.id;
	    node.name = name;
	    node.type = "PrivateIdentifier";
	    return node;
	  }
	  isPrivateName(node) {
	    {
	      if (!this.getPluginOption("estree", "classFeatures")) {
	        return super.isPrivateName(node);
	      }
	    }
	    return node.type === "PrivateIdentifier";
	  }
	  getPrivateNameSV(node) {
	    {
	      if (!this.getPluginOption("estree", "classFeatures")) {
	        return super.getPrivateNameSV(node);
	      }
	    }
	    return node.name;
	  }
	  parseLiteral(value, type) {
	    const node = super.parseLiteral(value, type);
	    node.raw = node.extra.raw;
	    delete node.extra;
	    return node;
	  }
	  parseFunctionBody(node, allowExpression, isMethod = false) {
	    super.parseFunctionBody(node, allowExpression, isMethod);
	    node.expression = node.body.type !== "BlockStatement";
	  }
	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
	    let funcNode = this.startNode();
	    funcNode.kind = node.kind;
	    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
	    funcNode.type = "FunctionExpression";
	    delete funcNode.kind;
	    node.value = funcNode;
	    if (type === "ClassPrivateMethod") {
	      node.computed = false;
	    }
	    return this.finishNode(node, "MethodDefinition");
	  }
	  nameIsConstructor(key) {
	    if (key.type === "Literal") return key.value === "constructor";
	    return super.nameIsConstructor(key);
	  }
	  parseClassProperty(...args) {
	    const propertyNode = super.parseClassProperty(...args);
	    {
	      if (!this.getPluginOption("estree", "classFeatures")) {
	        return propertyNode;
	      }
	    }
	    propertyNode.type = "PropertyDefinition";
	    return propertyNode;
	  }
	  parseClassPrivateProperty(...args) {
	    const propertyNode = super.parseClassPrivateProperty(...args);
	    {
	      if (!this.getPluginOption("estree", "classFeatures")) {
	        return propertyNode;
	      }
	    }
	    propertyNode.type = "PropertyDefinition";
	    propertyNode.computed = false;
	    return propertyNode;
	  }
	  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
	    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
	    if (node) {
	      node.type = "Property";
	      if (node.kind === "method") {
	        node.kind = "init";
	      }
	      node.shorthand = false;
	    }
	    return node;
	  }
	  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
	    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
	    if (node) {
	      node.kind = "init";
	      node.type = "Property";
	    }
	    return node;
	  }
	  isValidLVal(type, isUnparenthesizedInAssign, binding) {
	    return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
	  }
	  isAssignable(node, isBinding) {
	    if (node != null && this.isObjectProperty(node)) {
	      return this.isAssignable(node.value, isBinding);
	    }
	    return super.isAssignable(node, isBinding);
	  }
	  toAssignable(node, isLHS = false) {
	    if (node != null && this.isObjectProperty(node)) {
	      const {
	        key,
	        value
	      } = node;
	      if (this.isPrivateName(key)) {
	        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
	      }
	      this.toAssignable(value, isLHS);
	    } else {
	      super.toAssignable(node, isLHS);
	    }
	  }
	  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
	    if (prop.type === "Property" && (prop.kind === "get" || prop.kind === "set")) {
	      this.raise(Errors.PatternHasAccessor, prop.key);
	    } else if (prop.type === "Property" && prop.method) {
	      this.raise(Errors.PatternHasMethod, prop.key);
	    } else {
	      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
	    }
	  }
	  finishCallExpression(unfinished, optional) {
	    const node = super.finishCallExpression(unfinished, optional);
	    if (node.callee.type === "Import") {
	      node.type = "ImportExpression";
	      node.source = node.arguments[0];
	      if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
	        var _ref, _ref2;
	        node.options = (_ref = node.arguments[1]) != null ? _ref : null;
	        node.attributes = (_ref2 = node.arguments[1]) != null ? _ref2 : null;
	      }
	      delete node.arguments;
	      delete node.callee;
	    }
	    return node;
	  }
	  toReferencedArguments(node) {
	    if (node.type === "ImportExpression") {
	      return;
	    }
	    super.toReferencedArguments(node);
	  }
	  parseExport(unfinished, decorators) {
	    const exportStartLoc = this.state.lastTokStartLoc;
	    const node = super.parseExport(unfinished, decorators);
	    switch (node.type) {
	      case "ExportAllDeclaration":
	        node.exported = null;
	        break;
	      case "ExportNamedDeclaration":
	        if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
	          node.type = "ExportAllDeclaration";
	          node.exported = node.specifiers[0].exported;
	          delete node.specifiers;
	        }
	      case "ExportDefaultDeclaration":
	        {
	          var _declaration$decorato;
	          const {
	            declaration
	          } = node;
	          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
	            this.resetStartLocation(node, exportStartLoc);
	          }
	        }
	        break;
	    }
	    return node;
	  }
	  parseSubscript(base, startLoc, noCalls, state) {
	    const node = super.parseSubscript(base, startLoc, noCalls, state);
	    if (state.optionalChainMember) {
	      if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
	        node.type = node.type.substring(8);
	      }
	      if (state.stop) {
	        const chain = this.startNodeAtNode(node);
	        chain.expression = node;
	        return this.finishNode(chain, "ChainExpression");
	      }
	    } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
	      node.optional = false;
	    }
	    return node;
	  }
	  isOptionalMemberExpression(node) {
	    if (node.type === "ChainExpression") {
	      return node.expression.type === "MemberExpression";
	    }
	    return super.isOptionalMemberExpression(node);
	  }
	  hasPropertyAsPrivateName(node) {
	    if (node.type === "ChainExpression") {
	      node = node.expression;
	    }
	    return super.hasPropertyAsPrivateName(node);
	  }
	  isObjectProperty(node) {
	    return node.type === "Property" && node.kind === "init" && !node.method;
	  }
	  isObjectMethod(node) {
	    return node.type === "Property" && (node.method || node.kind === "get" || node.kind === "set");
	  }
	  finishNodeAt(node, type, endLoc) {
	    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
	  }
	  resetStartLocation(node, startLoc) {
	    super.resetStartLocation(node, startLoc);
	    toESTreeLocation(node);
	  }
	  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
	    super.resetEndLocation(node, endLoc);
	    toESTreeLocation(node);
	  }
	};
	class TokContext {
	  constructor(token, preserveSpace) {
	    this.token = void 0;
	    this.preserveSpace = void 0;
	    this.token = token;
	    this.preserveSpace = !!preserveSpace;
	  }
	}
	const types = {
	  brace: new TokContext("{"),
	  j_oTag: new TokContext("<tag"),
	  j_cTag: new TokContext("</tag"),
	  j_expr: new TokContext("<tag>...</tag>", true)
	};
	{
	  types.template = new TokContext("`", true);
	}
	const beforeExpr = true;
	const startsExpr = true;
	const isLoop = true;
	const isAssign = true;
	const prefix = true;
	const postfix = true;
	class ExportedTokenType {
	  constructor(label, conf = {}) {
	    this.label = void 0;
	    this.keyword = void 0;
	    this.beforeExpr = void 0;
	    this.startsExpr = void 0;
	    this.rightAssociative = void 0;
	    this.isLoop = void 0;
	    this.isAssign = void 0;
	    this.prefix = void 0;
	    this.postfix = void 0;
	    this.binop = void 0;
	    this.label = label;
	    this.keyword = conf.keyword;
	    this.beforeExpr = !!conf.beforeExpr;
	    this.startsExpr = !!conf.startsExpr;
	    this.rightAssociative = !!conf.rightAssociative;
	    this.isLoop = !!conf.isLoop;
	    this.isAssign = !!conf.isAssign;
	    this.prefix = !!conf.prefix;
	    this.postfix = !!conf.postfix;
	    this.binop = conf.binop != null ? conf.binop : null;
	    {
	      this.updateContext = null;
	    }
	  }
	}
	const keywords$1 = new Map();
	function createKeyword(name, options = {}) {
	  options.keyword = name;
	  const token = createToken(name, options);
	  keywords$1.set(name, token);
	  return token;
	}
	function createBinop(name, binop) {
	  return createToken(name, {
	    beforeExpr,
	    binop
	  });
	}
	let tokenTypeCounter = -1;
	const tokenTypes = [];
	const tokenLabels = [];
	const tokenBinops = [];
	const tokenBeforeExprs = [];
	const tokenStartsExprs = [];
	const tokenPrefixes = [];
	function createToken(name, options = {}) {
	  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
	  ++tokenTypeCounter;
	  tokenLabels.push(name);
	  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
	  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
	  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
	  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
	  tokenTypes.push(new ExportedTokenType(name, options));
	  return tokenTypeCounter;
	}
	function createKeywordLike(name, options = {}) {
	  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
	  ++tokenTypeCounter;
	  keywords$1.set(name, tokenTypeCounter);
	  tokenLabels.push(name);
	  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
	  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
	  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
	  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
	  tokenTypes.push(new ExportedTokenType("name", options));
	  return tokenTypeCounter;
	}
	const tt = {
	  bracketL: createToken("[", {
	    beforeExpr,
	    startsExpr
	  }),
	  bracketHashL: createToken("#[", {
	    beforeExpr,
	    startsExpr
	  }),
	  bracketBarL: createToken("[|", {
	    beforeExpr,
	    startsExpr
	  }),
	  bracketR: createToken("]"),
	  bracketBarR: createToken("|]"),
	  braceL: createToken("{", {
	    beforeExpr,
	    startsExpr
	  }),
	  braceBarL: createToken("{|", {
	    beforeExpr,
	    startsExpr
	  }),
	  braceHashL: createToken("#{", {
	    beforeExpr,
	    startsExpr
	  }),
	  braceR: createToken("}"),
	  braceBarR: createToken("|}"),
	  parenL: createToken("(", {
	    beforeExpr,
	    startsExpr
	  }),
	  parenR: createToken(")"),
	  comma: createToken(",", {
	    beforeExpr
	  }),
	  semi: createToken(";", {
	    beforeExpr
	  }),
	  colon: createToken(":", {
	    beforeExpr
	  }),
	  doubleColon: createToken("::", {
	    beforeExpr
	  }),
	  dot: createToken("."),
	  question: createToken("?", {
	    beforeExpr
	  }),
	  questionDot: createToken("?."),
	  arrow: createToken("=>", {
	    beforeExpr
	  }),
	  template: createToken("template"),
	  ellipsis: createToken("...", {
	    beforeExpr
	  }),
	  backQuote: createToken("`", {
	    startsExpr
	  }),
	  dollarBraceL: createToken("${", {
	    beforeExpr,
	    startsExpr
	  }),
	  templateTail: createToken("...`", {
	    startsExpr
	  }),
	  templateNonTail: createToken("...${", {
	    beforeExpr,
	    startsExpr
	  }),
	  at: createToken("@"),
	  hash: createToken("#", {
	    startsExpr
	  }),
	  interpreterDirective: createToken("#!..."),
	  eq: createToken("=", {
	    beforeExpr,
	    isAssign
	  }),
	  assign: createToken("_=", {
	    beforeExpr,
	    isAssign
	  }),
	  slashAssign: createToken("_=", {
	    beforeExpr,
	    isAssign
	  }),
	  xorAssign: createToken("_=", {
	    beforeExpr,
	    isAssign
	  }),
	  moduloAssign: createToken("_=", {
	    beforeExpr,
	    isAssign
	  }),
	  incDec: createToken("++/--", {
	    prefix,
	    postfix,
	    startsExpr
	  }),
	  bang: createToken("!", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  tilde: createToken("~", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  doubleCaret: createToken("^^", {
	    startsExpr
	  }),
	  doubleAt: createToken("@@", {
	    startsExpr
	  }),
	  pipeline: createBinop("|>", 0),
	  nullishCoalescing: createBinop("??", 1),
	  logicalOR: createBinop("||", 1),
	  logicalAND: createBinop("&&", 2),
	  bitwiseOR: createBinop("|", 3),
	  bitwiseXOR: createBinop("^", 4),
	  bitwiseAND: createBinop("&", 5),
	  equality: createBinop("==/!=/===/!==", 6),
	  lt: createBinop("</>/<=/>=", 7),
	  gt: createBinop("</>/<=/>=", 7),
	  relational: createBinop("</>/<=/>=", 7),
	  bitShift: createBinop("<</>>/>>>", 8),
	  bitShiftL: createBinop("<</>>/>>>", 8),
	  bitShiftR: createBinop("<</>>/>>>", 8),
	  plusMin: createToken("+/-", {
	    beforeExpr,
	    binop: 9,
	    prefix,
	    startsExpr
	  }),
	  modulo: createToken("%", {
	    binop: 10,
	    startsExpr
	  }),
	  star: createToken("*", {
	    binop: 10
	  }),
	  slash: createBinop("/", 10),
	  exponent: createToken("**", {
	    beforeExpr,
	    binop: 11,
	    rightAssociative: true
	  }),
	  _in: createKeyword("in", {
	    beforeExpr,
	    binop: 7
	  }),
	  _instanceof: createKeyword("instanceof", {
	    beforeExpr,
	    binop: 7
	  }),
	  _break: createKeyword("break"),
	  _case: createKeyword("case", {
	    beforeExpr
	  }),
	  _catch: createKeyword("catch"),
	  _continue: createKeyword("continue"),
	  _debugger: createKeyword("debugger"),
	  _default: createKeyword("default", {
	    beforeExpr
	  }),
	  _else: createKeyword("else", {
	    beforeExpr
	  }),
	  _finally: createKeyword("finally"),
	  _function: createKeyword("function", {
	    startsExpr
	  }),
	  _if: createKeyword("if"),
	  _return: createKeyword("return", {
	    beforeExpr
	  }),
	  _switch: createKeyword("switch"),
	  _throw: createKeyword("throw", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _try: createKeyword("try"),
	  _var: createKeyword("var"),
	  _const: createKeyword("const"),
	  _with: createKeyword("with"),
	  _new: createKeyword("new", {
	    beforeExpr,
	    startsExpr
	  }),
	  _this: createKeyword("this", {
	    startsExpr
	  }),
	  _super: createKeyword("super", {
	    startsExpr
	  }),
	  _class: createKeyword("class", {
	    startsExpr
	  }),
	  _extends: createKeyword("extends", {
	    beforeExpr
	  }),
	  _export: createKeyword("export"),
	  _import: createKeyword("import", {
	    startsExpr
	  }),
	  _null: createKeyword("null", {
	    startsExpr
	  }),
	  _true: createKeyword("true", {
	    startsExpr
	  }),
	  _false: createKeyword("false", {
	    startsExpr
	  }),
	  _typeof: createKeyword("typeof", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _void: createKeyword("void", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _delete: createKeyword("delete", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _do: createKeyword("do", {
	    isLoop,
	    beforeExpr
	  }),
	  _for: createKeyword("for", {
	    isLoop
	  }),
	  _while: createKeyword("while", {
	    isLoop
	  }),
	  _as: createKeywordLike("as", {
	    startsExpr
	  }),
	  _assert: createKeywordLike("assert", {
	    startsExpr
	  }),
	  _async: createKeywordLike("async", {
	    startsExpr
	  }),
	  _await: createKeywordLike("await", {
	    startsExpr
	  }),
	  _defer: createKeywordLike("defer", {
	    startsExpr
	  }),
	  _from: createKeywordLike("from", {
	    startsExpr
	  }),
	  _get: createKeywordLike("get", {
	    startsExpr
	  }),
	  _let: createKeywordLike("let", {
	    startsExpr
	  }),
	  _meta: createKeywordLike("meta", {
	    startsExpr
	  }),
	  _of: createKeywordLike("of", {
	    startsExpr
	  }),
	  _sent: createKeywordLike("sent", {
	    startsExpr
	  }),
	  _set: createKeywordLike("set", {
	    startsExpr
	  }),
	  _source: createKeywordLike("source", {
	    startsExpr
	  }),
	  _static: createKeywordLike("static", {
	    startsExpr
	  }),
	  _using: createKeywordLike("using", {
	    startsExpr
	  }),
	  _yield: createKeywordLike("yield", {
	    startsExpr
	  }),
	  _asserts: createKeywordLike("asserts", {
	    startsExpr
	  }),
	  _checks: createKeywordLike("checks", {
	    startsExpr
	  }),
	  _exports: createKeywordLike("exports", {
	    startsExpr
	  }),
	  _global: createKeywordLike("global", {
	    startsExpr
	  }),
	  _implements: createKeywordLike("implements", {
	    startsExpr
	  }),
	  _intrinsic: createKeywordLike("intrinsic", {
	    startsExpr
	  }),
	  _infer: createKeywordLike("infer", {
	    startsExpr
	  }),
	  _is: createKeywordLike("is", {
	    startsExpr
	  }),
	  _mixins: createKeywordLike("mixins", {
	    startsExpr
	  }),
	  _proto: createKeywordLike("proto", {
	    startsExpr
	  }),
	  _require: createKeywordLike("require", {
	    startsExpr
	  }),
	  _satisfies: createKeywordLike("satisfies", {
	    startsExpr
	  }),
	  _keyof: createKeywordLike("keyof", {
	    startsExpr
	  }),
	  _readonly: createKeywordLike("readonly", {
	    startsExpr
	  }),
	  _unique: createKeywordLike("unique", {
	    startsExpr
	  }),
	  _abstract: createKeywordLike("abstract", {
	    startsExpr
	  }),
	  _declare: createKeywordLike("declare", {
	    startsExpr
	  }),
	  _enum: createKeywordLike("enum", {
	    startsExpr
	  }),
	  _module: createKeywordLike("module", {
	    startsExpr
	  }),
	  _namespace: createKeywordLike("namespace", {
	    startsExpr
	  }),
	  _interface: createKeywordLike("interface", {
	    startsExpr
	  }),
	  _type: createKeywordLike("type", {
	    startsExpr
	  }),
	  _opaque: createKeywordLike("opaque", {
	    startsExpr
	  }),
	  name: createToken("name", {
	    startsExpr
	  }),
	  string: createToken("string", {
	    startsExpr
	  }),
	  num: createToken("num", {
	    startsExpr
	  }),
	  bigint: createToken("bigint", {
	    startsExpr
	  }),
	  decimal: createToken("decimal", {
	    startsExpr
	  }),
	  regexp: createToken("regexp", {
	    startsExpr
	  }),
	  privateName: createToken("#name", {
	    startsExpr
	  }),
	  eof: createToken("eof"),
	  jsxName: createToken("jsxName"),
	  jsxText: createToken("jsxText", {
	    beforeExpr: true
	  }),
	  jsxTagStart: createToken("jsxTagStart", {
	    startsExpr: true
	  }),
	  jsxTagEnd: createToken("jsxTagEnd"),
	  placeholder: createToken("%%", {
	    startsExpr: true
	  })
	};
	function tokenIsIdentifier(token) {
	  return token >= 93 && token <= 132;
	}
	function tokenKeywordOrIdentifierIsKeyword(token) {
	  return token <= 92;
	}
	function tokenIsKeywordOrIdentifier(token) {
	  return token >= 58 && token <= 132;
	}
	function tokenIsLiteralPropertyName(token) {
	  return token >= 58 && token <= 136;
	}
	function tokenComesBeforeExpression(token) {
	  return tokenBeforeExprs[token];
	}
	function tokenCanStartExpression(token) {
	  return tokenStartsExprs[token];
	}
	function tokenIsAssignment(token) {
	  return token >= 29 && token <= 33;
	}
	function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
	  return token >= 129 && token <= 131;
	}
	function tokenIsLoop(token) {
	  return token >= 90 && token <= 92;
	}
	function tokenIsKeyword(token) {
	  return token >= 58 && token <= 92;
	}
	function tokenIsOperator(token) {
	  return token >= 39 && token <= 59;
	}
	function tokenIsPostfix(token) {
	  return token === 34;
	}
	function tokenIsPrefix(token) {
	  return tokenPrefixes[token];
	}
	function tokenIsTSTypeOperator(token) {
	  return token >= 121 && token <= 123;
	}
	function tokenIsTSDeclarationStart(token) {
	  return token >= 124 && token <= 130;
	}
	function tokenLabelName(token) {
	  return tokenLabels[token];
	}
	function tokenOperatorPrecedence(token) {
	  return tokenBinops[token];
	}
	function tokenIsRightAssociative(token) {
	  return token === 57;
	}
	function tokenIsTemplate(token) {
	  return token >= 24 && token <= 25;
	}
	function getExportedToken(token) {
	  return tokenTypes[token];
	}
	{
	  tokenTypes[8].updateContext = context => {
	    context.pop();
	  };
	  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {
	    context.push(types.brace);
	  };
	  tokenTypes[22].updateContext = context => {
	    if (context[context.length - 1] === types.template) {
	      context.pop();
	    } else {
	      context.push(types.template);
	    }
	  };
	  tokenTypes[142].updateContext = context => {
	    context.push(types.j_expr, types.j_oTag);
	  };
	}
	let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0cf3\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ece\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\u30fb\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f\uff65";
	const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
	const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
	function isInAstralSet(code, set) {
	  let pos = 0x10000;
	  for (let i = 0, length = set.length; i < length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	  return false;
	}
	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;
	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  }
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}
	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;
	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  }
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}
	const reservedWords = {
	  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
	  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
	  strictBind: ["eval", "arguments"]
	};
	const keywords = new Set(reservedWords.keyword);
	const reservedWordsStrictSet = new Set(reservedWords.strict);
	const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
	function isReservedWord(word, inModule) {
	  return inModule && word === "await" || word === "enum";
	}
	function isStrictReservedWord(word, inModule) {
	  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
	}
	function isStrictBindOnlyReservedWord(word) {
	  return reservedWordsStrictBindSet.has(word);
	}
	function isStrictBindReservedWord(word, inModule) {
	  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
	}
	function isKeyword(word) {
	  return keywords.has(word);
	}
	function isIteratorStart(current, next, next2) {
	  return current === 64 && next === 64 && isIdentifierStart(next2);
	}
	const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
	function canBeReservedWord(word) {
	  return reservedWordLikeSet.has(word);
	}
	class Scope {
	  constructor(flags) {
	    this.flags = 0;
	    this.names = new Map();
	    this.firstLexicalName = "";
	    this.flags = flags;
	  }
	}
	class ScopeHandler {
	  constructor(parser, inModule) {
	    this.parser = void 0;
	    this.scopeStack = [];
	    this.inModule = void 0;
	    this.undefinedExports = new Map();
	    this.parser = parser;
	    this.inModule = inModule;
	  }
	  get inTopLevel() {
	    return (this.currentScope().flags & 1) > 0;
	  }
	  get inFunction() {
	    return (this.currentVarScopeFlags() & 2) > 0;
	  }
	  get allowSuper() {
	    return (this.currentThisScopeFlags() & 16) > 0;
	  }
	  get allowDirectSuper() {
	    return (this.currentThisScopeFlags() & 32) > 0;
	  }
	  get inClass() {
	    return (this.currentThisScopeFlags() & 64) > 0;
	  }
	  get inClassAndNotInNonArrowFunction() {
	    const flags = this.currentThisScopeFlags();
	    return (flags & 64) > 0 && (flags & 2) === 0;
	  }
	  get inStaticBlock() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];
	      if (flags & 128) {
	        return true;
	      }
	      if (flags & (387 | 64)) {
	        return false;
	      }
	    }
	  }
	  get inNonArrowFunction() {
	    return (this.currentThisScopeFlags() & 2) > 0;
	  }
	  get treatFunctionsAsVar() {
	    return this.treatFunctionsAsVarInScope(this.currentScope());
	  }
	  createScope(flags) {
	    return new Scope(flags);
	  }
	  enter(flags) {
	    this.scopeStack.push(this.createScope(flags));
	  }
	  exit() {
	    const scope = this.scopeStack.pop();
	    return scope.flags;
	  }
	  treatFunctionsAsVarInScope(scope) {
	    return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);
	  }
	  declareName(name, bindingType, loc) {
	    let scope = this.currentScope();
	    if (bindingType & 8 || bindingType & 16) {
	      this.checkRedeclarationInScope(scope, name, bindingType, loc);
	      let type = scope.names.get(name) || 0;
	      if (bindingType & 16) {
	        type = type | 4;
	      } else {
	        if (!scope.firstLexicalName) {
	          scope.firstLexicalName = name;
	        }
	        type = type | 2;
	      }
	      scope.names.set(name, type);
	      if (bindingType & 8) {
	        this.maybeExportDefined(scope, name);
	      }
	    } else if (bindingType & 4) {
	      for (let i = this.scopeStack.length - 1; i >= 0; --i) {
	        scope = this.scopeStack[i];
	        this.checkRedeclarationInScope(scope, name, bindingType, loc);
	        scope.names.set(name, (scope.names.get(name) || 0) | 1);
	        this.maybeExportDefined(scope, name);
	        if (scope.flags & 387) break;
	      }
	    }
	    if (this.parser.inModule && scope.flags & 1) {
	      this.undefinedExports.delete(name);
	    }
	  }
	  maybeExportDefined(scope, name) {
	    if (this.parser.inModule && scope.flags & 1) {
	      this.undefinedExports.delete(name);
	    }
	  }
	  checkRedeclarationInScope(scope, name, bindingType, loc) {
	    if (this.isRedeclaredInScope(scope, name, bindingType)) {
	      this.parser.raise(Errors.VarRedeclaration, loc, {
	        identifierName: name
	      });
	    }
	  }
	  isRedeclaredInScope(scope, name, bindingType) {
	    if (!(bindingType & 1)) return false;
	    if (bindingType & 8) {
	      return scope.names.has(name);
	    }
	    const type = scope.names.get(name);
	    if (bindingType & 16) {
	      return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope) && (type & 1) > 0;
	    }
	    return (type & 2) > 0 && !(scope.flags & 8 && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (type & 4) > 0;
	  }
	  checkLocalExport(id) {
	    const {
	      name
	    } = id;
	    const topLevelScope = this.scopeStack[0];
	    if (!topLevelScope.names.has(name)) {
	      this.undefinedExports.set(name, id.loc.start);
	    }
	  }
	  currentScope() {
	    return this.scopeStack[this.scopeStack.length - 1];
	  }
	  currentVarScopeFlags() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];
	      if (flags & 387) {
	        return flags;
	      }
	    }
	  }
	  currentThisScopeFlags() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];
	      if (flags & (387 | 64) && !(flags & 4)) {
	        return flags;
	      }
	    }
	  }
	}
	class FlowScope extends Scope {
	  constructor(...args) {
	    super(...args);
	    this.declareFunctions = new Set();
	  }
	}
	class FlowScopeHandler extends ScopeHandler {
	  createScope(flags) {
	    return new FlowScope(flags);
	  }
	  declareName(name, bindingType, loc) {
	    const scope = this.currentScope();
	    if (bindingType & 2048) {
	      this.checkRedeclarationInScope(scope, name, bindingType, loc);
	      this.maybeExportDefined(scope, name);
	      scope.declareFunctions.add(name);
	      return;
	    }
	    super.declareName(name, bindingType, loc);
	  }
	  isRedeclaredInScope(scope, name, bindingType) {
	    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;
	    if (bindingType & 2048 && !scope.declareFunctions.has(name)) {
	      const type = scope.names.get(name);
	      return (type & 4) > 0 || (type & 2) > 0;
	    }
	    return false;
	  }
	  checkLocalExport(id) {
	    if (!this.scopeStack[0].declareFunctions.has(id.name)) {
	      super.checkLocalExport(id);
	    }
	  }
	}
	class BaseParser {
	  constructor() {
	    this.sawUnambiguousESM = false;
	    this.ambiguousScriptDifferentAst = false;
	  }
	  hasPlugin(pluginConfig) {
	    if (typeof pluginConfig === "string") {
	      return this.plugins.has(pluginConfig);
	    } else {
	      const [pluginName, pluginOptions] = pluginConfig;
	      if (!this.hasPlugin(pluginName)) {
	        return false;
	      }
	      const actualOptions = this.plugins.get(pluginName);
	      for (const key of Object.keys(pluginOptions)) {
	        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
	          return false;
	        }
	      }
	      return true;
	    }
	  }
	  getPluginOption(plugin, name) {
	    var _this$plugins$get;
	    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
	  }
	}
	function setTrailingComments(node, comments) {
	  if (node.trailingComments === undefined) {
	    node.trailingComments = comments;
	  } else {
	    node.trailingComments.unshift(...comments);
	  }
	}
	function setLeadingComments(node, comments) {
	  if (node.leadingComments === undefined) {
	    node.leadingComments = comments;
	  } else {
	    node.leadingComments.unshift(...comments);
	  }
	}
	function setInnerComments(node, comments) {
	  if (node.innerComments === undefined) {
	    node.innerComments = comments;
	  } else {
	    node.innerComments.unshift(...comments);
	  }
	}
	function adjustInnerComments(node, elements, commentWS) {
	  let lastElement = null;
	  let i = elements.length;
	  while (lastElement === null && i > 0) {
	    lastElement = elements[--i];
	  }
	  if (lastElement === null || lastElement.start > commentWS.start) {
	    setInnerComments(node, commentWS.comments);
	  } else {
	    setTrailingComments(lastElement, commentWS.comments);
	  }
	}
	class CommentsParser extends BaseParser {
	  addComment(comment) {
	    if (this.filename) comment.loc.filename = this.filename;
	    const {
	      commentsLen
	    } = this.state;
	    if (this.comments.length !== commentsLen) {
	      this.comments.length = commentsLen;
	    }
	    this.comments.push(comment);
	    this.state.commentsLen++;
	  }
	  processComment(node) {
	    const {
	      commentStack
	    } = this.state;
	    const commentStackLength = commentStack.length;
	    if (commentStackLength === 0) return;
	    let i = commentStackLength - 1;
	    const lastCommentWS = commentStack[i];
	    if (lastCommentWS.start === node.end) {
	      lastCommentWS.leadingNode = node;
	      i--;
	    }
	    const {
	      start: nodeStart
	    } = node;
	    for (; i >= 0; i--) {
	      const commentWS = commentStack[i];
	      const commentEnd = commentWS.end;
	      if (commentEnd > nodeStart) {
	        commentWS.containingNode = node;
	        this.finalizeComment(commentWS);
	        commentStack.splice(i, 1);
	      } else {
	        if (commentEnd === nodeStart) {
	          commentWS.trailingNode = node;
	        }
	        break;
	      }
	    }
	  }
	  finalizeComment(commentWS) {
	    const {
	      comments
	    } = commentWS;
	    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
	      if (commentWS.leadingNode !== null) {
	        setTrailingComments(commentWS.leadingNode, comments);
	      }
	      if (commentWS.trailingNode !== null) {
	        setLeadingComments(commentWS.trailingNode, comments);
	      }
	    } else {
	      const {
	        containingNode: node,
	        start: commentStart
	      } = commentWS;
	      if (this.input.charCodeAt(commentStart - 1) === 44) {
	        switch (node.type) {
	          case "ObjectExpression":
	          case "ObjectPattern":
	          case "RecordExpression":
	            adjustInnerComments(node, node.properties, commentWS);
	            break;
	          case "CallExpression":
	          case "OptionalCallExpression":
	            adjustInnerComments(node, node.arguments, commentWS);
	            break;
	          case "FunctionDeclaration":
	          case "FunctionExpression":
	          case "ArrowFunctionExpression":
	          case "ObjectMethod":
	          case "ClassMethod":
	          case "ClassPrivateMethod":
	            adjustInnerComments(node, node.params, commentWS);
	            break;
	          case "ArrayExpression":
	          case "ArrayPattern":
	          case "TupleExpression":
	            adjustInnerComments(node, node.elements, commentWS);
	            break;
	          case "ExportNamedDeclaration":
	          case "ImportDeclaration":
	            adjustInnerComments(node, node.specifiers, commentWS);
	            break;
	          default:
	            {
	              setInnerComments(node, comments);
	            }
	        }
	      } else {
	        setInnerComments(node, comments);
	      }
	    }
	  }
	  finalizeRemainingComments() {
	    const {
	      commentStack
	    } = this.state;
	    for (let i = commentStack.length - 1; i >= 0; i--) {
	      this.finalizeComment(commentStack[i]);
	    }
	    this.state.commentStack = [];
	  }
	  resetPreviousNodeTrailingComments(node) {
	    const {
	      commentStack
	    } = this.state;
	    const {
	      length
	    } = commentStack;
	    if (length === 0) return;
	    const commentWS = commentStack[length - 1];
	    if (commentWS.leadingNode === node) {
	      commentWS.leadingNode = null;
	    }
	  }
	  resetPreviousIdentifierLeadingComments(node) {
	    const {
	      commentStack
	    } = this.state;
	    const {
	      length
	    } = commentStack;
	    if (length === 0) return;
	    if (commentStack[length - 1].trailingNode === node) {
	      commentStack[length - 1].trailingNode = null;
	    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {
	      commentStack[length - 2].trailingNode = null;
	    }
	  }
	  takeSurroundingComments(node, start, end) {
	    const {
	      commentStack
	    } = this.state;
	    const commentStackLength = commentStack.length;
	    if (commentStackLength === 0) return;
	    let i = commentStackLength - 1;
	    for (; i >= 0; i--) {
	      const commentWS = commentStack[i];
	      const commentEnd = commentWS.end;
	      const commentStart = commentWS.start;
	      if (commentStart === end) {
	        commentWS.leadingNode = node;
	      } else if (commentEnd === start) {
	        commentWS.trailingNode = node;
	      } else if (commentEnd < start) {
	        break;
	      }
	    }
	  }
	}
	const lineBreak = /\r\n?|[\n\u2028\u2029]/;
	const lineBreakG = new RegExp(lineBreak.source, "g");
	function isNewLine(code) {
	  switch (code) {
	    case 10:
	    case 13:
	    case 8232:
	    case 8233:
	      return true;
	    default:
	      return false;
	  }
	}
	const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
	const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
	const skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
	function isWhitespace(code) {
	  switch (code) {
	    case 0x0009:
	    case 0x000b:
	    case 0x000c:
	    case 32:
	    case 160:
	    case 5760:
	    case 0x2000:
	    case 0x2001:
	    case 0x2002:
	    case 0x2003:
	    case 0x2004:
	    case 0x2005:
	    case 0x2006:
	    case 0x2007:
	    case 0x2008:
	    case 0x2009:
	    case 0x200a:
	    case 0x202f:
	    case 0x205f:
	    case 0x3000:
	    case 0xfeff:
	      return true;
	    default:
	      return false;
	  }
	}
	class State {
	  constructor() {
	    this.flags = 1024;
	    this.curLine = void 0;
	    this.lineStart = void 0;
	    this.startLoc = void 0;
	    this.endLoc = void 0;
	    this.errors = [];
	    this.potentialArrowAt = -1;
	    this.noArrowAt = [];
	    this.noArrowParamsConversionAt = [];
	    this.topicContext = {
	      maxNumOfResolvableTopics: 0,
	      maxTopicIndex: null
	    };
	    this.labels = [];
	    this.commentsLen = 0;
	    this.commentStack = [];
	    this.pos = 0;
	    this.type = 139;
	    this.value = null;
	    this.start = 0;
	    this.end = 0;
	    this.lastTokEndLoc = null;
	    this.lastTokStartLoc = null;
	    this.context = [types.brace];
	    this.firstInvalidTemplateEscapePos = null;
	    this.strictErrors = new Map();
	    this.tokensLength = 0;
	  }
	  get strict() {
	    return (this.flags & 1) > 0;
	  }
	  set strict(v) {
	    if (v) this.flags |= 1;else this.flags &= -2;
	  }
	  init({
	    strictMode,
	    sourceType,
	    startLine,
	    startColumn
	  }) {
	    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
	    this.curLine = startLine;
	    this.lineStart = -startColumn;
	    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
	  }
	  get maybeInArrowParameters() {
	    return (this.flags & 2) > 0;
	  }
	  set maybeInArrowParameters(v) {
	    if (v) this.flags |= 2;else this.flags &= -3;
	  }
	  get inType() {
	    return (this.flags & 4) > 0;
	  }
	  set inType(v) {
	    if (v) this.flags |= 4;else this.flags &= -5;
	  }
	  get noAnonFunctionType() {
	    return (this.flags & 8) > 0;
	  }
	  set noAnonFunctionType(v) {
	    if (v) this.flags |= 8;else this.flags &= -9;
	  }
	  get hasFlowComment() {
	    return (this.flags & 16) > 0;
	  }
	  set hasFlowComment(v) {
	    if (v) this.flags |= 16;else this.flags &= -17;
	  }
	  get isAmbientContext() {
	    return (this.flags & 32) > 0;
	  }
	  set isAmbientContext(v) {
	    if (v) this.flags |= 32;else this.flags &= -33;
	  }
	  get inAbstractClass() {
	    return (this.flags & 64) > 0;
	  }
	  set inAbstractClass(v) {
	    if (v) this.flags |= 64;else this.flags &= -65;
	  }
	  get inDisallowConditionalTypesContext() {
	    return (this.flags & 128) > 0;
	  }
	  set inDisallowConditionalTypesContext(v) {
	    if (v) this.flags |= 128;else this.flags &= -129;
	  }
	  get soloAwait() {
	    return (this.flags & 256) > 0;
	  }
	  set soloAwait(v) {
	    if (v) this.flags |= 256;else this.flags &= -257;
	  }
	  get inFSharpPipelineDirectBody() {
	    return (this.flags & 512) > 0;
	  }
	  set inFSharpPipelineDirectBody(v) {
	    if (v) this.flags |= 512;else this.flags &= -513;
	  }
	  get canStartJSXElement() {
	    return (this.flags & 1024) > 0;
	  }
	  set canStartJSXElement(v) {
	    if (v) this.flags |= 1024;else this.flags &= -1025;
	  }
	  get containsEsc() {
	    return (this.flags & 2048) > 0;
	  }
	  set containsEsc(v) {
	    if (v) this.flags |= 2048;else this.flags &= -2049;
	  }
	  curPosition() {
	    return new Position(this.curLine, this.pos - this.lineStart, this.pos);
	  }
	  clone() {
	    const state = new State();
	    state.flags = this.flags;
	    state.curLine = this.curLine;
	    state.lineStart = this.lineStart;
	    state.startLoc = this.startLoc;
	    state.endLoc = this.endLoc;
	    state.errors = this.errors.slice();
	    state.potentialArrowAt = this.potentialArrowAt;
	    state.noArrowAt = this.noArrowAt.slice();
	    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();
	    state.topicContext = this.topicContext;
	    state.labels = this.labels.slice();
	    state.commentsLen = this.commentsLen;
	    state.commentStack = this.commentStack.slice();
	    state.pos = this.pos;
	    state.type = this.type;
	    state.value = this.value;
	    state.start = this.start;
	    state.end = this.end;
	    state.lastTokEndLoc = this.lastTokEndLoc;
	    state.lastTokStartLoc = this.lastTokStartLoc;
	    state.context = this.context.slice();
	    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;
	    state.strictErrors = this.strictErrors;
	    state.tokensLength = this.tokensLength;
	    return state;
	  }
	}
	var _isDigit = function isDigit(code) {
	  return code >= 48 && code <= 57;
	};
	const forbiddenNumericSeparatorSiblings = {
	  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
	  hex: new Set([46, 88, 95, 120])
	};
	const isAllowedNumericSeparatorSibling = {
	  bin: ch => ch === 48 || ch === 49,
	  oct: ch => ch >= 48 && ch <= 55,
	  dec: ch => ch >= 48 && ch <= 57,
	  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
	};
	function readStringContents(type, input, pos, lineStart, curLine, errors) {
	  const initialPos = pos;
	  const initialLineStart = lineStart;
	  const initialCurLine = curLine;
	  let out = "";
	  let firstInvalidLoc = null;
	  let chunkStart = pos;
	  const {
	    length
	  } = input;
	  for (;;) {
	    if (pos >= length) {
	      errors.unterminated(initialPos, initialLineStart, initialCurLine);
	      out += input.slice(chunkStart, pos);
	      break;
	    }
	    const ch = input.charCodeAt(pos);
	    if (isStringEnd(type, ch, input, pos)) {
	      out += input.slice(chunkStart, pos);
	      break;
	    }
	    if (ch === 92) {
	      out += input.slice(chunkStart, pos);
	      const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
	      if (res.ch === null && !firstInvalidLoc) {
	        firstInvalidLoc = {
	          pos,
	          lineStart,
	          curLine
	        };
	      } else {
	        out += res.ch;
	      }
	      ({
	        pos,
	        lineStart,
	        curLine
	      } = res);
	      chunkStart = pos;
	    } else if (ch === 8232 || ch === 8233) {
	      ++pos;
	      ++curLine;
	      lineStart = pos;
	    } else if (ch === 10 || ch === 13) {
	      if (type === "template") {
	        out += input.slice(chunkStart, pos) + "\n";
	        ++pos;
	        if (ch === 13 && input.charCodeAt(pos) === 10) {
	          ++pos;
	        }
	        ++curLine;
	        chunkStart = lineStart = pos;
	      } else {
	        errors.unterminated(initialPos, initialLineStart, initialCurLine);
	      }
	    } else {
	      ++pos;
	    }
	  }
	  return {
	    pos,
	    str: out,
	    firstInvalidLoc,
	    lineStart,
	    curLine,
	    containsInvalid: !!firstInvalidLoc
	  };
	}
	function isStringEnd(type, ch, input, pos) {
	  if (type === "template") {
	    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
	  }
	  return ch === (type === "double" ? 34 : 39);
	}
	function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
	  const throwOnInvalid = !inTemplate;
	  pos++;
	  const res = ch => ({
	    pos,
	    ch,
	    lineStart,
	    curLine
	  });
	  const ch = input.charCodeAt(pos++);
	  switch (ch) {
	    case 110:
	      return res("\n");
	    case 114:
	      return res("\r");
	    case 120:
	      {
	        let code;
	        ({
	          code,
	          pos
	        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
	        return res(code === null ? null : String.fromCharCode(code));
	      }
	    case 117:
	      {
	        let code;
	        ({
	          code,
	          pos
	        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
	        return res(code === null ? null : String.fromCodePoint(code));
	      }
	    case 116:
	      return res("\t");
	    case 98:
	      return res("\b");
	    case 118:
	      return res("\u000b");
	    case 102:
	      return res("\f");
	    case 13:
	      if (input.charCodeAt(pos) === 10) {
	        ++pos;
	      }
	    case 10:
	      lineStart = pos;
	      ++curLine;
	    case 8232:
	    case 8233:
	      return res("");
	    case 56:
	    case 57:
	      if (inTemplate) {
	        return res(null);
	      } else {
	        errors.strictNumericEscape(pos - 1, lineStart, curLine);
	      }
	    default:
	      if (ch >= 48 && ch <= 55) {
	        const startPos = pos - 1;
	        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
	        let octalStr = match[0];
	        let octal = parseInt(octalStr, 8);
	        if (octal > 255) {
	          octalStr = octalStr.slice(0, -1);
	          octal = parseInt(octalStr, 8);
	        }
	        pos += octalStr.length - 1;
	        const next = input.charCodeAt(pos);
	        if (octalStr !== "0" || next === 56 || next === 57) {
	          if (inTemplate) {
	            return res(null);
	          } else {
	            errors.strictNumericEscape(startPos, lineStart, curLine);
	          }
	        }
	        return res(String.fromCharCode(octal));
	      }
	      return res(String.fromCharCode(ch));
	  }
	}
	function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
	  const initialPos = pos;
	  let n;
	  ({
	    n,
	    pos
	  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
	  if (n === null) {
	    if (throwOnInvalid) {
	      errors.invalidEscapeSequence(initialPos, lineStart, curLine);
	    } else {
	      pos = initialPos - 1;
	    }
	  }
	  return {
	    code: n,
	    pos
	  };
	}
	function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
	  const start = pos;
	  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
	  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
	  let invalid = false;
	  let total = 0;
	  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	    const code = input.charCodeAt(pos);
	    let val;
	    if (code === 95 && allowNumSeparator !== "bail") {
	      const prev = input.charCodeAt(pos - 1);
	      const next = input.charCodeAt(pos + 1);
	      if (!allowNumSeparator) {
	        if (bailOnError) return {
	          n: null,
	          pos
	        };
	        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
	      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
	        if (bailOnError) return {
	          n: null,
	          pos
	        };
	        errors.unexpectedNumericSeparator(pos, lineStart, curLine);
	      }
	      ++pos;
	      continue;
	    }
	    if (code >= 97) {
	      val = code - 97 + 10;
	    } else if (code >= 65) {
	      val = code - 65 + 10;
	    } else if (_isDigit(code)) {
	      val = code - 48;
	    } else {
	      val = Infinity;
	    }
	    if (val >= radix) {
	      if (val <= 9 && bailOnError) {
	        return {
	          n: null,
	          pos
	        };
	      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
	        val = 0;
	      } else if (forceLen) {
	        val = 0;
	        invalid = true;
	      } else {
	        break;
	      }
	    }
	    ++pos;
	    total = total * radix + val;
	  }
	  if (pos === start || len != null && pos - start !== len || invalid) {
	    return {
	      n: null,
	      pos
	    };
	  }
	  return {
	    n: total,
	    pos
	  };
	}
	function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
	  const ch = input.charCodeAt(pos);
	  let code;
	  if (ch === 123) {
	    ++pos;
	    ({
	      code,
	      pos
	    } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
	    ++pos;
	    if (code !== null && code > 0x10ffff) {
	      if (throwOnInvalid) {
	        errors.invalidCodePoint(pos, lineStart, curLine);
	      } else {
	        return {
	          code: null,
	          pos
	        };
	      }
	    }
	  } else {
	    ({
	      code,
	      pos
	    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
	  }
	  return {
	    code,
	    pos
	  };
	}
	function buildPosition(pos, lineStart, curLine) {
	  return new Position(curLine, pos - lineStart, pos);
	}
	const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);
	class Token {
	  constructor(state) {
	    this.type = state.type;
	    this.value = state.value;
	    this.start = state.start;
	    this.end = state.end;
	    this.loc = new SourceLocation(state.startLoc, state.endLoc);
	  }
	}
	class Tokenizer extends CommentsParser {
	  constructor(options, input) {
	    super();
	    this.isLookahead = void 0;
	    this.tokens = [];
	    this.errorHandlers_readInt = {
	      invalidDigit: (pos, lineStart, curLine, radix) => {
	        if (!this.options.errorRecovery) return false;
	        this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {
	          radix
	        });
	        return true;
	      },
	      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
	      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
	    };
	    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
	      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
	      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
	    });
	    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
	      strictNumericEscape: (pos, lineStart, curLine) => {
	        this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
	      },
	      unterminated: (pos, lineStart, curLine) => {
	        throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
	      }
	    });
	    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
	      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
	      unterminated: (pos, lineStart, curLine) => {
	        throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
	      }
	    });
	    this.state = new State();
	    this.state.init(options);
	    this.input = input;
	    this.length = input.length;
	    this.comments = [];
	    this.isLookahead = false;
	  }
	  pushToken(token) {
	    this.tokens.length = this.state.tokensLength;
	    this.tokens.push(token);
	    ++this.state.tokensLength;
	  }
	  next() {
	    this.checkKeywordEscapes();
	    if (this.options.tokens) {
	      this.pushToken(new Token(this.state));
	    }
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  }
	  eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  }
	  match(type) {
	    return this.state.type === type;
	  }
	  createLookaheadState(state) {
	    return {
	      pos: state.pos,
	      value: null,
	      type: state.type,
	      start: state.start,
	      end: state.end,
	      context: [this.curContext()],
	      inType: state.inType,
	      startLoc: state.startLoc,
	      lastTokEndLoc: state.lastTokEndLoc,
	      curLine: state.curLine,
	      lineStart: state.lineStart,
	      curPosition: state.curPosition
	    };
	  }
	  lookahead() {
	    const old = this.state;
	    this.state = this.createLookaheadState(old);
	    this.isLookahead = true;
	    this.nextToken();
	    this.isLookahead = false;
	    const curr = this.state;
	    this.state = old;
	    return curr;
	  }
	  nextTokenStart() {
	    return this.nextTokenStartSince(this.state.pos);
	  }
	  nextTokenStartSince(pos) {
	    skipWhiteSpace.lastIndex = pos;
	    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
	  }
	  lookaheadCharCode() {
	    return this.input.charCodeAt(this.nextTokenStart());
	  }
	  nextTokenInLineStart() {
	    return this.nextTokenInLineStartSince(this.state.pos);
	  }
	  nextTokenInLineStartSince(pos) {
	    skipWhiteSpaceInLine.lastIndex = pos;
	    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
	  }
	  lookaheadInLineCharCode() {
	    return this.input.charCodeAt(this.nextTokenInLineStart());
	  }
	  codePointAtPos(pos) {
	    let cp = this.input.charCodeAt(pos);
	    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
	      const trail = this.input.charCodeAt(pos);
	      if ((trail & 0xfc00) === 0xdc00) {
	        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
	      }
	    }
	    return cp;
	  }
	  setStrict(strict) {
	    this.state.strict = strict;
	    if (strict) {
	      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));
	      this.state.strictErrors.clear();
	    }
	  }
	  curContext() {
	    return this.state.context[this.state.context.length - 1];
	  }
	  nextToken() {
	    this.skipSpace();
	    this.state.start = this.state.pos;
	    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.length) {
	      this.finishToken(139);
	      return;
	    }
	    this.getTokenFromCode(this.codePointAtPos(this.state.pos));
	  }
	  skipBlockComment(commentEnd) {
	    let startLoc;
	    if (!this.isLookahead) startLoc = this.state.curPosition();
	    const start = this.state.pos;
	    const end = this.input.indexOf(commentEnd, start + 2);
	    if (end === -1) {
	      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
	    }
	    this.state.pos = end + commentEnd.length;
	    lineBreakG.lastIndex = start + 2;
	    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
	      ++this.state.curLine;
	      this.state.lineStart = lineBreakG.lastIndex;
	    }
	    if (this.isLookahead) return;
	    const comment = {
	      type: "CommentBlock",
	      value: this.input.slice(start + 2, end),
	      start,
	      end: end + commentEnd.length,
	      loc: new SourceLocation(startLoc, this.state.curPosition())
	    };
	    if (this.options.tokens) this.pushToken(comment);
	    return comment;
	  }
	  skipLineComment(startSkip) {
	    const start = this.state.pos;
	    let startLoc;
	    if (!this.isLookahead) startLoc = this.state.curPosition();
	    let ch = this.input.charCodeAt(this.state.pos += startSkip);
	    if (this.state.pos < this.length) {
	      while (!isNewLine(ch) && ++this.state.pos < this.length) {
	        ch = this.input.charCodeAt(this.state.pos);
	      }
	    }
	    if (this.isLookahead) return;
	    const end = this.state.pos;
	    const value = this.input.slice(start + startSkip, end);
	    const comment = {
	      type: "CommentLine",
	      value,
	      start,
	      end,
	      loc: new SourceLocation(startLoc, this.state.curPosition())
	    };
	    if (this.options.tokens) this.pushToken(comment);
	    return comment;
	  }
	  skipSpace() {
	    const spaceStart = this.state.pos;
	    const comments = [];
	    loop: while (this.state.pos < this.length) {
	      const ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:
	        case 160:
	        case 9:
	          ++this.state.pos;
	          break;
	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }
	        case 10:
	        case 8232:
	        case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;
	        case 47:
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              {
	                const comment = this.skipBlockComment("*/");
	                if (comment !== undefined) {
	                  this.addComment(comment);
	                  if (this.options.attachComment) comments.push(comment);
	                }
	                break;
	              }
	            case 47:
	              {
	                const comment = this.skipLineComment(2);
	                if (comment !== undefined) {
	                  this.addComment(comment);
	                  if (this.options.attachComment) comments.push(comment);
	                }
	                break;
	              }
	            default:
	              break loop;
	          }
	          break;
	        default:
	          if (isWhitespace(ch)) {
	            ++this.state.pos;
	          } else if (ch === 45 && !this.inModule && this.options.annexB) {
	            const pos = this.state.pos;
	            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
	              const comment = this.skipLineComment(3);
	              if (comment !== undefined) {
	                this.addComment(comment);
	                if (this.options.attachComment) comments.push(comment);
	              }
	            } else {
	              break loop;
	            }
	          } else if (ch === 60 && !this.inModule && this.options.annexB) {
	            const pos = this.state.pos;
	            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
	              const comment = this.skipLineComment(4);
	              if (comment !== undefined) {
	                this.addComment(comment);
	                if (this.options.attachComment) comments.push(comment);
	              }
	            } else {
	              break loop;
	            }
	          } else {
	            break loop;
	          }
	      }
	    }
	    if (comments.length > 0) {
	      const end = this.state.pos;
	      const commentWhitespace = {
	        start: spaceStart,
	        end,
	        comments,
	        leadingNode: null,
	        trailingNode: null,
	        containingNode: null
	      };
	      this.state.commentStack.push(commentWhitespace);
	    }
	  }
	  finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    const prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;
	    if (!this.isLookahead) {
	      this.updateContext(prevType);
	    }
	  }
	  replaceToken(type) {
	    this.state.type = type;
	    this.updateContext();
	  }
	  readToken_numberSign() {
	    if (this.state.pos === 0 && this.readToken_interpreter()) {
	      return;
	    }
	    const nextPos = this.state.pos + 1;
	    const next = this.codePointAtPos(nextPos);
	    if (next >= 48 && next <= 57) {
	      throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
	    }
	    if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
	      this.expectPlugin("recordAndTuple");
	      if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
	        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
	      }
	      this.state.pos += 2;
	      if (next === 123) {
	        this.finishToken(7);
	      } else {
	        this.finishToken(1);
	      }
	    } else if (isIdentifierStart(next)) {
	      ++this.state.pos;
	      this.finishToken(138, this.readWord1(next));
	    } else if (next === 92) {
	      ++this.state.pos;
	      this.finishToken(138, this.readWord1());
	    } else {
	      this.finishOp(27, 1);
	    }
	  }
	  readToken_dot() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      this.readNumber(true);
	      return;
	    }
	    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
	      this.state.pos += 3;
	      this.finishToken(21);
	    } else {
	      ++this.state.pos;
	      this.finishToken(16);
	    }
	  }
	  readToken_slash() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      this.finishOp(31, 2);
	    } else {
	      this.finishOp(56, 1);
	    }
	  }
	  readToken_interpreter() {
	    if (this.state.pos !== 0 || this.length < 2) return false;
	    let ch = this.input.charCodeAt(this.state.pos + 1);
	    if (ch !== 33) return false;
	    const start = this.state.pos;
	    this.state.pos += 1;
	    while (!isNewLine(ch) && ++this.state.pos < this.length) {
	      ch = this.input.charCodeAt(this.state.pos);
	    }
	    const value = this.input.slice(start + 2, this.state.pos);
	    this.finishToken(28, value);
	    return true;
	  }
	  readToken_mult_modulo(code) {
	    let type = code === 42 ? 55 : 54;
	    let width = 1;
	    let next = this.input.charCodeAt(this.state.pos + 1);
	    if (code === 42 && next === 42) {
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = 57;
	    }
	    if (next === 61 && !this.state.inType) {
	      width++;
	      type = code === 37 ? 33 : 30;
	    }
	    this.finishOp(type, width);
	  }
	  readToken_pipe_amp(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) {
	      if (this.input.charCodeAt(this.state.pos + 2) === 61) {
	        this.finishOp(30, 3);
	      } else {
	        this.finishOp(code === 124 ? 41 : 42, 2);
	      }
	      return;
	    }
	    if (code === 124) {
	      if (next === 62) {
	        this.finishOp(39, 2);
	        return;
	      }
	      if (this.hasPlugin("recordAndTuple") && next === 125) {
	        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
	        }
	        this.state.pos += 2;
	        this.finishToken(9);
	        return;
	      }
	      if (this.hasPlugin("recordAndTuple") && next === 93) {
	        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
	        }
	        this.state.pos += 2;
	        this.finishToken(4);
	        return;
	      }
	    }
	    if (next === 61) {
	      this.finishOp(30, 2);
	      return;
	    }
	    this.finishOp(code === 124 ? 43 : 45, 1);
	  }
	  readToken_caret() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61 && !this.state.inType) {
	      this.finishOp(32, 2);
	    } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
	      proposal: "hack",
	      topicToken: "^^"
	    }])) {
	      this.finishOp(37, 2);
	      const lookaheadCh = this.input.codePointAt(this.state.pos);
	      if (lookaheadCh === 94) {
	        this.unexpected();
	      }
	    } else {
	      this.finishOp(44, 1);
	    }
	  }
	  readToken_atSign() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 64 && this.hasPlugin(["pipelineOperator", {
	      proposal: "hack",
	      topicToken: "@@"
	    }])) {
	      this.finishOp(38, 2);
	    } else {
	      this.finishOp(26, 1);
	    }
	  }
	  readToken_plus_min(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) {
	      this.finishOp(34, 2);
	      return;
	    }
	    if (next === 61) {
	      this.finishOp(30, 2);
	    } else {
	      this.finishOp(53, 1);
	    }
	  }
	  readToken_lt() {
	    const {
	      pos
	    } = this.state;
	    const next = this.input.charCodeAt(pos + 1);
	    if (next === 60) {
	      if (this.input.charCodeAt(pos + 2) === 61) {
	        this.finishOp(30, 3);
	        return;
	      }
	      this.finishOp(51, 2);
	      return;
	    }
	    if (next === 61) {
	      this.finishOp(49, 2);
	      return;
	    }
	    this.finishOp(47, 1);
	  }
	  readToken_gt() {
	    const {
	      pos
	    } = this.state;
	    const next = this.input.charCodeAt(pos + 1);
	    if (next === 62) {
	      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(pos + size) === 61) {
	        this.finishOp(30, size + 1);
	        return;
	      }
	      this.finishOp(52, size);
	      return;
	    }
	    if (next === 61) {
	      this.finishOp(49, 2);
	      return;
	    }
	    this.finishOp(48, 1);
	  }
	  readToken_eq_excl(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	      return;
	    }
	    if (code === 61 && next === 62) {
	      this.state.pos += 2;
	      this.finishToken(19);
	      return;
	    }
	    this.finishOp(code === 61 ? 29 : 35, 1);
	  }
	  readToken_question() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    const next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 63) {
	      if (next2 === 61) {
	        this.finishOp(30, 3);
	      } else {
	        this.finishOp(40, 2);
	      }
	    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
	      this.state.pos += 2;
	      this.finishToken(18);
	    } else {
	      ++this.state.pos;
	      this.finishToken(17);
	    }
	  }
	  getTokenFromCode(code) {
	    switch (code) {
	      case 46:
	        this.readToken_dot();
	        return;
	      case 40:
	        ++this.state.pos;
	        this.finishToken(10);
	        return;
	      case 41:
	        ++this.state.pos;
	        this.finishToken(11);
	        return;
	      case 59:
	        ++this.state.pos;
	        this.finishToken(13);
	        return;
	      case 44:
	        ++this.state.pos;
	        this.finishToken(12);
	        return;
	      case 91:
	        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
	          }
	          this.state.pos += 2;
	          this.finishToken(2);
	        } else {
	          ++this.state.pos;
	          this.finishToken(0);
	        }
	        return;
	      case 93:
	        ++this.state.pos;
	        this.finishToken(3);
	        return;
	      case 123:
	        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
	          }
	          this.state.pos += 2;
	          this.finishToken(6);
	        } else {
	          ++this.state.pos;
	          this.finishToken(5);
	        }
	        return;
	      case 125:
	        ++this.state.pos;
	        this.finishToken(8);
	        return;
	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          this.finishOp(15, 2);
	        } else {
	          ++this.state.pos;
	          this.finishToken(14);
	        }
	        return;
	      case 63:
	        this.readToken_question();
	        return;
	      case 96:
	        this.readTemplateToken();
	        return;
	      case 48:
	        {
	          const next = this.input.charCodeAt(this.state.pos + 1);
	          if (next === 120 || next === 88) {
	            this.readRadixNumber(16);
	            return;
	          }
	          if (next === 111 || next === 79) {
	            this.readRadixNumber(8);
	            return;
	          }
	          if (next === 98 || next === 66) {
	            this.readRadixNumber(2);
	            return;
	          }
	        }
	      case 49:
	      case 50:
	      case 51:
	      case 52:
	      case 53:
	      case 54:
	      case 55:
	      case 56:
	      case 57:
	        this.readNumber(false);
	        return;
	      case 34:
	      case 39:
	        this.readString(code);
	        return;
	      case 47:
	        this.readToken_slash();
	        return;
	      case 37:
	      case 42:
	        this.readToken_mult_modulo(code);
	        return;
	      case 124:
	      case 38:
	        this.readToken_pipe_amp(code);
	        return;
	      case 94:
	        this.readToken_caret();
	        return;
	      case 43:
	      case 45:
	        this.readToken_plus_min(code);
	        return;
	      case 60:
	        this.readToken_lt();
	        return;
	      case 62:
	        this.readToken_gt();
	        return;
	      case 61:
	      case 33:
	        this.readToken_eq_excl(code);
	        return;
	      case 126:
	        this.finishOp(36, 1);
	        return;
	      case 64:
	        this.readToken_atSign();
	        return;
	      case 35:
	        this.readToken_numberSign();
	        return;
	      case 92:
	        this.readWord();
	        return;
	      default:
	        if (isIdentifierStart(code)) {
	          this.readWord(code);
	          return;
	        }
	    }
	    throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {
	      unexpected: String.fromCodePoint(code)
	    });
	  }
	  finishOp(type, size) {
	    const str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    this.finishToken(type, str);
	  }
	  readRegexp() {
	    const startLoc = this.state.startLoc;
	    const start = this.state.start + 1;
	    let escaped, inClass;
	    let {
	      pos
	    } = this.state;
	    for (;; ++pos) {
	      if (pos >= this.length) {
	        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
	      }
	      const ch = this.input.charCodeAt(pos);
	      if (isNewLine(ch)) {
	        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === 91) {
	          inClass = true;
	        } else if (ch === 93 && inClass) {
	          inClass = false;
	        } else if (ch === 47 && !inClass) {
	          break;
	        }
	        escaped = ch === 92;
	      }
	    }
	    const content = this.input.slice(start, pos);
	    ++pos;
	    let mods = "";
	    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
	    while (pos < this.length) {
	      const cp = this.codePointAtPos(pos);
	      const char = String.fromCharCode(cp);
	      if (VALID_REGEX_FLAGS.has(cp)) {
	        if (cp === 118) {
	          if (mods.includes("u")) {
	            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
	          }
	        } else if (cp === 117) {
	          if (mods.includes("v")) {
	            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
	          }
	        }
	        if (mods.includes(char)) {
	          this.raise(Errors.DuplicateRegExpFlags, nextPos());
	        }
	      } else if (isIdentifierChar(cp) || cp === 92) {
	        this.raise(Errors.MalformedRegExpFlags, nextPos());
	      } else {
	        break;
	      }
	      ++pos;
	      mods += char;
	    }
	    this.state.pos = pos;
	    this.finishToken(137, {
	      pattern: content,
	      flags: mods
	    });
	  }
	  readInt(radix, len, forceLen = false, allowNumSeparator = true) {
	    const {
	      n,
	      pos
	    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
	    this.state.pos = pos;
	    return n;
	  }
	  readRadixNumber(radix) {
	    const startLoc = this.state.curPosition();
	    let isBigInt = false;
	    this.state.pos += 2;
	    const val = this.readInt(radix);
	    if (val == null) {
	      this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {
	        radix
	      });
	    }
	    const next = this.input.charCodeAt(this.state.pos);
	    if (next === 110) {
	      ++this.state.pos;
	      isBigInt = true;
	    } else if (next === 109) {
	      throw this.raise(Errors.InvalidDecimal, startLoc);
	    }
	    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
	      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
	    }
	    if (isBigInt) {
	      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
	      this.finishToken(135, str);
	      return;
	    }
	    this.finishToken(134, val);
	  }
	  readNumber(startsWithDot) {
	    const start = this.state.pos;
	    const startLoc = this.state.curPosition();
	    let isFloat = false;
	    let isBigInt = false;
	    let isDecimal = false;
	    let hasExponent = false;
	    let isOctal = false;
	    if (!startsWithDot && this.readInt(10) === null) {
	      this.raise(Errors.InvalidNumber, this.state.curPosition());
	    }
	    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
	    if (hasLeadingZero) {
	      const integer = this.input.slice(start, this.state.pos);
	      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);
	      if (!this.state.strict) {
	        const underscorePos = integer.indexOf("_");
	        if (underscorePos > 0) {
	          this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
	        }
	      }
	      isOctal = hasLeadingZero && !/[89]/.test(integer);
	    }
	    let next = this.input.charCodeAt(this.state.pos);
	    if (next === 46 && !isOctal) {
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if ((next === 69 || next === 101) && !isOctal) {
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) {
	        ++this.state.pos;
	      }
	      if (this.readInt(10) === null) {
	        this.raise(Errors.InvalidOrMissingExponent, startLoc);
	      }
	      isFloat = true;
	      hasExponent = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 110) {
	      if (isFloat || hasLeadingZero) {
	        this.raise(Errors.InvalidBigIntLiteral, startLoc);
	      }
	      ++this.state.pos;
	      isBigInt = true;
	    }
	    if (next === 109) {
	      this.expectPlugin("decimal", this.state.curPosition());
	      if (hasExponent || hasLeadingZero) {
	        this.raise(Errors.InvalidDecimal, startLoc);
	      }
	      ++this.state.pos;
	      isDecimal = true;
	    }
	    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
	      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
	    }
	    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
	    if (isBigInt) {
	      this.finishToken(135, str);
	      return;
	    }
	    if (isDecimal) {
	      this.finishToken(136, str);
	      return;
	    }
	    const val = isOctal ? parseInt(str, 8) : parseFloat(str);
	    this.finishToken(134, val);
	  }
	  readCodePoint(throwOnInvalid) {
	    const {
	      code,
	      pos
	    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
	    this.state.pos = pos;
	    return code;
	  }
	  readString(quote) {
	    const {
	      str,
	      pos,
	      curLine,
	      lineStart
	    } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
	    this.state.pos = pos + 1;
	    this.state.lineStart = lineStart;
	    this.state.curLine = curLine;
	    this.finishToken(133, str);
	  }
	  readTemplateContinuation() {
	    if (!this.match(8)) {
	      this.unexpected(null, 8);
	    }
	    this.state.pos--;
	    this.readTemplateToken();
	  }
	  readTemplateToken() {
	    const opening = this.input[this.state.pos];
	    const {
	      str,
	      firstInvalidLoc,
	      pos,
	      curLine,
	      lineStart
	    } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
	    this.state.pos = pos + 1;
	    this.state.lineStart = lineStart;
	    this.state.curLine = curLine;
	    if (firstInvalidLoc) {
	      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
	    }
	    if (this.input.codePointAt(pos) === 96) {
	      this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
	    } else {
	      this.state.pos++;
	      this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
	    }
	  }
	  recordStrictModeErrors(toParseError, at) {
	    const index = at.index;
	    if (this.state.strict && !this.state.strictErrors.has(index)) {
	      this.raise(toParseError, at);
	    } else {
	      this.state.strictErrors.set(index, [toParseError, at]);
	    }
	  }
	  readWord1(firstCode) {
	    this.state.containsEsc = false;
	    let word = "";
	    const start = this.state.pos;
	    let chunkStart = this.state.pos;
	    if (firstCode !== undefined) {
	      this.state.pos += firstCode <= 0xffff ? 1 : 2;
	    }
	    while (this.state.pos < this.length) {
	      const ch = this.codePointAtPos(this.state.pos);
	      if (isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        this.state.containsEsc = true;
	        word += this.input.slice(chunkStart, this.state.pos);
	        const escStart = this.state.curPosition();
	        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());
	          chunkStart = this.state.pos - 1;
	          continue;
	        }
	        ++this.state.pos;
	        const esc = this.readCodePoint(true);
	        if (esc !== null) {
	          if (!identifierCheck(esc)) {
	            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);
	          }
	          word += String.fromCodePoint(esc);
	        }
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  }
	  readWord(firstCode) {
	    const word = this.readWord1(firstCode);
	    const type = keywords$1.get(word);
	    if (type !== undefined) {
	      this.finishToken(type, tokenLabelName(type));
	    } else {
	      this.finishToken(132, word);
	    }
	  }
	  checkKeywordEscapes() {
	    const {
	      type
	    } = this.state;
	    if (tokenIsKeyword(type) && this.state.containsEsc) {
	      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {
	        reservedWord: tokenLabelName(type)
	      });
	    }
	  }
	  raise(toParseError, at, details = {}) {
	    const loc = at instanceof Position ? at : at.loc.start;
	    const error = toParseError(loc, details);
	    if (!this.options.errorRecovery) throw error;
	    if (!this.isLookahead) this.state.errors.push(error);
	    return error;
	  }
	  raiseOverwrite(toParseError, at, details = {}) {
	    const loc = at instanceof Position ? at : at.loc.start;
	    const pos = loc.index;
	    const errors = this.state.errors;
	    for (let i = errors.length - 1; i >= 0; i--) {
	      const error = errors[i];
	      if (error.loc.index === pos) {
	        return errors[i] = toParseError(loc, details);
	      }
	      if (error.loc.index < pos) break;
	    }
	    return this.raise(toParseError, at, details);
	  }
	  updateContext(prevType) {}
	  unexpected(loc, type) {
	    throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {
	      expected: type ? tokenLabelName(type) : null
	    });
	  }
	  expectPlugin(pluginName, loc) {
	    if (this.hasPlugin(pluginName)) {
	      return true;
	    }
	    throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {
	      missingPlugin: [pluginName]
	    });
	  }
	  expectOnePlugin(pluginNames) {
	    if (!pluginNames.some(name => this.hasPlugin(name))) {
	      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {
	        missingPlugin: pluginNames
	      });
	    }
	  }
	  errorBuilder(error) {
	    return (pos, lineStart, curLine) => {
	      this.raise(error, buildPosition(pos, lineStart, curLine));
	    };
	  }
	}
	class ClassScope {
	  constructor() {
	    this.privateNames = new Set();
	    this.loneAccessors = new Map();
	    this.undefinedPrivateNames = new Map();
	  }
	}
	class ClassScopeHandler {
	  constructor(parser) {
	    this.parser = void 0;
	    this.stack = [];
	    this.undefinedPrivateNames = new Map();
	    this.parser = parser;
	  }
	  current() {
	    return this.stack[this.stack.length - 1];
	  }
	  enter() {
	    this.stack.push(new ClassScope());
	  }
	  exit() {
	    const oldClassScope = this.stack.pop();
	    const current = this.current();
	    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
	      if (current) {
	        if (!current.undefinedPrivateNames.has(name)) {
	          current.undefinedPrivateNames.set(name, loc);
	        }
	      } else {
	        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
	          identifierName: name
	        });
	      }
	    }
	  }
	  declarePrivateName(name, elementType, loc) {
	    const {
	      privateNames,
	      loneAccessors,
	      undefinedPrivateNames
	    } = this.current();
	    let redefined = privateNames.has(name);
	    if (elementType & 3) {
	      const accessor = redefined && loneAccessors.get(name);
	      if (accessor) {
	        const oldStatic = accessor & 4;
	        const newStatic = elementType & 4;
	        const oldKind = accessor & 3;
	        const newKind = elementType & 3;
	        redefined = oldKind === newKind || oldStatic !== newStatic;
	        if (!redefined) loneAccessors.delete(name);
	      } else if (!redefined) {
	        loneAccessors.set(name, elementType);
	      }
	    }
	    if (redefined) {
	      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {
	        identifierName: name
	      });
	    }
	    privateNames.add(name);
	    undefinedPrivateNames.delete(name);
	  }
	  usePrivateName(name, loc) {
	    let classScope;
	    for (classScope of this.stack) {
	      if (classScope.privateNames.has(name)) return;
	    }
	    if (classScope) {
	      classScope.undefinedPrivateNames.set(name, loc);
	    } else {
	      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
	        identifierName: name
	      });
	    }
	  }
	}
	class ExpressionScope {
	  constructor(type = 0) {
	    this.type = type;
	  }
	  canBeArrowParameterDeclaration() {
	    return this.type === 2 || this.type === 1;
	  }
	  isCertainlyParameterDeclaration() {
	    return this.type === 3;
	  }
	}
	class ArrowHeadParsingScope extends ExpressionScope {
	  constructor(type) {
	    super(type);
	    this.declarationErrors = new Map();
	  }
	  recordDeclarationError(ParsingErrorClass, at) {
	    const index = at.index;
	    this.declarationErrors.set(index, [ParsingErrorClass, at]);
	  }
	  clearDeclarationError(index) {
	    this.declarationErrors.delete(index);
	  }
	  iterateErrors(iterator) {
	    this.declarationErrors.forEach(iterator);
	  }
	}
	class ExpressionScopeHandler {
	  constructor(parser) {
	    this.parser = void 0;
	    this.stack = [new ExpressionScope()];
	    this.parser = parser;
	  }
	  enter(scope) {
	    this.stack.push(scope);
	  }
	  exit() {
	    this.stack.pop();
	  }
	  recordParameterInitializerError(toParseError, node) {
	    const origin = node.loc.start;
	    const {
	      stack
	    } = this;
	    let i = stack.length - 1;
	    let scope = stack[i];
	    while (!scope.isCertainlyParameterDeclaration()) {
	      if (scope.canBeArrowParameterDeclaration()) {
	        scope.recordDeclarationError(toParseError, origin);
	      } else {
	        return;
	      }
	      scope = stack[--i];
	    }
	    this.parser.raise(toParseError, origin);
	  }
	  recordArrowParameterBindingError(error, node) {
	    const {
	      stack
	    } = this;
	    const scope = stack[stack.length - 1];
	    const origin = node.loc.start;
	    if (scope.isCertainlyParameterDeclaration()) {
	      this.parser.raise(error, origin);
	    } else if (scope.canBeArrowParameterDeclaration()) {
	      scope.recordDeclarationError(error, origin);
	    } else {
	      return;
	    }
	  }
	  recordAsyncArrowParametersError(at) {
	    const {
	      stack
	    } = this;
	    let i = stack.length - 1;
	    let scope = stack[i];
	    while (scope.canBeArrowParameterDeclaration()) {
	      if (scope.type === 2) {
	        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);
	      }
	      scope = stack[--i];
	    }
	  }
	  validateAsPattern() {
	    const {
	      stack
	    } = this;
	    const currentScope = stack[stack.length - 1];
	    if (!currentScope.canBeArrowParameterDeclaration()) return;
	    currentScope.iterateErrors(([toParseError, loc]) => {
	      this.parser.raise(toParseError, loc);
	      let i = stack.length - 2;
	      let scope = stack[i];
	      while (scope.canBeArrowParameterDeclaration()) {
	        scope.clearDeclarationError(loc.index);
	        scope = stack[--i];
	      }
	    });
	  }
	}
	function newParameterDeclarationScope() {
	  return new ExpressionScope(3);
	}
	function newArrowHeadScope() {
	  return new ArrowHeadParsingScope(1);
	}
	function newAsyncArrowScope() {
	  return new ArrowHeadParsingScope(2);
	}
	function newExpressionScope() {
	  return new ExpressionScope();
	}
	class ProductionParameterHandler {
	  constructor() {
	    this.stacks = [];
	  }
	  enter(flags) {
	    this.stacks.push(flags);
	  }
	  exit() {
	    this.stacks.pop();
	  }
	  currentFlags() {
	    return this.stacks[this.stacks.length - 1];
	  }
	  get hasAwait() {
	    return (this.currentFlags() & 2) > 0;
	  }
	  get hasYield() {
	    return (this.currentFlags() & 1) > 0;
	  }
	  get hasReturn() {
	    return (this.currentFlags() & 4) > 0;
	  }
	  get hasIn() {
	    return (this.currentFlags() & 8) > 0;
	  }
	}
	function functionFlags(isAsync, isGenerator) {
	  return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
	}
	class UtilParser extends Tokenizer {
	  addExtra(node, key, value, enumerable = true) {
	    if (!node) return;
	    const extra = node.extra = node.extra || {};
	    if (enumerable) {
	      extra[key] = value;
	    } else {
	      Object.defineProperty(extra, key, {
	        enumerable,
	        value
	      });
	    }
	  }
	  isContextual(token) {
	    return this.state.type === token && !this.state.containsEsc;
	  }
	  isUnparsedContextual(nameStart, name) {
	    const nameEnd = nameStart + name.length;
	    if (this.input.slice(nameStart, nameEnd) === name) {
	      const nextCh = this.input.charCodeAt(nameEnd);
	      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);
	    }
	    return false;
	  }
	  isLookaheadContextual(name) {
	    const next = this.nextTokenStart();
	    return this.isUnparsedContextual(next, name);
	  }
	  eatContextual(token) {
	    if (this.isContextual(token)) {
	      this.next();
	      return true;
	    }
	    return false;
	  }
	  expectContextual(token, toParseError) {
	    if (!this.eatContextual(token)) {
	      if (toParseError != null) {
	        throw this.raise(toParseError, this.state.startLoc);
	      }
	      this.unexpected(null, token);
	    }
	  }
	  canInsertSemicolon() {
	    return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
	  }
	  hasPrecedingLineBreak() {
	    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
	  }
	  hasFollowingLineBreak() {
	    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
	    return skipWhiteSpaceToLineBreak.test(this.input);
	  }
	  isLineTerminator() {
	    return this.eat(13) || this.canInsertSemicolon();
	  }
	  semicolon(allowAsi = true) {
	    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
	    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
	  }
	  expect(type, loc) {
	    if (!this.eat(type)) {
	      this.unexpected(loc, type);
	    }
	  }
	  tryParse(fn, oldState = this.state.clone()) {
	    const abortSignal = {
	      node: null
	    };
	    try {
	      const node = fn((node = null) => {
	        abortSignal.node = node;
	        throw abortSignal;
	      });
	      if (this.state.errors.length > oldState.errors.length) {
	        const failState = this.state;
	        this.state = oldState;
	        this.state.tokensLength = failState.tokensLength;
	        return {
	          node,
	          error: failState.errors[oldState.errors.length],
	          thrown: false,
	          aborted: false,
	          failState
	        };
	      }
	      return {
	        node,
	        error: null,
	        thrown: false,
	        aborted: false,
	        failState: null
	      };
	    } catch (error) {
	      const failState = this.state;
	      this.state = oldState;
	      if (error instanceof SyntaxError) {
	        return {
	          node: null,
	          error,
	          thrown: true,
	          aborted: false,
	          failState
	        };
	      }
	      if (error === abortSignal) {
	        return {
	          node: abortSignal.node,
	          error: null,
	          thrown: false,
	          aborted: true,
	          failState
	        };
	      }
	      throw error;
	    }
	  }
	  checkExpressionErrors(refExpressionErrors, andThrow) {
	    if (!refExpressionErrors) return false;
	    const {
	      shorthandAssignLoc,
	      doubleProtoLoc,
	      privateKeyLoc,
	      optionalParametersLoc
	    } = refExpressionErrors;
	    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
	    if (!andThrow) {
	      return hasErrors;
	    }
	    if (shorthandAssignLoc != null) {
	      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
	    }
	    if (doubleProtoLoc != null) {
	      this.raise(Errors.DuplicateProto, doubleProtoLoc);
	    }
	    if (privateKeyLoc != null) {
	      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
	    }
	    if (optionalParametersLoc != null) {
	      this.unexpected(optionalParametersLoc);
	    }
	  }
	  isLiteralPropertyName() {
	    return tokenIsLiteralPropertyName(this.state.type);
	  }
	  isPrivateName(node) {
	    return node.type === "PrivateName";
	  }
	  getPrivateNameSV(node) {
	    return node.id.name;
	  }
	  hasPropertyAsPrivateName(node) {
	    return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
	  }
	  isObjectProperty(node) {
	    return node.type === "ObjectProperty";
	  }
	  isObjectMethod(node) {
	    return node.type === "ObjectMethod";
	  }
	  initializeScopes(inModule = this.options.sourceType === "module") {
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    const oldExportedIdentifiers = this.exportedIdentifiers;
	    this.exportedIdentifiers = new Set();
	    const oldInModule = this.inModule;
	    this.inModule = inModule;
	    const oldScope = this.scope;
	    const ScopeHandler = this.getScopeHandler();
	    this.scope = new ScopeHandler(this, inModule);
	    const oldProdParam = this.prodParam;
	    this.prodParam = new ProductionParameterHandler();
	    const oldClassScope = this.classScope;
	    this.classScope = new ClassScopeHandler(this);
	    const oldExpressionScope = this.expressionScope;
	    this.expressionScope = new ExpressionScopeHandler(this);
	    return () => {
	      this.state.labels = oldLabels;
	      this.exportedIdentifiers = oldExportedIdentifiers;
	      this.inModule = oldInModule;
	      this.scope = oldScope;
	      this.prodParam = oldProdParam;
	      this.classScope = oldClassScope;
	      this.expressionScope = oldExpressionScope;
	    };
	  }
	  enterInitialScopes() {
	    let paramFlags = 0;
	    if (this.inModule) {
	      paramFlags |= 2;
	    }
	    this.scope.enter(1);
	    this.prodParam.enter(paramFlags);
	  }
	  checkDestructuringPrivate(refExpressionErrors) {
	    const {
	      privateKeyLoc
	    } = refExpressionErrors;
	    if (privateKeyLoc !== null) {
	      this.expectPlugin("destructuringPrivate", privateKeyLoc);
	    }
	  }
	}
	class ExpressionErrors {
	  constructor() {
	    this.shorthandAssignLoc = null;
	    this.doubleProtoLoc = null;
	    this.privateKeyLoc = null;
	    this.optionalParametersLoc = null;
	  }
	}
	class Node {
	  constructor(parser, pos, loc) {
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new SourceLocation(loc);
	    if (parser != null && parser.options.ranges) this.range = [pos, 0];
	    if (parser != null && parser.filename) this.loc.filename = parser.filename;
	  }
	}
	const NodePrototype = Node.prototype;
	{
	  NodePrototype.__clone = function () {
	    const newNode = new Node(undefined, this.start, this.loc.start);
	    const keys = Object.keys(this);
	    for (let i = 0, length = keys.length; i < length; i++) {
	      const key = keys[i];
	      if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
	        newNode[key] = this[key];
	      }
	    }
	    return newNode;
	  };
	}
	function clonePlaceholder(node) {
	  return cloneIdentifier(node);
	}
	function cloneIdentifier(node) {
	  const {
	    type,
	    start,
	    end,
	    loc,
	    range,
	    extra,
	    name
	  } = node;
	  const cloned = Object.create(NodePrototype);
	  cloned.type = type;
	  cloned.start = start;
	  cloned.end = end;
	  cloned.loc = loc;
	  cloned.range = range;
	  cloned.extra = extra;
	  cloned.name = name;
	  if (type === "Placeholder") {
	    cloned.expectedNode = node.expectedNode;
	  }
	  return cloned;
	}
	function cloneStringLiteral(node) {
	  const {
	    type,
	    start,
	    end,
	    loc,
	    range,
	    extra
	  } = node;
	  if (type === "Placeholder") {
	    return clonePlaceholder(node);
	  }
	  const cloned = Object.create(NodePrototype);
	  cloned.type = type;
	  cloned.start = start;
	  cloned.end = end;
	  cloned.loc = loc;
	  cloned.range = range;
	  if (node.raw !== undefined) {
	    cloned.raw = node.raw;
	  } else {
	    cloned.extra = extra;
	  }
	  cloned.value = node.value;
	  return cloned;
	}
	class NodeUtils extends UtilParser {
	  startNode() {
	    const loc = this.state.startLoc;
	    return new Node(this, loc.index, loc);
	  }
	  startNodeAt(loc) {
	    return new Node(this, loc.index, loc);
	  }
	  startNodeAtNode(type) {
	    return this.startNodeAt(type.loc.start);
	  }
	  finishNode(node, type) {
	    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
	  }
	  finishNodeAt(node, type, endLoc) {
	    node.type = type;
	    node.end = endLoc.index;
	    node.loc.end = endLoc;
	    if (this.options.ranges) node.range[1] = endLoc.index;
	    if (this.options.attachComment) this.processComment(node);
	    return node;
	  }
	  resetStartLocation(node, startLoc) {
	    node.start = startLoc.index;
	    node.loc.start = startLoc;
	    if (this.options.ranges) node.range[0] = startLoc.index;
	  }
	  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
	    node.end = endLoc.index;
	    node.loc.end = endLoc;
	    if (this.options.ranges) node.range[1] = endLoc.index;
	  }
	  resetStartLocationFromNode(node, locationNode) {
	    this.resetStartLocation(node, locationNode.loc.start);
	  }
	}
	const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
	const FlowErrors = ParseErrorEnum`flow`({
	  AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
	  AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
	  AssignReservedType: ({
	    reservedType
	  }) => `Cannot overwrite reserved type ${reservedType}.`,
	  DeclareClassElement: "The `declare` modifier can only appear on class fields.",
	  DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
	  DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
	  EnumBooleanMemberNotInitialized: ({
	    memberName,
	    enumName
	  }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
	  EnumDuplicateMemberName: ({
	    memberName,
	    enumName
	  }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
	  EnumInconsistentMemberValues: ({
	    enumName
	  }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
	  EnumInvalidExplicitType: ({
	    invalidEnumType,
	    enumName
	  }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
	  EnumInvalidExplicitTypeUnknownSupplied: ({
	    enumName
	  }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
	  EnumInvalidMemberInitializerPrimaryType: ({
	    enumName,
	    memberName,
	    explicitType
	  }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
	  EnumInvalidMemberInitializerSymbolType: ({
	    enumName,
	    memberName
	  }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
	  EnumInvalidMemberInitializerUnknownType: ({
	    enumName,
	    memberName
	  }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
	  EnumInvalidMemberName: ({
	    enumName,
	    memberName,
	    suggestion
	  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
	  EnumNumberMemberNotInitialized: ({
	    enumName,
	    memberName
	  }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
	  EnumStringMemberInconsistentlyInitialized: ({
	    enumName
	  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
	  GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
	  ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
	  ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
	  InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
	  InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
	  InexactVariance: "Explicit inexact syntax cannot have variance.",
	  InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
	  MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
	  NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
	  NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
	  PatternIsOptional: Object.assign({
	    message: "A binding pattern parameter cannot be optional in an implementation signature."
	  }, {
	    reasonCode: "OptionalBindingPattern"
	  }),
	  SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
	  SpreadVariance: "Spread properties cannot have variance.",
	  ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
	  ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
	  ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
	  ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
	  ThisParamNoDefault: "The `this` parameter may not have a default value.",
	  TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
	  TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
	  UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
	  UnexpectedReservedType: ({
	    reservedType
	  }) => `Unexpected reserved type ${reservedType}.`,
	  UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
	  UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
	  UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
	  UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
	  UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
	  UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
	  UnsupportedDeclareExportKind: ({
	    unsupportedExportKind,
	    suggestion
	  }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
	  UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
	  UnterminatedFlowComment: "Unterminated flow-comment."
	});
	function isEsModuleType(bodyElement) {
	  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
	}
	function hasTypeImportKind(node) {
	  return node.importKind === "type" || node.importKind === "typeof";
	}
	const exportSuggestions = {
	  const: "declare export var",
	  let: "declare export var",
	  type: "export type",
	  interface: "export interface"
	};
	function partition(list, test) {
	  const list1 = [];
	  const list2 = [];
	  for (let i = 0; i < list.length; i++) {
	    (test(list[i], i, list) ? list1 : list2).push(list[i]);
	  }
	  return [list1, list2];
	}
	const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
	var flow = superClass => class FlowParserMixin extends superClass {
	  constructor(...args) {
	    super(...args);
	    this.flowPragma = undefined;
	  }
	  getScopeHandler() {
	    return FlowScopeHandler;
	  }
	  shouldParseTypes() {
	    return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
	  }
	  shouldParseEnums() {
	    return !!this.getPluginOption("flow", "enums");
	  }
	  finishToken(type, val) {
	    if (type !== 133 && type !== 13 && type !== 28) {
	      if (this.flowPragma === undefined) {
	        this.flowPragma = null;
	      }
	    }
	    super.finishToken(type, val);
	  }
	  addComment(comment) {
	    if (this.flowPragma === undefined) {
	      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
	      if (!matches) ;else if (matches[1] === "flow") {
	        this.flowPragma = "flow";
	      } else if (matches[1] === "noflow") {
	        this.flowPragma = "noflow";
	      } else {
	        throw new Error("Unexpected flow pragma");
	      }
	    }
	    super.addComment(comment);
	  }
	  flowParseTypeInitialiser(tok) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    this.expect(tok || 14);
	    const type = this.flowParseType();
	    this.state.inType = oldInType;
	    return type;
	  }
	  flowParsePredicate() {
	    const node = this.startNode();
	    const moduloLoc = this.state.startLoc;
	    this.next();
	    this.expectContextual(110);
	    if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {
	      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);
	    }
	    if (this.eat(10)) {
	      node.value = super.parseExpression();
	      this.expect(11);
	      return this.finishNode(node, "DeclaredPredicate");
	    } else {
	      return this.finishNode(node, "InferredPredicate");
	    }
	  }
	  flowParseTypeAndPredicateInitialiser() {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    this.expect(14);
	    let type = null;
	    let predicate = null;
	    if (this.match(54)) {
	      this.state.inType = oldInType;
	      predicate = this.flowParsePredicate();
	    } else {
	      type = this.flowParseType();
	      this.state.inType = oldInType;
	      if (this.match(54)) {
	        predicate = this.flowParsePredicate();
	      }
	    }
	    return [type, predicate];
	  }
	  flowParseDeclareClass(node) {
	    this.next();
	    this.flowParseInterfaceish(node, true);
	    return this.finishNode(node, "DeclareClass");
	  }
	  flowParseDeclareFunction(node) {
	    this.next();
	    const id = node.id = this.parseIdentifier();
	    const typeNode = this.startNode();
	    const typeContainer = this.startNode();
	    if (this.match(47)) {
	      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      typeNode.typeParameters = null;
	    }
	    this.expect(10);
	    const tmp = this.flowParseFunctionTypeParams();
	    typeNode.params = tmp.params;
	    typeNode.rest = tmp.rest;
	    typeNode.this = tmp._this;
	    this.expect(11);
	    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	    this.resetEndLocation(id);
	    this.semicolon();
	    this.scope.declareName(node.id.name, 2048, node.id.loc.start);
	    return this.finishNode(node, "DeclareFunction");
	  }
	  flowParseDeclare(node, insideModule) {
	    if (this.match(80)) {
	      return this.flowParseDeclareClass(node);
	    } else if (this.match(68)) {
	      return this.flowParseDeclareFunction(node);
	    } else if (this.match(74)) {
	      return this.flowParseDeclareVariable(node);
	    } else if (this.eatContextual(127)) {
	      if (this.match(16)) {
	        return this.flowParseDeclareModuleExports(node);
	      } else {
	        if (insideModule) {
	          this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);
	        }
	        return this.flowParseDeclareModule(node);
	      }
	    } else if (this.isContextual(130)) {
	      return this.flowParseDeclareTypeAlias(node);
	    } else if (this.isContextual(131)) {
	      return this.flowParseDeclareOpaqueType(node);
	    } else if (this.isContextual(129)) {
	      return this.flowParseDeclareInterface(node);
	    } else if (this.match(82)) {
	      return this.flowParseDeclareExportDeclaration(node, insideModule);
	    } else {
	      this.unexpected();
	    }
	  }
	  flowParseDeclareVariable(node) {
	    this.next();
	    node.id = this.flowParseTypeAnnotatableIdentifier(true);
	    this.scope.declareName(node.id.name, 5, node.id.loc.start);
	    this.semicolon();
	    return this.finishNode(node, "DeclareVariable");
	  }
	  flowParseDeclareModule(node) {
	    this.scope.enter(0);
	    if (this.match(133)) {
	      node.id = super.parseExprAtom();
	    } else {
	      node.id = this.parseIdentifier();
	    }
	    const bodyNode = node.body = this.startNode();
	    const body = bodyNode.body = [];
	    this.expect(5);
	    while (!this.match(8)) {
	      let bodyNode = this.startNode();
	      if (this.match(83)) {
	        this.next();
	        if (!this.isContextual(130) && !this.match(87)) {
	          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);
	        }
	        super.parseImport(bodyNode);
	      } else {
	        this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
	        bodyNode = this.flowParseDeclare(bodyNode, true);
	      }
	      body.push(bodyNode);
	    }
	    this.scope.exit();
	    this.expect(8);
	    this.finishNode(bodyNode, "BlockStatement");
	    let kind = null;
	    let hasModuleExport = false;
	    body.forEach(bodyElement => {
	      if (isEsModuleType(bodyElement)) {
	        if (kind === "CommonJS") {
	          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
	        }
	        kind = "ES";
	      } else if (bodyElement.type === "DeclareModuleExports") {
	        if (hasModuleExport) {
	          this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);
	        }
	        if (kind === "ES") {
	          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
	        }
	        kind = "CommonJS";
	        hasModuleExport = true;
	      }
	    });
	    node.kind = kind || "CommonJS";
	    return this.finishNode(node, "DeclareModule");
	  }
	  flowParseDeclareExportDeclaration(node, insideModule) {
	    this.expect(82);
	    if (this.eat(65)) {
	      if (this.match(68) || this.match(80)) {
	        node.declaration = this.flowParseDeclare(this.startNode());
	      } else {
	        node.declaration = this.flowParseType();
	        this.semicolon();
	      }
	      node.default = true;
	      return this.finishNode(node, "DeclareExportDeclaration");
	    } else {
	      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
	        const label = this.state.value;
	        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
	          unsupportedExportKind: label,
	          suggestion: exportSuggestions[label]
	        });
	      }
	      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
	        node.declaration = this.flowParseDeclare(this.startNode());
	        node.default = false;
	        return this.finishNode(node, "DeclareExportDeclaration");
	      } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
	        node = this.parseExport(node, null);
	        if (node.type === "ExportNamedDeclaration") {
	          node.type = "ExportDeclaration";
	          node.default = false;
	          delete node.exportKind;
	        }
	        node.type = "Declare" + node.type;
	        return node;
	      }
	    }
	    this.unexpected();
	  }
	  flowParseDeclareModuleExports(node) {
	    this.next();
	    this.expectContextual(111);
	    node.typeAnnotation = this.flowParseTypeAnnotation();
	    this.semicolon();
	    return this.finishNode(node, "DeclareModuleExports");
	  }
	  flowParseDeclareTypeAlias(node) {
	    this.next();
	    const finished = this.flowParseTypeAlias(node);
	    finished.type = "DeclareTypeAlias";
	    return finished;
	  }
	  flowParseDeclareOpaqueType(node) {
	    this.next();
	    const finished = this.flowParseOpaqueType(node, true);
	    finished.type = "DeclareOpaqueType";
	    return finished;
	  }
	  flowParseDeclareInterface(node) {
	    this.next();
	    this.flowParseInterfaceish(node, false);
	    return this.finishNode(node, "DeclareInterface");
	  }
	  flowParseInterfaceish(node, isClass) {
	    node.id = this.flowParseRestrictedIdentifier(!isClass, true);
	    this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }
	    node.extends = [];
	    if (this.eat(81)) {
	      do {
	        node.extends.push(this.flowParseInterfaceExtends());
	      } while (!isClass && this.eat(12));
	    }
	    if (isClass) {
	      node.implements = [];
	      node.mixins = [];
	      if (this.eatContextual(117)) {
	        do {
	          node.mixins.push(this.flowParseInterfaceExtends());
	        } while (this.eat(12));
	      }
	      if (this.eatContextual(113)) {
	        do {
	          node.implements.push(this.flowParseInterfaceExtends());
	        } while (this.eat(12));
	      }
	    }
	    node.body = this.flowParseObjectType({
	      allowStatic: isClass,
	      allowExact: false,
	      allowSpread: false,
	      allowProto: isClass,
	      allowInexact: false
	    });
	  }
	  flowParseInterfaceExtends() {
	    const node = this.startNode();
	    node.id = this.flowParseQualifiedTypeIdentifier();
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterInstantiation();
	    } else {
	      node.typeParameters = null;
	    }
	    return this.finishNode(node, "InterfaceExtends");
	  }
	  flowParseInterface(node) {
	    this.flowParseInterfaceish(node, false);
	    return this.finishNode(node, "InterfaceDeclaration");
	  }
	  checkNotUnderscore(word) {
	    if (word === "_") {
	      this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
	    }
	  }
	  checkReservedType(word, startLoc, declaration) {
	    if (!reservedTypes.has(word)) return;
	    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {
	      reservedType: word
	    });
	  }
	  flowParseRestrictedIdentifier(liberal, declaration) {
	    this.checkReservedType(this.state.value, this.state.startLoc, declaration);
	    return this.parseIdentifier(liberal);
	  }
	  flowParseTypeAlias(node) {
	    node.id = this.flowParseRestrictedIdentifier(false, true);
	    this.scope.declareName(node.id.name, 8201, node.id.loc.start);
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }
	    node.right = this.flowParseTypeInitialiser(29);
	    this.semicolon();
	    return this.finishNode(node, "TypeAlias");
	  }
	  flowParseOpaqueType(node, declare) {
	    this.expectContextual(130);
	    node.id = this.flowParseRestrictedIdentifier(true, true);
	    this.scope.declareName(node.id.name, 8201, node.id.loc.start);
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }
	    node.supertype = null;
	    if (this.match(14)) {
	      node.supertype = this.flowParseTypeInitialiser(14);
	    }
	    node.impltype = null;
	    if (!declare) {
	      node.impltype = this.flowParseTypeInitialiser(29);
	    }
	    this.semicolon();
	    return this.finishNode(node, "OpaqueType");
	  }
	  flowParseTypeParameter(requireDefault = false) {
	    const nodeStartLoc = this.state.startLoc;
	    const node = this.startNode();
	    const variance = this.flowParseVariance();
	    const ident = this.flowParseTypeAnnotatableIdentifier();
	    node.name = ident.name;
	    node.variance = variance;
	    node.bound = ident.typeAnnotation;
	    if (this.match(29)) {
	      this.eat(29);
	      node.default = this.flowParseType();
	    } else {
	      if (requireDefault) {
	        this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);
	      }
	    }
	    return this.finishNode(node, "TypeParameter");
	  }
	  flowParseTypeParameterDeclaration() {
	    const oldInType = this.state.inType;
	    const node = this.startNode();
	    node.params = [];
	    this.state.inType = true;
	    if (this.match(47) || this.match(142)) {
	      this.next();
	    } else {
	      this.unexpected();
	    }
	    let defaultRequired = false;
	    do {
	      const typeParameter = this.flowParseTypeParameter(defaultRequired);
	      node.params.push(typeParameter);
	      if (typeParameter.default) {
	        defaultRequired = true;
	      }
	      if (!this.match(48)) {
	        this.expect(12);
	      }
	    } while (!this.match(48));
	    this.expect(48);
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterDeclaration");
	  }
	  flowParseTypeParameterInstantiation() {
	    const node = this.startNode();
	    const oldInType = this.state.inType;
	    node.params = [];
	    this.state.inType = true;
	    this.expect(47);
	    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	    this.state.noAnonFunctionType = false;
	    while (!this.match(48)) {
	      node.params.push(this.flowParseType());
	      if (!this.match(48)) {
	        this.expect(12);
	      }
	    }
	    this.state.noAnonFunctionType = oldNoAnonFunctionType;
	    this.expect(48);
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterInstantiation");
	  }
	  flowParseTypeParameterInstantiationCallOrNew() {
	    const node = this.startNode();
	    const oldInType = this.state.inType;
	    node.params = [];
	    this.state.inType = true;
	    this.expect(47);
	    while (!this.match(48)) {
	      node.params.push(this.flowParseTypeOrImplicitInstantiation());
	      if (!this.match(48)) {
	        this.expect(12);
	      }
	    }
	    this.expect(48);
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterInstantiation");
	  }
	  flowParseInterfaceType() {
	    const node = this.startNode();
	    this.expectContextual(129);
	    node.extends = [];
	    if (this.eat(81)) {
	      do {
	        node.extends.push(this.flowParseInterfaceExtends());
	      } while (this.eat(12));
	    }
	    node.body = this.flowParseObjectType({
	      allowStatic: false,
	      allowExact: false,
	      allowSpread: false,
	      allowProto: false,
	      allowInexact: false
	    });
	    return this.finishNode(node, "InterfaceTypeAnnotation");
	  }
	  flowParseObjectPropertyKey() {
	    return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
	  }
	  flowParseObjectTypeIndexer(node, isStatic, variance) {
	    node.static = isStatic;
	    if (this.lookahead().type === 14) {
	      node.id = this.flowParseObjectPropertyKey();
	      node.key = this.flowParseTypeInitialiser();
	    } else {
	      node.id = null;
	      node.key = this.flowParseType();
	    }
	    this.expect(3);
	    node.value = this.flowParseTypeInitialiser();
	    node.variance = variance;
	    return this.finishNode(node, "ObjectTypeIndexer");
	  }
	  flowParseObjectTypeInternalSlot(node, isStatic) {
	    node.static = isStatic;
	    node.id = this.flowParseObjectPropertyKey();
	    this.expect(3);
	    this.expect(3);
	    if (this.match(47) || this.match(10)) {
	      node.method = true;
	      node.optional = false;
	      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
	    } else {
	      node.method = false;
	      if (this.eat(17)) {
	        node.optional = true;
	      }
	      node.value = this.flowParseTypeInitialiser();
	    }
	    return this.finishNode(node, "ObjectTypeInternalSlot");
	  }
	  flowParseObjectTypeMethodish(node) {
	    node.params = [];
	    node.rest = null;
	    node.typeParameters = null;
	    node.this = null;
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	    this.expect(10);
	    if (this.match(78)) {
	      node.this = this.flowParseFunctionTypeParam(true);
	      node.this.name = null;
	      if (!this.match(11)) {
	        this.expect(12);
	      }
	    }
	    while (!this.match(11) && !this.match(21)) {
	      node.params.push(this.flowParseFunctionTypeParam(false));
	      if (!this.match(11)) {
	        this.expect(12);
	      }
	    }
	    if (this.eat(21)) {
	      node.rest = this.flowParseFunctionTypeParam(false);
	    }
	    this.expect(11);
	    node.returnType = this.flowParseTypeInitialiser();
	    return this.finishNode(node, "FunctionTypeAnnotation");
	  }
	  flowParseObjectTypeCallProperty(node, isStatic) {
	    const valueNode = this.startNode();
	    node.static = isStatic;
	    node.value = this.flowParseObjectTypeMethodish(valueNode);
	    return this.finishNode(node, "ObjectTypeCallProperty");
	  }
	  flowParseObjectType({
	    allowStatic,
	    allowExact,
	    allowSpread,
	    allowProto,
	    allowInexact
	  }) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    const nodeStart = this.startNode();
	    nodeStart.callProperties = [];
	    nodeStart.properties = [];
	    nodeStart.indexers = [];
	    nodeStart.internalSlots = [];
	    let endDelim;
	    let exact;
	    let inexact = false;
	    if (allowExact && this.match(6)) {
	      this.expect(6);
	      endDelim = 9;
	      exact = true;
	    } else {
	      this.expect(5);
	      endDelim = 8;
	      exact = false;
	    }
	    nodeStart.exact = exact;
	    while (!this.match(endDelim)) {
	      let isStatic = false;
	      let protoStartLoc = null;
	      let inexactStartLoc = null;
	      const node = this.startNode();
	      if (allowProto && this.isContextual(118)) {
	        const lookahead = this.lookahead();
	        if (lookahead.type !== 14 && lookahead.type !== 17) {
	          this.next();
	          protoStartLoc = this.state.startLoc;
	          allowStatic = false;
	        }
	      }
	      if (allowStatic && this.isContextual(106)) {
	        const lookahead = this.lookahead();
	        if (lookahead.type !== 14 && lookahead.type !== 17) {
	          this.next();
	          isStatic = true;
	        }
	      }
	      const variance = this.flowParseVariance();
	      if (this.eat(0)) {
	        if (protoStartLoc != null) {
	          this.unexpected(protoStartLoc);
	        }
	        if (this.eat(0)) {
	          if (variance) {
	            this.unexpected(variance.loc.start);
	          }
	          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
	        } else {
	          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
	        }
	      } else if (this.match(10) || this.match(47)) {
	        if (protoStartLoc != null) {
	          this.unexpected(protoStartLoc);
	        }
	        if (variance) {
	          this.unexpected(variance.loc.start);
	        }
	        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
	      } else {
	        let kind = "init";
	        if (this.isContextual(99) || this.isContextual(104)) {
	          const lookahead = this.lookahead();
	          if (tokenIsLiteralPropertyName(lookahead.type)) {
	            kind = this.state.value;
	            this.next();
	          }
	        }
	        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
	        if (propOrInexact === null) {
	          inexact = true;
	          inexactStartLoc = this.state.lastTokStartLoc;
	        } else {
	          nodeStart.properties.push(propOrInexact);
	        }
	      }
	      this.flowObjectTypeSemicolon();
	      if (inexactStartLoc && !this.match(8) && !this.match(9)) {
	        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
	      }
	    }
	    this.expect(endDelim);
	    if (allowSpread) {
	      nodeStart.inexact = inexact;
	    }
	    const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
	    this.state.inType = oldInType;
	    return out;
	  }
	  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
	    if (this.eat(21)) {
	      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
	      if (isInexactToken) {
	        if (!allowSpread) {
	          this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);
	        } else if (!allowInexact) {
	          this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);
	        }
	        if (variance) {
	          this.raise(FlowErrors.InexactVariance, variance);
	        }
	        return null;
	      }
	      if (!allowSpread) {
	        this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);
	      }
	      if (protoStartLoc != null) {
	        this.unexpected(protoStartLoc);
	      }
	      if (variance) {
	        this.raise(FlowErrors.SpreadVariance, variance);
	      }
	      node.argument = this.flowParseType();
	      return this.finishNode(node, "ObjectTypeSpreadProperty");
	    } else {
	      node.key = this.flowParseObjectPropertyKey();
	      node.static = isStatic;
	      node.proto = protoStartLoc != null;
	      node.kind = kind;
	      let optional = false;
	      if (this.match(47) || this.match(10)) {
	        node.method = true;
	        if (protoStartLoc != null) {
	          this.unexpected(protoStartLoc);
	        }
	        if (variance) {
	          this.unexpected(variance.loc.start);
	        }
	        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
	        if (kind === "get" || kind === "set") {
	          this.flowCheckGetterSetterParams(node);
	        }
	        if (!allowSpread && node.key.name === "constructor" && node.value.this) {
	          this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);
	        }
	      } else {
	        if (kind !== "init") this.unexpected();
	        node.method = false;
	        if (this.eat(17)) {
	          optional = true;
	        }
	        node.value = this.flowParseTypeInitialiser();
	        node.variance = variance;
	      }
	      node.optional = optional;
	      return this.finishNode(node, "ObjectTypeProperty");
	    }
	  }
	  flowCheckGetterSetterParams(property) {
	    const paramCount = property.kind === "get" ? 0 : 1;
	    const length = property.value.params.length + (property.value.rest ? 1 : 0);
	    if (property.value.this) {
	      this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);
	    }
	    if (length !== paramCount) {
	      this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);
	    }
	    if (property.kind === "set" && property.value.rest) {
	      this.raise(Errors.BadSetterRestParameter, property);
	    }
	  }
	  flowObjectTypeSemicolon() {
	    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
	      this.unexpected();
	    }
	  }
	  flowParseQualifiedTypeIdentifier(startLoc, id) {
	    var _startLoc;
	    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
	    let node = id || this.flowParseRestrictedIdentifier(true);
	    while (this.eat(16)) {
	      const node2 = this.startNodeAt(startLoc);
	      node2.qualification = node;
	      node2.id = this.flowParseRestrictedIdentifier(true);
	      node = this.finishNode(node2, "QualifiedTypeIdentifier");
	    }
	    return node;
	  }
	  flowParseGenericType(startLoc, id) {
	    const node = this.startNodeAt(startLoc);
	    node.typeParameters = null;
	    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterInstantiation();
	    }
	    return this.finishNode(node, "GenericTypeAnnotation");
	  }
	  flowParseTypeofType() {
	    const node = this.startNode();
	    this.expect(87);
	    node.argument = this.flowParsePrimaryType();
	    return this.finishNode(node, "TypeofTypeAnnotation");
	  }
	  flowParseTupleType() {
	    const node = this.startNode();
	    node.types = [];
	    this.expect(0);
	    while (this.state.pos < this.length && !this.match(3)) {
	      node.types.push(this.flowParseType());
	      if (this.match(3)) break;
	      this.expect(12);
	    }
	    this.expect(3);
	    return this.finishNode(node, "TupleTypeAnnotation");
	  }
	  flowParseFunctionTypeParam(first) {
	    let name = null;
	    let optional = false;
	    let typeAnnotation = null;
	    const node = this.startNode();
	    const lh = this.lookahead();
	    const isThis = this.state.type === 78;
	    if (lh.type === 14 || lh.type === 17) {
	      if (isThis && !first) {
	        this.raise(FlowErrors.ThisParamMustBeFirst, node);
	      }
	      name = this.parseIdentifier(isThis);
	      if (this.eat(17)) {
	        optional = true;
	        if (isThis) {
	          this.raise(FlowErrors.ThisParamMayNotBeOptional, node);
	        }
	      }
	      typeAnnotation = this.flowParseTypeInitialiser();
	    } else {
	      typeAnnotation = this.flowParseType();
	    }
	    node.name = name;
	    node.optional = optional;
	    node.typeAnnotation = typeAnnotation;
	    return this.finishNode(node, "FunctionTypeParam");
	  }
	  reinterpretTypeAsFunctionTypeParam(type) {
	    const node = this.startNodeAt(type.loc.start);
	    node.name = null;
	    node.optional = false;
	    node.typeAnnotation = type;
	    return this.finishNode(node, "FunctionTypeParam");
	  }
	  flowParseFunctionTypeParams(params = []) {
	    let rest = null;
	    let _this = null;
	    if (this.match(78)) {
	      _this = this.flowParseFunctionTypeParam(true);
	      _this.name = null;
	      if (!this.match(11)) {
	        this.expect(12);
	      }
	    }
	    while (!this.match(11) && !this.match(21)) {
	      params.push(this.flowParseFunctionTypeParam(false));
	      if (!this.match(11)) {
	        this.expect(12);
	      }
	    }
	    if (this.eat(21)) {
	      rest = this.flowParseFunctionTypeParam(false);
	    }
	    return {
	      params,
	      rest,
	      _this
	    };
	  }
	  flowIdentToTypeAnnotation(startLoc, node, id) {
	    switch (id.name) {
	      case "any":
	        return this.finishNode(node, "AnyTypeAnnotation");
	      case "bool":
	      case "boolean":
	        return this.finishNode(node, "BooleanTypeAnnotation");
	      case "mixed":
	        return this.finishNode(node, "MixedTypeAnnotation");
	      case "empty":
	        return this.finishNode(node, "EmptyTypeAnnotation");
	      case "number":
	        return this.finishNode(node, "NumberTypeAnnotation");
	      case "string":
	        return this.finishNode(node, "StringTypeAnnotation");
	      case "symbol":
	        return this.finishNode(node, "SymbolTypeAnnotation");
	      default:
	        this.checkNotUnderscore(id.name);
	        return this.flowParseGenericType(startLoc, id);
	    }
	  }
	  flowParsePrimaryType() {
	    const startLoc = this.state.startLoc;
	    const node = this.startNode();
	    let tmp;
	    let type;
	    let isGroupedType = false;
	    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	    switch (this.state.type) {
	      case 5:
	        return this.flowParseObjectType({
	          allowStatic: false,
	          allowExact: false,
	          allowSpread: true,
	          allowProto: false,
	          allowInexact: true
	        });
	      case 6:
	        return this.flowParseObjectType({
	          allowStatic: false,
	          allowExact: true,
	          allowSpread: true,
	          allowProto: false,
	          allowInexact: false
	        });
	      case 0:
	        this.state.noAnonFunctionType = false;
	        type = this.flowParseTupleType();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	        return type;
	      case 47:
	        {
	          const node = this.startNode();
	          node.typeParameters = this.flowParseTypeParameterDeclaration();
	          this.expect(10);
	          tmp = this.flowParseFunctionTypeParams();
	          node.params = tmp.params;
	          node.rest = tmp.rest;
	          node.this = tmp._this;
	          this.expect(11);
	          this.expect(19);
	          node.returnType = this.flowParseType();
	          return this.finishNode(node, "FunctionTypeAnnotation");
	        }
	      case 10:
	        {
	          const node = this.startNode();
	          this.next();
	          if (!this.match(11) && !this.match(21)) {
	            if (tokenIsIdentifier(this.state.type) || this.match(78)) {
	              const token = this.lookahead().type;
	              isGroupedType = token !== 17 && token !== 14;
	            } else {
	              isGroupedType = true;
	            }
	          }
	          if (isGroupedType) {
	            this.state.noAnonFunctionType = false;
	            type = this.flowParseType();
	            this.state.noAnonFunctionType = oldNoAnonFunctionType;
	            if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
	              this.expect(11);
	              return type;
	            } else {
	              this.eat(12);
	            }
	          }
	          if (type) {
	            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
	          } else {
	            tmp = this.flowParseFunctionTypeParams();
	          }
	          node.params = tmp.params;
	          node.rest = tmp.rest;
	          node.this = tmp._this;
	          this.expect(11);
	          this.expect(19);
	          node.returnType = this.flowParseType();
	          node.typeParameters = null;
	          return this.finishNode(node, "FunctionTypeAnnotation");
	        }
	      case 133:
	        return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
	      case 85:
	      case 86:
	        node.value = this.match(85);
	        this.next();
	        return this.finishNode(node, "BooleanLiteralTypeAnnotation");
	      case 53:
	        if (this.state.value === "-") {
	          this.next();
	          if (this.match(134)) {
	            return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
	          }
	          if (this.match(135)) {
	            return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
	          }
	          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
	        }
	        this.unexpected();
	        return;
	      case 134:
	        return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
	      case 135:
	        return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
	      case 88:
	        this.next();
	        return this.finishNode(node, "VoidTypeAnnotation");
	      case 84:
	        this.next();
	        return this.finishNode(node, "NullLiteralTypeAnnotation");
	      case 78:
	        this.next();
	        return this.finishNode(node, "ThisTypeAnnotation");
	      case 55:
	        this.next();
	        return this.finishNode(node, "ExistsTypeAnnotation");
	      case 87:
	        return this.flowParseTypeofType();
	      default:
	        if (tokenIsKeyword(this.state.type)) {
	          const label = tokenLabelName(this.state.type);
	          this.next();
	          return super.createIdentifier(node, label);
	        } else if (tokenIsIdentifier(this.state.type)) {
	          if (this.isContextual(129)) {
	            return this.flowParseInterfaceType();
	          }
	          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
	        }
	    }
	    this.unexpected();
	  }
	  flowParsePostfixType() {
	    const startLoc = this.state.startLoc;
	    let type = this.flowParsePrimaryType();
	    let seenOptionalIndexedAccess = false;
	    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
	      const node = this.startNodeAt(startLoc);
	      const optional = this.eat(18);
	      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
	      this.expect(0);
	      if (!optional && this.match(3)) {
	        node.elementType = type;
	        this.next();
	        type = this.finishNode(node, "ArrayTypeAnnotation");
	      } else {
	        node.objectType = type;
	        node.indexType = this.flowParseType();
	        this.expect(3);
	        if (seenOptionalIndexedAccess) {
	          node.optional = optional;
	          type = this.finishNode(node, "OptionalIndexedAccessType");
	        } else {
	          type = this.finishNode(node, "IndexedAccessType");
	        }
	      }
	    }
	    return type;
	  }
	  flowParsePrefixType() {
	    const node = this.startNode();
	    if (this.eat(17)) {
	      node.typeAnnotation = this.flowParsePrefixType();
	      return this.finishNode(node, "NullableTypeAnnotation");
	    } else {
	      return this.flowParsePostfixType();
	    }
	  }
	  flowParseAnonFunctionWithoutParens() {
	    const param = this.flowParsePrefixType();
	    if (!this.state.noAnonFunctionType && this.eat(19)) {
	      const node = this.startNodeAt(param.loc.start);
	      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
	      node.rest = null;
	      node.this = null;
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	      return this.finishNode(node, "FunctionTypeAnnotation");
	    }
	    return param;
	  }
	  flowParseIntersectionType() {
	    const node = this.startNode();
	    this.eat(45);
	    const type = this.flowParseAnonFunctionWithoutParens();
	    node.types = [type];
	    while (this.eat(45)) {
	      node.types.push(this.flowParseAnonFunctionWithoutParens());
	    }
	    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	  }
	  flowParseUnionType() {
	    const node = this.startNode();
	    this.eat(43);
	    const type = this.flowParseIntersectionType();
	    node.types = [type];
	    while (this.eat(43)) {
	      node.types.push(this.flowParseIntersectionType());
	    }
	    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	  }
	  flowParseType() {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    const type = this.flowParseUnionType();
	    this.state.inType = oldInType;
	    return type;
	  }
	  flowParseTypeOrImplicitInstantiation() {
	    if (this.state.type === 132 && this.state.value === "_") {
	      const startLoc = this.state.startLoc;
	      const node = this.parseIdentifier();
	      return this.flowParseGenericType(startLoc, node);
	    } else {
	      return this.flowParseType();
	    }
	  }
	  flowParseTypeAnnotation() {
	    const node = this.startNode();
	    node.typeAnnotation = this.flowParseTypeInitialiser();
	    return this.finishNode(node, "TypeAnnotation");
	  }
	  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
	    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
	    if (this.match(14)) {
	      ident.typeAnnotation = this.flowParseTypeAnnotation();
	      this.resetEndLocation(ident);
	    }
	    return ident;
	  }
	  typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
	    return node.expression;
	  }
	  flowParseVariance() {
	    let variance = null;
	    if (this.match(53)) {
	      variance = this.startNode();
	      if (this.state.value === "+") {
	        variance.kind = "plus";
	      } else {
	        variance.kind = "minus";
	      }
	      this.next();
	      return this.finishNode(variance, "Variance");
	    }
	    return variance;
	  }
	  parseFunctionBody(node, allowExpressionBody, isMethod = false) {
	    if (allowExpressionBody) {
	      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
	      return;
	    }
	    super.parseFunctionBody(node, false, isMethod);
	  }
	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    if (this.match(14)) {
	      const typeNode = this.startNode();
	      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
	    }
	    return super.parseFunctionBodyAndFinish(node, type, isMethod);
	  }
	  parseStatementLike(flags) {
	    if (this.state.strict && this.isContextual(129)) {
	      const lookahead = this.lookahead();
	      if (tokenIsKeywordOrIdentifier(lookahead.type)) {
	        const node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      }
	    } else if (this.shouldParseEnums() && this.isContextual(126)) {
	      const node = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(node);
	    }
	    const stmt = super.parseStatementLike(flags);
	    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
	      this.flowPragma = null;
	    }
	    return stmt;
	  }
	  parseExpressionStatement(node, expr, decorators) {
	    if (expr.type === "Identifier") {
	      if (expr.name === "declare") {
	        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
	          return this.flowParseDeclare(node);
	        }
	      } else if (tokenIsIdentifier(this.state.type)) {
	        if (expr.name === "interface") {
	          return this.flowParseInterface(node);
	        } else if (expr.name === "type") {
	          return this.flowParseTypeAlias(node);
	        } else if (expr.name === "opaque") {
	          return this.flowParseOpaqueType(node, false);
	        }
	      }
	    }
	    return super.parseExpressionStatement(node, expr, decorators);
	  }
	  shouldParseExportDeclaration() {
	    const {
	      type
	    } = this.state;
	    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
	      return !this.state.containsEsc;
	    }
	    return super.shouldParseExportDeclaration();
	  }
	  isExportDefaultSpecifier() {
	    const {
	      type
	    } = this.state;
	    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
	      return this.state.containsEsc;
	    }
	    return super.isExportDefaultSpecifier();
	  }
	  parseExportDefaultExpression() {
	    if (this.shouldParseEnums() && this.isContextual(126)) {
	      const node = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(node);
	    }
	    return super.parseExportDefaultExpression();
	  }
	  parseConditional(expr, startLoc, refExpressionErrors) {
	    if (!this.match(17)) return expr;
	    if (this.state.maybeInArrowParameters) {
	      const nextCh = this.lookaheadCharCode();
	      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
	        this.setOptionalParametersError(refExpressionErrors);
	        return expr;
	      }
	    }
	    this.expect(17);
	    const state = this.state.clone();
	    const originalNoArrowAt = this.state.noArrowAt;
	    const node = this.startNodeAt(startLoc);
	    let {
	      consequent,
	      failed
	    } = this.tryParseConditionalConsequent();
	    let [valid, invalid] = this.getArrowLikeExpressions(consequent);
	    if (failed || invalid.length > 0) {
	      const noArrowAt = [...originalNoArrowAt];
	      if (invalid.length > 0) {
	        this.state = state;
	        this.state.noArrowAt = noArrowAt;
	        for (let i = 0; i < invalid.length; i++) {
	          noArrowAt.push(invalid[i].start);
	        }
	        ({
	          consequent,
	          failed
	        } = this.tryParseConditionalConsequent());
	        [valid, invalid] = this.getArrowLikeExpressions(consequent);
	      }
	      if (failed && valid.length > 1) {
	        this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);
	      }
	      if (failed && valid.length === 1) {
	        this.state = state;
	        noArrowAt.push(valid[0].start);
	        this.state.noArrowAt = noArrowAt;
	        ({
	          consequent,
	          failed
	        } = this.tryParseConditionalConsequent());
	      }
	    }
	    this.getArrowLikeExpressions(consequent, true);
	    this.state.noArrowAt = originalNoArrowAt;
	    this.expect(14);
	    node.test = expr;
	    node.consequent = consequent;
	    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  tryParseConditionalConsequent() {
	    this.state.noArrowParamsConversionAt.push(this.state.start);
	    const consequent = this.parseMaybeAssignAllowIn();
	    const failed = !this.match(14);
	    this.state.noArrowParamsConversionAt.pop();
	    return {
	      consequent,
	      failed
	    };
	  }
	  getArrowLikeExpressions(node, disallowInvalid) {
	    const stack = [node];
	    const arrows = [];
	    while (stack.length !== 0) {
	      const node = stack.pop();
	      if (node.type === "ArrowFunctionExpression" && node.body.type !== "BlockStatement") {
	        if (node.typeParameters || !node.returnType) {
	          this.finishArrowValidation(node);
	        } else {
	          arrows.push(node);
	        }
	        stack.push(node.body);
	      } else if (node.type === "ConditionalExpression") {
	        stack.push(node.consequent);
	        stack.push(node.alternate);
	      }
	    }
	    if (disallowInvalid) {
	      arrows.forEach(node => this.finishArrowValidation(node));
	      return [arrows, []];
	    }
	    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
	  }
	  finishArrowValidation(node) {
	    var _node$extra;
	    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
	    this.scope.enter(2 | 4);
	    super.checkParams(node, false, true);
	    this.scope.exit();
	  }
	  forwardNoArrowParamsConversionAt(node, parse) {
	    let result;
	    if (this.state.noArrowParamsConversionAt.includes(node.start)) {
	      this.state.noArrowParamsConversionAt.push(this.state.start);
	      result = parse();
	      this.state.noArrowParamsConversionAt.pop();
	    } else {
	      result = parse();
	    }
	    return result;
	  }
	  parseParenItem(node, startLoc) {
	    const newNode = super.parseParenItem(node, startLoc);
	    if (this.eat(17)) {
	      newNode.optional = true;
	      this.resetEndLocation(node);
	    }
	    if (this.match(14)) {
	      const typeCastNode = this.startNodeAt(startLoc);
	      typeCastNode.expression = newNode;
	      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	      return this.finishNode(typeCastNode, "TypeCastExpression");
	    }
	    return newNode;
	  }
	  assertModuleNodeAllowed(node) {
	    if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
	      return;
	    }
	    super.assertModuleNodeAllowed(node);
	  }
	  parseExportDeclaration(node) {
	    if (this.isContextual(130)) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      if (this.match(5)) {
	        node.specifiers = this.parseExportSpecifiers(true);
	        super.parseExportFrom(node);
	        return null;
	      } else {
	        return this.flowParseTypeAlias(declarationNode);
	      }
	    } else if (this.isContextual(131)) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseOpaqueType(declarationNode, false);
	    } else if (this.isContextual(129)) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseInterface(declarationNode);
	    } else if (this.shouldParseEnums() && this.isContextual(126)) {
	      node.exportKind = "value";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(declarationNode);
	    } else {
	      return super.parseExportDeclaration(node);
	    }
	  }
	  eatExportStar(node) {
	    if (super.eatExportStar(node)) return true;
	    if (this.isContextual(130) && this.lookahead().type === 55) {
	      node.exportKind = "type";
	      this.next();
	      this.next();
	      return true;
	    }
	    return false;
	  }
	  maybeParseExportNamespaceSpecifier(node) {
	    const {
	      startLoc
	    } = this.state;
	    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
	    if (hasNamespace && node.exportKind === "type") {
	      this.unexpected(startLoc);
	    }
	    return hasNamespace;
	  }
	  parseClassId(node, isStatement, optionalId) {
	    super.parseClassId(node, isStatement, optionalId);
	    if (this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	  }
	  parseClassMember(classBody, member, state) {
	    const {
	      startLoc
	    } = this.state;
	    if (this.isContextual(125)) {
	      if (super.parseClassMemberFromModifier(classBody, member)) {
	        return;
	      }
	      member.declare = true;
	    }
	    super.parseClassMember(classBody, member, state);
	    if (member.declare) {
	      if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
	        this.raise(FlowErrors.DeclareClassElement, startLoc);
	      } else if (member.value) {
	        this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);
	      }
	    }
	  }
	  isIterator(word) {
	    return word === "iterator" || word === "asyncIterator";
	  }
	  readIterator() {
	    const word = super.readWord1();
	    const fullWord = "@@" + word;
	    if (!this.isIterator(word) || !this.state.inType) {
	      this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {
	        identifierName: fullWord
	      });
	    }
	    this.finishToken(132, fullWord);
	  }
	  getTokenFromCode(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (code === 123 && next === 124) {
	      this.finishOp(6, 2);
	    } else if (this.state.inType && (code === 62 || code === 60)) {
	      this.finishOp(code === 62 ? 48 : 47, 1);
	    } else if (this.state.inType && code === 63) {
	      if (next === 46) {
	        this.finishOp(18, 2);
	      } else {
	        this.finishOp(17, 1);
	      }
	    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
	      this.state.pos += 2;
	      this.readIterator();
	    } else {
	      super.getTokenFromCode(code);
	    }
	  }
	  isAssignable(node, isBinding) {
	    if (node.type === "TypeCastExpression") {
	      return this.isAssignable(node.expression, isBinding);
	    } else {
	      return super.isAssignable(node, isBinding);
	    }
	  }
	  toAssignable(node, isLHS = false) {
	    if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
	      node.left = this.typeCastToParameter(node.left);
	    }
	    super.toAssignable(node, isLHS);
	  }
	  toAssignableList(exprList, trailingCommaLoc, isLHS) {
	    for (let i = 0; i < exprList.length; i++) {
	      const expr = exprList[i];
	      if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
	        exprList[i] = this.typeCastToParameter(expr);
	      }
	    }
	    super.toAssignableList(exprList, trailingCommaLoc, isLHS);
	  }
	  toReferencedList(exprList, isParenthesizedExpr) {
	    for (let i = 0; i < exprList.length; i++) {
	      var _expr$extra;
	      const expr = exprList[i];
	      if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
	        this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
	      }
	    }
	    return exprList;
	  }
	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
	    if (canBePattern && !this.state.maybeInArrowParameters) {
	      this.toReferencedList(node.elements);
	    }
	    return node;
	  }
	  isValidLVal(type, isParenthesized, binding) {
	    return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
	  }
	  parseClassProperty(node) {
	    if (this.match(14)) {
	      node.typeAnnotation = this.flowParseTypeAnnotation();
	    }
	    return super.parseClassProperty(node);
	  }
	  parseClassPrivateProperty(node) {
	    if (this.match(14)) {
	      node.typeAnnotation = this.flowParseTypeAnnotation();
	    }
	    return super.parseClassPrivateProperty(node);
	  }
	  isClassMethod() {
	    return this.match(47) || super.isClassMethod();
	  }
	  isClassProperty() {
	    return this.match(14) || super.isClassProperty();
	  }
	  isNonstaticConstructor(method) {
	    return !this.match(14) && super.isNonstaticConstructor(method);
	  }
	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    if (method.variance) {
	      this.unexpected(method.variance.loc.start);
	    }
	    delete method.variance;
	    if (this.match(47)) {
	      method.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
	    if (method.params && isConstructor) {
	      const params = method.params;
	      if (params.length > 0 && this.isThisParam(params[0])) {
	        this.raise(FlowErrors.ThisParamBannedInConstructor, method);
	      }
	    } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
	      const params = method.value.params;
	      if (params.length > 0 && this.isThisParam(params[0])) {
	        this.raise(FlowErrors.ThisParamBannedInConstructor, method);
	      }
	    }
	  }
	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    if (method.variance) {
	      this.unexpected(method.variance.loc.start);
	    }
	    delete method.variance;
	    if (this.match(47)) {
	      method.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
	  }
	  parseClassSuper(node) {
	    super.parseClassSuper(node);
	    if (node.superClass && this.match(47)) {
	      node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	    }
	    if (this.isContextual(113)) {
	      this.next();
	      const implemented = node.implements = [];
	      do {
	        const node = this.startNode();
	        node.id = this.flowParseRestrictedIdentifier(true);
	        if (this.match(47)) {
	          node.typeParameters = this.flowParseTypeParameterInstantiation();
	        } else {
	          node.typeParameters = null;
	        }
	        implemented.push(this.finishNode(node, "ClassImplements"));
	      } while (this.eat(12));
	    }
	  }
	  checkGetterSetterParams(method) {
	    super.checkGetterSetterParams(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    if (params.length > 0) {
	      const param = params[0];
	      if (this.isThisParam(param) && method.kind === "get") {
	        this.raise(FlowErrors.GetterMayNotHaveThisParam, param);
	      } else if (this.isThisParam(param)) {
	        this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
	      }
	    }
	  }
	  parsePropertyNamePrefixOperator(node) {
	    node.variance = this.flowParseVariance();
	  }
	  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    if (prop.variance) {
	      this.unexpected(prop.variance.loc.start);
	    }
	    delete prop.variance;
	    let typeParameters;
	    if (this.match(47) && !isAccessor) {
	      typeParameters = this.flowParseTypeParameterDeclaration();
	      if (!this.match(10)) this.unexpected();
	    }
	    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
	    if (typeParameters) {
	      (result.value || result).typeParameters = typeParameters;
	    }
	    return result;
	  }
	  parseAssignableListItemTypes(param) {
	    if (this.eat(17)) {
	      if (param.type !== "Identifier") {
	        this.raise(FlowErrors.PatternIsOptional, param);
	      }
	      if (this.isThisParam(param)) {
	        this.raise(FlowErrors.ThisParamMayNotBeOptional, param);
	      }
	      param.optional = true;
	    }
	    if (this.match(14)) {
	      param.typeAnnotation = this.flowParseTypeAnnotation();
	    } else if (this.isThisParam(param)) {
	      this.raise(FlowErrors.ThisParamAnnotationRequired, param);
	    }
	    if (this.match(29) && this.isThisParam(param)) {
	      this.raise(FlowErrors.ThisParamNoDefault, param);
	    }
	    this.resetEndLocation(param);
	    return param;
	  }
	  parseMaybeDefault(startLoc, left) {
	    const node = super.parseMaybeDefault(startLoc, left);
	    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	      this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);
	    }
	    return node;
	  }
	  checkImportReflection(node) {
	    super.checkImportReflection(node);
	    if (node.module && node.importKind !== "value") {
	      this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
	    }
	  }
	  parseImportSpecifierLocal(node, specifier, type) {
	    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
	    node.specifiers.push(this.finishImportSpecifier(specifier, type));
	  }
	  isPotentialImportPhase(isExport) {
	    if (super.isPotentialImportPhase(isExport)) return true;
	    if (this.isContextual(130)) {
	      if (!isExport) return true;
	      const ch = this.lookaheadCharCode();
	      return ch === 123 || ch === 42;
	    }
	    return !isExport && this.isContextual(87);
	  }
	  applyImportPhase(node, isExport, phase, loc) {
	    super.applyImportPhase(node, isExport, phase, loc);
	    if (isExport) {
	      if (!phase && this.match(65)) {
	        return;
	      }
	      node.exportKind = phase === "type" ? phase : "value";
	    } else {
	      if (phase === "type" && this.match(55)) this.unexpected();
	      node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
	    }
	  }
	  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
	    const firstIdent = specifier.imported;
	    let specifierTypeKind = null;
	    if (firstIdent.type === "Identifier") {
	      if (firstIdent.name === "type") {
	        specifierTypeKind = "type";
	      } else if (firstIdent.name === "typeof") {
	        specifierTypeKind = "typeof";
	      }
	    }
	    let isBinding = false;
	    if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
	      const as_ident = this.parseIdentifier(true);
	      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
	        specifier.imported = as_ident;
	        specifier.importKind = specifierTypeKind;
	        specifier.local = cloneIdentifier(as_ident);
	      } else {
	        specifier.imported = firstIdent;
	        specifier.importKind = null;
	        specifier.local = this.parseIdentifier();
	      }
	    } else {
	      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
	        specifier.imported = this.parseIdentifier(true);
	        specifier.importKind = specifierTypeKind;
	      } else {
	        if (importedIsString) {
	          throw this.raise(Errors.ImportBindingIsString, specifier, {
	            importName: firstIdent.value
	          });
	        }
	        specifier.imported = firstIdent;
	        specifier.importKind = null;
	      }
	      if (this.eatContextual(93)) {
	        specifier.local = this.parseIdentifier();
	      } else {
	        isBinding = true;
	        specifier.local = cloneIdentifier(specifier.imported);
	      }
	    }
	    const specifierIsTypeImport = hasTypeImportKind(specifier);
	    if (isInTypeOnlyImport && specifierIsTypeImport) {
	      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);
	    }
	    if (isInTypeOnlyImport || specifierIsTypeImport) {
	      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
	    }
	    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
	      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
	    }
	    return this.finishImportSpecifier(specifier, "ImportSpecifier");
	  }
	  parseBindingAtom() {
	    switch (this.state.type) {
	      case 78:
	        return this.parseIdentifier(true);
	      default:
	        return super.parseBindingAtom();
	    }
	  }
	  parseFunctionParams(node, isConstructor) {
	    const kind = node.kind;
	    if (kind !== "get" && kind !== "set" && this.match(47)) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	    super.parseFunctionParams(node, isConstructor);
	  }
	  parseVarId(decl, kind) {
	    super.parseVarId(decl, kind);
	    if (this.match(14)) {
	      decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	      this.resetEndLocation(decl.id);
	    }
	  }
	  parseAsyncArrowFromCallExpression(node, call) {
	    if (this.match(14)) {
	      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	      this.state.noAnonFunctionType = true;
	      node.returnType = this.flowParseTypeAnnotation();
	      this.state.noAnonFunctionType = oldNoAnonFunctionType;
	    }
	    return super.parseAsyncArrowFromCallExpression(node, call);
	  }
	  shouldParseAsyncArrow() {
	    return this.match(14) || super.shouldParseAsyncArrow();
	  }
	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    var _jsx;
	    let state = null;
	    let jsx;
	    if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
	      state = this.state.clone();
	      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
	      if (!jsx.error) return jsx.node;
	      const {
	        context
	      } = this.state;
	      const currentContext = context[context.length - 1];
	      if (currentContext === types.j_oTag || currentContext === types.j_expr) {
	        context.pop();
	      }
	    }
	    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {
	      var _jsx2, _jsx3;
	      state = state || this.state.clone();
	      let typeParameters;
	      const arrow = this.tryParse(abort => {
	        var _arrowExpression$extr;
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
	          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	          this.resetStartLocationFromNode(result, typeParameters);
	          return result;
	        });
	        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();
	        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
	        if (expr.type !== "ArrowFunctionExpression") abort();
	        expr.typeParameters = typeParameters;
	        this.resetStartLocationFromNode(expr, typeParameters);
	        return arrowExpression;
	      }, state);
	      let arrowExpression = null;
	      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
	        if (!arrow.error && !arrow.aborted) {
	          if (arrow.node.async) {
	            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);
	          }
	          return arrow.node;
	        }
	        arrowExpression = arrow.node;
	      }
	      if ((_jsx2 = jsx) != null && _jsx2.node) {
	        this.state = jsx.failState;
	        return jsx.node;
	      }
	      if (arrowExpression) {
	        this.state = arrow.failState;
	        return arrowExpression;
	      }
	      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
	      if (arrow.thrown) throw arrow.error;
	      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
	    }
	    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	  }
	  parseArrow(node) {
	    if (this.match(14)) {
	      const result = this.tryParse(() => {
	        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	        this.state.noAnonFunctionType = true;
	        const typeNode = this.startNode();
	        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	        if (this.canInsertSemicolon()) this.unexpected();
	        if (!this.match(19)) this.unexpected();
	        return typeNode;
	      });
	      if (result.thrown) return null;
	      if (result.error) this.state = result.failState;
	      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
	    }
	    return super.parseArrow(node);
	  }
	  shouldParseArrow(params) {
	    return this.match(14) || super.shouldParseArrow(params);
	  }
	  setArrowFunctionParameters(node, params) {
	    if (this.state.noArrowParamsConversionAt.includes(node.start)) {
	      node.params = params;
	    } else {
	      super.setArrowFunctionParameters(node, params);
	    }
	  }
	  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
	    if (isArrowFunction && this.state.noArrowParamsConversionAt.includes(node.start)) {
	      return;
	    }
	    for (let i = 0; i < node.params.length; i++) {
	      if (this.isThisParam(node.params[i]) && i > 0) {
	        this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);
	      }
	    }
	    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
	  }
	  parseParenAndDistinguishExpression(canBeArrow) {
	    return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.state.start));
	  }
	  parseSubscripts(base, startLoc, noCalls) {
	    if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.includes(startLoc.index)) {
	      this.next();
	      const node = this.startNodeAt(startLoc);
	      node.callee = base;
	      node.arguments = super.parseCallExpressionArguments(11, false);
	      base = this.finishNode(node, "CallExpression");
	    } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
	      const state = this.state.clone();
	      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
	      if (!arrow.error && !arrow.aborted) return arrow.node;
	      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
	      if (result.node && !result.error) return result.node;
	      if (arrow.node) {
	        this.state = arrow.failState;
	        return arrow.node;
	      }
	      if (result.node) {
	        this.state = result.failState;
	        return result.node;
	      }
	      throw arrow.error || result.error;
	    }
	    return super.parseSubscripts(base, startLoc, noCalls);
	  }
	  parseSubscript(base, startLoc, noCalls, subscriptState) {
	    if (this.match(18) && this.isLookaheadToken_lt()) {
	      subscriptState.optionalChainMember = true;
	      if (noCalls) {
	        subscriptState.stop = true;
	        return base;
	      }
	      this.next();
	      const node = this.startNodeAt(startLoc);
	      node.callee = base;
	      node.typeArguments = this.flowParseTypeParameterInstantiation();
	      this.expect(10);
	      node.arguments = this.parseCallExpressionArguments(11, false);
	      node.optional = true;
	      return this.finishCallExpression(node, true);
	    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
	      const node = this.startNodeAt(startLoc);
	      node.callee = base;
	      const result = this.tryParse(() => {
	        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
	        this.expect(10);
	        node.arguments = super.parseCallExpressionArguments(11, false);
	        if (subscriptState.optionalChainMember) {
	          node.optional = false;
	        }
	        return this.finishCallExpression(node, subscriptState.optionalChainMember);
	      });
	      if (result.node) {
	        if (result.error) this.state = result.failState;
	        return result.node;
	      }
	    }
	    return super.parseSubscript(base, startLoc, noCalls, subscriptState);
	  }
	  parseNewCallee(node) {
	    super.parseNewCallee(node);
	    let targs = null;
	    if (this.shouldParseTypes() && this.match(47)) {
	      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
	    }
	    node.typeArguments = targs;
	  }
	  parseAsyncArrowWithTypeParameters(startLoc) {
	    const node = this.startNodeAt(startLoc);
	    this.parseFunctionParams(node, false);
	    if (!this.parseArrow(node)) return;
	    return super.parseArrowExpression(node, undefined, true);
	  }
	  readToken_mult_modulo(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (code === 42 && next === 47 && this.state.hasFlowComment) {
	      this.state.hasFlowComment = false;
	      this.state.pos += 2;
	      this.nextToken();
	      return;
	    }
	    super.readToken_mult_modulo(code);
	  }
	  readToken_pipe_amp(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    if (code === 124 && next === 125) {
	      this.finishOp(9, 2);
	      return;
	    }
	    super.readToken_pipe_amp(code);
	  }
	  parseTopLevel(file, program) {
	    const fileNode = super.parseTopLevel(file, program);
	    if (this.state.hasFlowComment) {
	      this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());
	    }
	    return fileNode;
	  }
	  skipBlockComment() {
	    if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
	      if (this.state.hasFlowComment) {
	        throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
	      }
	      this.hasFlowCommentCompletion();
	      const commentSkip = this.skipFlowComment();
	      if (commentSkip) {
	        this.state.pos += commentSkip;
	        this.state.hasFlowComment = true;
	      }
	      return;
	    }
	    return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
	  }
	  skipFlowComment() {
	    const {
	      pos
	    } = this.state;
	    let shiftToFirstNonWhiteSpace = 2;
	    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
	      shiftToFirstNonWhiteSpace++;
	    }
	    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
	    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
	    if (ch2 === 58 && ch3 === 58) {
	      return shiftToFirstNonWhiteSpace + 2;
	    }
	    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
	      return shiftToFirstNonWhiteSpace + 12;
	    }
	    if (ch2 === 58 && ch3 !== 58) {
	      return shiftToFirstNonWhiteSpace;
	    }
	    return false;
	  }
	  hasFlowCommentCompletion() {
	    const end = this.input.indexOf("*/", this.state.pos);
	    if (end === -1) {
	      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
	    }
	  }
	  flowEnumErrorBooleanMemberNotInitialized(loc, {
	    enumName,
	    memberName
	  }) {
	    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
	      memberName,
	      enumName
	    });
	  }
	  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
	    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);
	  }
	  flowEnumErrorNumberMemberNotInitialized(loc, details) {
	    this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
	  }
	  flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
	    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
	  }
	  flowEnumMemberInit() {
	    const startLoc = this.state.startLoc;
	    const endOfInit = () => this.match(12) || this.match(8);
	    switch (this.state.type) {
	      case 134:
	        {
	          const literal = this.parseNumericLiteral(this.state.value);
	          if (endOfInit()) {
	            return {
	              type: "number",
	              loc: literal.loc.start,
	              value: literal
	            };
	          }
	          return {
	            type: "invalid",
	            loc: startLoc
	          };
	        }
	      case 133:
	        {
	          const literal = this.parseStringLiteral(this.state.value);
	          if (endOfInit()) {
	            return {
	              type: "string",
	              loc: literal.loc.start,
	              value: literal
	            };
	          }
	          return {
	            type: "invalid",
	            loc: startLoc
	          };
	        }
	      case 85:
	      case 86:
	        {
	          const literal = this.parseBooleanLiteral(this.match(85));
	          if (endOfInit()) {
	            return {
	              type: "boolean",
	              loc: literal.loc.start,
	              value: literal
	            };
	          }
	          return {
	            type: "invalid",
	            loc: startLoc
	          };
	        }
	      default:
	        return {
	          type: "invalid",
	          loc: startLoc
	        };
	    }
	  }
	  flowEnumMemberRaw() {
	    const loc = this.state.startLoc;
	    const id = this.parseIdentifier(true);
	    const init = this.eat(29) ? this.flowEnumMemberInit() : {
	      type: "none",
	      loc
	    };
	    return {
	      id,
	      init
	    };
	  }
	  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
	    const {
	      explicitType
	    } = context;
	    if (explicitType === null) {
	      return;
	    }
	    if (explicitType !== expectedType) {
	      this.flowEnumErrorInvalidMemberInitializer(loc, context);
	    }
	  }
	  flowEnumMembers({
	    enumName,
	    explicitType
	  }) {
	    const seenNames = new Set();
	    const members = {
	      booleanMembers: [],
	      numberMembers: [],
	      stringMembers: [],
	      defaultedMembers: []
	    };
	    let hasUnknownMembers = false;
	    while (!this.match(8)) {
	      if (this.eat(21)) {
	        hasUnknownMembers = true;
	        break;
	      }
	      const memberNode = this.startNode();
	      const {
	        id,
	        init
	      } = this.flowEnumMemberRaw();
	      const memberName = id.name;
	      if (memberName === "") {
	        continue;
	      }
	      if (/^[a-z]/.test(memberName)) {
	        this.raise(FlowErrors.EnumInvalidMemberName, id, {
	          memberName,
	          suggestion: memberName[0].toUpperCase() + memberName.slice(1),
	          enumName
	        });
	      }
	      if (seenNames.has(memberName)) {
	        this.raise(FlowErrors.EnumDuplicateMemberName, id, {
	          memberName,
	          enumName
	        });
	      }
	      seenNames.add(memberName);
	      const context = {
	        enumName,
	        explicitType,
	        memberName
	      };
	      memberNode.id = id;
	      switch (init.type) {
	        case "boolean":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
	            memberNode.init = init.value;
	            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
	            break;
	          }
	        case "number":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
	            memberNode.init = init.value;
	            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
	            break;
	          }
	        case "string":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
	            memberNode.init = init.value;
	            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
	            break;
	          }
	        case "invalid":
	          {
	            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
	          }
	        case "none":
	          {
	            switch (explicitType) {
	              case "boolean":
	                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
	                break;
	              case "number":
	                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
	                break;
	              default:
	                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
	            }
	          }
	      }
	      if (!this.match(8)) {
	        this.expect(12);
	      }
	    }
	    return {
	      members,
	      hasUnknownMembers
	    };
	  }
	  flowEnumStringMembers(initializedMembers, defaultedMembers, {
	    enumName
	  }) {
	    if (initializedMembers.length === 0) {
	      return defaultedMembers;
	    } else if (defaultedMembers.length === 0) {
	      return initializedMembers;
	    } else if (defaultedMembers.length > initializedMembers.length) {
	      for (const member of initializedMembers) {
	        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
	          enumName
	        });
	      }
	      return defaultedMembers;
	    } else {
	      for (const member of defaultedMembers) {
	        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
	          enumName
	        });
	      }
	      return initializedMembers;
	    }
	  }
	  flowEnumParseExplicitType({
	    enumName
	  }) {
	    if (!this.eatContextual(102)) return null;
	    if (!tokenIsIdentifier(this.state.type)) {
	      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
	        enumName
	      });
	    }
	    const {
	      value
	    } = this.state;
	    this.next();
	    if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
	      this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
	        enumName,
	        invalidEnumType: value
	      });
	    }
	    return value;
	  }
	  flowEnumBody(node, id) {
	    const enumName = id.name;
	    const nameLoc = id.loc.start;
	    const explicitType = this.flowEnumParseExplicitType({
	      enumName
	    });
	    this.expect(5);
	    const {
	      members,
	      hasUnknownMembers
	    } = this.flowEnumMembers({
	      enumName,
	      explicitType
	    });
	    node.hasUnknownMembers = hasUnknownMembers;
	    switch (explicitType) {
	      case "boolean":
	        node.explicitType = true;
	        node.members = members.booleanMembers;
	        this.expect(8);
	        return this.finishNode(node, "EnumBooleanBody");
	      case "number":
	        node.explicitType = true;
	        node.members = members.numberMembers;
	        this.expect(8);
	        return this.finishNode(node, "EnumNumberBody");
	      case "string":
	        node.explicitType = true;
	        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
	          enumName
	        });
	        this.expect(8);
	        return this.finishNode(node, "EnumStringBody");
	      case "symbol":
	        node.members = members.defaultedMembers;
	        this.expect(8);
	        return this.finishNode(node, "EnumSymbolBody");
	      default:
	        {
	          const empty = () => {
	            node.members = [];
	            this.expect(8);
	            return this.finishNode(node, "EnumStringBody");
	          };
	          node.explicitType = false;
	          const boolsLen = members.booleanMembers.length;
	          const numsLen = members.numberMembers.length;
	          const strsLen = members.stringMembers.length;
	          const defaultedLen = members.defaultedMembers.length;
	          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
	            return empty();
	          } else if (!boolsLen && !numsLen) {
	            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
	              enumName
	            });
	            this.expect(8);
	            return this.finishNode(node, "EnumStringBody");
	          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
	            for (const member of members.defaultedMembers) {
	              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
	                enumName,
	                memberName: member.id.name
	              });
	            }
	            node.members = members.booleanMembers;
	            this.expect(8);
	            return this.finishNode(node, "EnumBooleanBody");
	          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
	            for (const member of members.defaultedMembers) {
	              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
	                enumName,
	                memberName: member.id.name
	              });
	            }
	            node.members = members.numberMembers;
	            this.expect(8);
	            return this.finishNode(node, "EnumNumberBody");
	          } else {
	            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {
	              enumName
	            });
	            return empty();
	          }
	        }
	    }
	  }
	  flowParseEnumDeclaration(node) {
	    const id = this.parseIdentifier();
	    node.id = id;
	    node.body = this.flowEnumBody(this.startNode(), id);
	    return this.finishNode(node, "EnumDeclaration");
	  }
	  isLookaheadToken_lt() {
	    const next = this.nextTokenStart();
	    if (this.input.charCodeAt(next) === 60) {
	      const afterNext = this.input.charCodeAt(next + 1);
	      return afterNext !== 60 && afterNext !== 61;
	    }
	    return false;
	  }
	  maybeUnwrapTypeCastExpression(node) {
	    return node.type === "TypeCastExpression" ? node.expression : node;
	  }
	};
	const entities = {
	  __proto__: null,
	  quot: "\u0022",
	  amp: "&",
	  apos: "\u0027",
	  lt: "<",
	  gt: ">",
	  nbsp: "\u00A0",
	  iexcl: "\u00A1",
	  cent: "\u00A2",
	  pound: "\u00A3",
	  curren: "\u00A4",
	  yen: "\u00A5",
	  brvbar: "\u00A6",
	  sect: "\u00A7",
	  uml: "\u00A8",
	  copy: "\u00A9",
	  ordf: "\u00AA",
	  laquo: "\u00AB",
	  not: "\u00AC",
	  shy: "\u00AD",
	  reg: "\u00AE",
	  macr: "\u00AF",
	  deg: "\u00B0",
	  plusmn: "\u00B1",
	  sup2: "\u00B2",
	  sup3: "\u00B3",
	  acute: "\u00B4",
	  micro: "\u00B5",
	  para: "\u00B6",
	  middot: "\u00B7",
	  cedil: "\u00B8",
	  sup1: "\u00B9",
	  ordm: "\u00BA",
	  raquo: "\u00BB",
	  frac14: "\u00BC",
	  frac12: "\u00BD",
	  frac34: "\u00BE",
	  iquest: "\u00BF",
	  Agrave: "\u00C0",
	  Aacute: "\u00C1",
	  Acirc: "\u00C2",
	  Atilde: "\u00C3",
	  Auml: "\u00C4",
	  Aring: "\u00C5",
	  AElig: "\u00C6",
	  Ccedil: "\u00C7",
	  Egrave: "\u00C8",
	  Eacute: "\u00C9",
	  Ecirc: "\u00CA",
	  Euml: "\u00CB",
	  Igrave: "\u00CC",
	  Iacute: "\u00CD",
	  Icirc: "\u00CE",
	  Iuml: "\u00CF",
	  ETH: "\u00D0",
	  Ntilde: "\u00D1",
	  Ograve: "\u00D2",
	  Oacute: "\u00D3",
	  Ocirc: "\u00D4",
	  Otilde: "\u00D5",
	  Ouml: "\u00D6",
	  times: "\u00D7",
	  Oslash: "\u00D8",
	  Ugrave: "\u00D9",
	  Uacute: "\u00DA",
	  Ucirc: "\u00DB",
	  Uuml: "\u00DC",
	  Yacute: "\u00DD",
	  THORN: "\u00DE",
	  szlig: "\u00DF",
	  agrave: "\u00E0",
	  aacute: "\u00E1",
	  acirc: "\u00E2",
	  atilde: "\u00E3",
	  auml: "\u00E4",
	  aring: "\u00E5",
	  aelig: "\u00E6",
	  ccedil: "\u00E7",
	  egrave: "\u00E8",
	  eacute: "\u00E9",
	  ecirc: "\u00EA",
	  euml: "\u00EB",
	  igrave: "\u00EC",
	  iacute: "\u00ED",
	  icirc: "\u00EE",
	  iuml: "\u00EF",
	  eth: "\u00F0",
	  ntilde: "\u00F1",
	  ograve: "\u00F2",
	  oacute: "\u00F3",
	  ocirc: "\u00F4",
	  otilde: "\u00F5",
	  ouml: "\u00F6",
	  divide: "\u00F7",
	  oslash: "\u00F8",
	  ugrave: "\u00F9",
	  uacute: "\u00FA",
	  ucirc: "\u00FB",
	  uuml: "\u00FC",
	  yacute: "\u00FD",
	  thorn: "\u00FE",
	  yuml: "\u00FF",
	  OElig: "\u0152",
	  oelig: "\u0153",
	  Scaron: "\u0160",
	  scaron: "\u0161",
	  Yuml: "\u0178",
	  fnof: "\u0192",
	  circ: "\u02C6",
	  tilde: "\u02DC",
	  Alpha: "\u0391",
	  Beta: "\u0392",
	  Gamma: "\u0393",
	  Delta: "\u0394",
	  Epsilon: "\u0395",
	  Zeta: "\u0396",
	  Eta: "\u0397",
	  Theta: "\u0398",
	  Iota: "\u0399",
	  Kappa: "\u039A",
	  Lambda: "\u039B",
	  Mu: "\u039C",
	  Nu: "\u039D",
	  Xi: "\u039E",
	  Omicron: "\u039F",
	  Pi: "\u03A0",
	  Rho: "\u03A1",
	  Sigma: "\u03A3",
	  Tau: "\u03A4",
	  Upsilon: "\u03A5",
	  Phi: "\u03A6",
	  Chi: "\u03A7",
	  Psi: "\u03A8",
	  Omega: "\u03A9",
	  alpha: "\u03B1",
	  beta: "\u03B2",
	  gamma: "\u03B3",
	  delta: "\u03B4",
	  epsilon: "\u03B5",
	  zeta: "\u03B6",
	  eta: "\u03B7",
	  theta: "\u03B8",
	  iota: "\u03B9",
	  kappa: "\u03BA",
	  lambda: "\u03BB",
	  mu: "\u03BC",
	  nu: "\u03BD",
	  xi: "\u03BE",
	  omicron: "\u03BF",
	  pi: "\u03C0",
	  rho: "\u03C1",
	  sigmaf: "\u03C2",
	  sigma: "\u03C3",
	  tau: "\u03C4",
	  upsilon: "\u03C5",
	  phi: "\u03C6",
	  chi: "\u03C7",
	  psi: "\u03C8",
	  omega: "\u03C9",
	  thetasym: "\u03D1",
	  upsih: "\u03D2",
	  piv: "\u03D6",
	  ensp: "\u2002",
	  emsp: "\u2003",
	  thinsp: "\u2009",
	  zwnj: "\u200C",
	  zwj: "\u200D",
	  lrm: "\u200E",
	  rlm: "\u200F",
	  ndash: "\u2013",
	  mdash: "\u2014",
	  lsquo: "\u2018",
	  rsquo: "\u2019",
	  sbquo: "\u201A",
	  ldquo: "\u201C",
	  rdquo: "\u201D",
	  bdquo: "\u201E",
	  dagger: "\u2020",
	  Dagger: "\u2021",
	  bull: "\u2022",
	  hellip: "\u2026",
	  permil: "\u2030",
	  prime: "\u2032",
	  Prime: "\u2033",
	  lsaquo: "\u2039",
	  rsaquo: "\u203A",
	  oline: "\u203E",
	  frasl: "\u2044",
	  euro: "\u20AC",
	  image: "\u2111",
	  weierp: "\u2118",
	  real: "\u211C",
	  trade: "\u2122",
	  alefsym: "\u2135",
	  larr: "\u2190",
	  uarr: "\u2191",
	  rarr: "\u2192",
	  darr: "\u2193",
	  harr: "\u2194",
	  crarr: "\u21B5",
	  lArr: "\u21D0",
	  uArr: "\u21D1",
	  rArr: "\u21D2",
	  dArr: "\u21D3",
	  hArr: "\u21D4",
	  forall: "\u2200",
	  part: "\u2202",
	  exist: "\u2203",
	  empty: "\u2205",
	  nabla: "\u2207",
	  isin: "\u2208",
	  notin: "\u2209",
	  ni: "\u220B",
	  prod: "\u220F",
	  sum: "\u2211",
	  minus: "\u2212",
	  lowast: "\u2217",
	  radic: "\u221A",
	  prop: "\u221D",
	  infin: "\u221E",
	  ang: "\u2220",
	  and: "\u2227",
	  or: "\u2228",
	  cap: "\u2229",
	  cup: "\u222A",
	  int: "\u222B",
	  there4: "\u2234",
	  sim: "\u223C",
	  cong: "\u2245",
	  asymp: "\u2248",
	  ne: "\u2260",
	  equiv: "\u2261",
	  le: "\u2264",
	  ge: "\u2265",
	  sub: "\u2282",
	  sup: "\u2283",
	  nsub: "\u2284",
	  sube: "\u2286",
	  supe: "\u2287",
	  oplus: "\u2295",
	  otimes: "\u2297",
	  perp: "\u22A5",
	  sdot: "\u22C5",
	  lceil: "\u2308",
	  rceil: "\u2309",
	  lfloor: "\u230A",
	  rfloor: "\u230B",
	  lang: "\u2329",
	  rang: "\u232A",
	  loz: "\u25CA",
	  spades: "\u2660",
	  clubs: "\u2663",
	  hearts: "\u2665",
	  diams: "\u2666"
	};
	const JsxErrors = ParseErrorEnum`jsx`({
	  AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
	  MissingClosingTagElement: ({
	    openingTagName
	  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
	  MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
	  UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
	  UnexpectedToken: ({
	    unexpected,
	    HTMLEntity
	  }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
	  UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
	  UnterminatedJsxContent: "Unterminated JSX contents.",
	  UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
	});
	function isFragment(object) {
	  return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
	}
	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }
	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }
	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	  throw new Error("Node had unexpected type: " + object.type);
	}
	var jsx = superClass => class JSXParserMixin extends superClass {
	  jsxReadToken() {
	    let out = "";
	    let chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
	      }
	      const ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 60:
	        case 123:
	          if (this.state.pos === this.state.start) {
	            if (ch === 60 && this.state.canStartJSXElement) {
	              ++this.state.pos;
	              this.finishToken(142);
	            } else {
	              super.getTokenFromCode(ch);
	            }
	            return;
	          }
	          out += this.input.slice(chunkStart, this.state.pos);
	          this.finishToken(141, out);
	          return;
	        case 38:
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadEntity();
	          chunkStart = this.state.pos;
	          break;
	        case 62:
	        case 125:
	        default:
	          if (isNewLine(ch)) {
	            out += this.input.slice(chunkStart, this.state.pos);
	            out += this.jsxReadNewLine(true);
	            chunkStart = this.state.pos;
	          } else {
	            ++this.state.pos;
	          }
	      }
	    }
	  }
	  jsxReadNewLine(normalizeCRLF) {
	    const ch = this.input.charCodeAt(this.state.pos);
	    let out;
	    ++this.state.pos;
	    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	      ++this.state.pos;
	      out = normalizeCRLF ? "\n" : "\r\n";
	    } else {
	      out = String.fromCharCode(ch);
	    }
	    ++this.state.curLine;
	    this.state.lineStart = this.state.pos;
	    return out;
	  }
	  jsxReadString(quote) {
	    let out = "";
	    let chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(Errors.UnterminatedString, this.state.startLoc);
	      }
	      const ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 38) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	      } else if (isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadNewLine(false);
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    this.finishToken(133, out);
	  }
	  jsxReadEntity() {
	    const startPos = ++this.state.pos;
	    if (this.codePointAtPos(this.state.pos) === 35) {
	      ++this.state.pos;
	      let radix = 10;
	      if (this.codePointAtPos(this.state.pos) === 120) {
	        radix = 16;
	        ++this.state.pos;
	      }
	      const codePoint = this.readInt(radix, undefined, false, "bail");
	      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
	        ++this.state.pos;
	        return String.fromCodePoint(codePoint);
	      }
	    } else {
	      let count = 0;
	      let semi = false;
	      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59)) {
	        ++this.state.pos;
	      }
	      if (semi) {
	        const desc = this.input.slice(startPos, this.state.pos);
	        const entity = entities[desc];
	        ++this.state.pos;
	        if (entity) {
	          return entity;
	        }
	      }
	    }
	    this.state.pos = startPos;
	    return "&";
	  }
	  jsxReadWord() {
	    let ch;
	    const start = this.state.pos;
	    do {
	      ch = this.input.charCodeAt(++this.state.pos);
	    } while (isIdentifierChar(ch) || ch === 45);
	    this.finishToken(140, this.input.slice(start, this.state.pos));
	  }
	  jsxParseIdentifier() {
	    const node = this.startNode();
	    if (this.match(140)) {
	      node.name = this.state.value;
	    } else if (tokenIsKeyword(this.state.type)) {
	      node.name = tokenLabelName(this.state.type);
	    } else {
	      this.unexpected();
	    }
	    this.next();
	    return this.finishNode(node, "JSXIdentifier");
	  }
	  jsxParseNamespacedName() {
	    const startLoc = this.state.startLoc;
	    const name = this.jsxParseIdentifier();
	    if (!this.eat(14)) return name;
	    const node = this.startNodeAt(startLoc);
	    node.namespace = name;
	    node.name = this.jsxParseIdentifier();
	    return this.finishNode(node, "JSXNamespacedName");
	  }
	  jsxParseElementName() {
	    const startLoc = this.state.startLoc;
	    let node = this.jsxParseNamespacedName();
	    if (node.type === "JSXNamespacedName") {
	      return node;
	    }
	    while (this.eat(16)) {
	      const newNode = this.startNodeAt(startLoc);
	      newNode.object = node;
	      newNode.property = this.jsxParseIdentifier();
	      node = this.finishNode(newNode, "JSXMemberExpression");
	    }
	    return node;
	  }
	  jsxParseAttributeValue() {
	    let node;
	    switch (this.state.type) {
	      case 5:
	        node = this.startNode();
	        this.setContext(types.brace);
	        this.next();
	        node = this.jsxParseExpressionContainer(node, types.j_oTag);
	        if (node.expression.type === "JSXEmptyExpression") {
	          this.raise(JsxErrors.AttributeIsEmpty, node);
	        }
	        return node;
	      case 142:
	      case 133:
	        return this.parseExprAtom();
	      default:
	        throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
	    }
	  }
	  jsxParseEmptyExpression() {
	    const node = this.startNodeAt(this.state.lastTokEndLoc);
	    return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
	  }
	  jsxParseSpreadChild(node) {
	    this.next();
	    node.expression = this.parseExpression();
	    this.setContext(types.j_expr);
	    this.state.canStartJSXElement = true;
	    this.expect(8);
	    return this.finishNode(node, "JSXSpreadChild");
	  }
	  jsxParseExpressionContainer(node, previousContext) {
	    if (this.match(8)) {
	      node.expression = this.jsxParseEmptyExpression();
	    } else {
	      const expression = this.parseExpression();
	      node.expression = expression;
	    }
	    this.setContext(previousContext);
	    this.state.canStartJSXElement = true;
	    this.expect(8);
	    return this.finishNode(node, "JSXExpressionContainer");
	  }
	  jsxParseAttribute() {
	    const node = this.startNode();
	    if (this.match(5)) {
	      this.setContext(types.brace);
	      this.next();
	      this.expect(21);
	      node.argument = this.parseMaybeAssignAllowIn();
	      this.setContext(types.j_oTag);
	      this.state.canStartJSXElement = true;
	      this.expect(8);
	      return this.finishNode(node, "JSXSpreadAttribute");
	    }
	    node.name = this.jsxParseNamespacedName();
	    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
	    return this.finishNode(node, "JSXAttribute");
	  }
	  jsxParseOpeningElementAt(startLoc) {
	    const node = this.startNodeAt(startLoc);
	    if (this.eat(143)) {
	      return this.finishNode(node, "JSXOpeningFragment");
	    }
	    node.name = this.jsxParseElementName();
	    return this.jsxParseOpeningElementAfterName(node);
	  }
	  jsxParseOpeningElementAfterName(node) {
	    const attributes = [];
	    while (!this.match(56) && !this.match(143)) {
	      attributes.push(this.jsxParseAttribute());
	    }
	    node.attributes = attributes;
	    node.selfClosing = this.eat(56);
	    this.expect(143);
	    return this.finishNode(node, "JSXOpeningElement");
	  }
	  jsxParseClosingElementAt(startLoc) {
	    const node = this.startNodeAt(startLoc);
	    if (this.eat(143)) {
	      return this.finishNode(node, "JSXClosingFragment");
	    }
	    node.name = this.jsxParseElementName();
	    this.expect(143);
	    return this.finishNode(node, "JSXClosingElement");
	  }
	  jsxParseElementAt(startLoc) {
	    const node = this.startNodeAt(startLoc);
	    const children = [];
	    const openingElement = this.jsxParseOpeningElementAt(startLoc);
	    let closingElement = null;
	    if (!openingElement.selfClosing) {
	      contents: for (;;) {
	        switch (this.state.type) {
	          case 142:
	            startLoc = this.state.startLoc;
	            this.next();
	            if (this.eat(56)) {
	              closingElement = this.jsxParseClosingElementAt(startLoc);
	              break contents;
	            }
	            children.push(this.jsxParseElementAt(startLoc));
	            break;
	          case 141:
	            children.push(this.parseLiteral(this.state.value, "JSXText"));
	            break;
	          case 5:
	            {
	              const node = this.startNode();
	              this.setContext(types.brace);
	              this.next();
	              if (this.match(21)) {
	                children.push(this.jsxParseSpreadChild(node));
	              } else {
	                children.push(this.jsxParseExpressionContainer(node, types.j_expr));
	              }
	              break;
	            }
	          default:
	            this.unexpected();
	        }
	      }
	      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
	        this.raise(JsxErrors.MissingClosingTagFragment, closingElement);
	      } else if (!isFragment(openingElement) && isFragment(closingElement)) {
	        this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
	          openingTagName: getQualifiedJSXName(openingElement.name)
	        });
	      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
	        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
	            openingTagName: getQualifiedJSXName(openingElement.name)
	          });
	        }
	      }
	    }
	    if (isFragment(openingElement)) {
	      node.openingFragment = openingElement;
	      node.closingFragment = closingElement;
	    } else {
	      node.openingElement = openingElement;
	      node.closingElement = closingElement;
	    }
	    node.children = children;
	    if (this.match(47)) {
	      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
	    }
	    return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
	  }
	  jsxParseElement() {
	    const startLoc = this.state.startLoc;
	    this.next();
	    return this.jsxParseElementAt(startLoc);
	  }
	  setContext(newContext) {
	    const {
	      context
	    } = this.state;
	    context[context.length - 1] = newContext;
	  }
	  parseExprAtom(refExpressionErrors) {
	    if (this.match(142)) {
	      return this.jsxParseElement();
	    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
	      this.replaceToken(142);
	      return this.jsxParseElement();
	    } else {
	      return super.parseExprAtom(refExpressionErrors);
	    }
	  }
	  skipSpace() {
	    const curContext = this.curContext();
	    if (!curContext.preserveSpace) super.skipSpace();
	  }
	  getTokenFromCode(code) {
	    const context = this.curContext();
	    if (context === types.j_expr) {
	      this.jsxReadToken();
	      return;
	    }
	    if (context === types.j_oTag || context === types.j_cTag) {
	      if (isIdentifierStart(code)) {
	        this.jsxReadWord();
	        return;
	      }
	      if (code === 62) {
	        ++this.state.pos;
	        this.finishToken(143);
	        return;
	      }
	      if ((code === 34 || code === 39) && context === types.j_oTag) {
	        this.jsxReadString(code);
	        return;
	      }
	    }
	    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
	      ++this.state.pos;
	      this.finishToken(142);
	      return;
	    }
	    super.getTokenFromCode(code);
	  }
	  updateContext(prevType) {
	    const {
	      context,
	      type
	    } = this.state;
	    if (type === 56 && prevType === 142) {
	      context.splice(-2, 2, types.j_cTag);
	      this.state.canStartJSXElement = false;
	    } else if (type === 142) {
	      context.push(types.j_oTag);
	    } else if (type === 143) {
	      const out = context[context.length - 1];
	      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
	        context.pop();
	        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
	      } else {
	        this.setContext(types.j_expr);
	        this.state.canStartJSXElement = true;
	      }
	    } else {
	      this.state.canStartJSXElement = tokenComesBeforeExpression(type);
	    }
	  }
	};
	class TypeScriptScope extends Scope {
	  constructor(...args) {
	    super(...args);
	    this.tsNames = new Map();
	  }
	}
	class TypeScriptScopeHandler extends ScopeHandler {
	  constructor(...args) {
	    super(...args);
	    this.importsStack = [];
	  }
	  createScope(flags) {
	    this.importsStack.push(new Set());
	    return new TypeScriptScope(flags);
	  }
	  enter(flags) {
	    if (flags === 256) {
	      this.importsStack.push(new Set());
	    }
	    super.enter(flags);
	  }
	  exit() {
	    const flags = super.exit();
	    if (flags === 256) {
	      this.importsStack.pop();
	    }
	    return flags;
	  }
	  hasImport(name, allowShadow) {
	    const len = this.importsStack.length;
	    if (this.importsStack[len - 1].has(name)) {
	      return true;
	    }
	    if (!allowShadow && len > 1) {
	      for (let i = 0; i < len - 1; i++) {
	        if (this.importsStack[i].has(name)) return true;
	      }
	    }
	    return false;
	  }
	  declareName(name, bindingType, loc) {
	    if (bindingType & 4096) {
	      if (this.hasImport(name, true)) {
	        this.parser.raise(Errors.VarRedeclaration, loc, {
	          identifierName: name
	        });
	      }
	      this.importsStack[this.importsStack.length - 1].add(name);
	      return;
	    }
	    const scope = this.currentScope();
	    let type = scope.tsNames.get(name) || 0;
	    if (bindingType & 1024) {
	      this.maybeExportDefined(scope, name);
	      scope.tsNames.set(name, type | 16);
	      return;
	    }
	    super.declareName(name, bindingType, loc);
	    if (bindingType & 2) {
	      if (!(bindingType & 1)) {
	        this.checkRedeclarationInScope(scope, name, bindingType, loc);
	        this.maybeExportDefined(scope, name);
	      }
	      type = type | 1;
	    }
	    if (bindingType & 256) {
	      type = type | 2;
	    }
	    if (bindingType & 512) {
	      type = type | 4;
	    }
	    if (bindingType & 128) {
	      type = type | 8;
	    }
	    if (type) scope.tsNames.set(name, type);
	  }
	  isRedeclaredInScope(scope, name, bindingType) {
	    const type = scope.tsNames.get(name);
	    if ((type & 2) > 0) {
	      if (bindingType & 256) {
	        const isConst = !!(bindingType & 512);
	        const wasConst = (type & 4) > 0;
	        return isConst !== wasConst;
	      }
	      return true;
	    }
	    if (bindingType & 128 && (type & 8) > 0) {
	      if (scope.names.get(name) & 2) {
	        return !!(bindingType & 1);
	      } else {
	        return false;
	      }
	    }
	    if (bindingType & 2 && (type & 1) > 0) {
	      return true;
	    }
	    return super.isRedeclaredInScope(scope, name, bindingType);
	  }
	  checkLocalExport(id) {
	    const {
	      name
	    } = id;
	    if (this.hasImport(name)) return;
	    const len = this.scopeStack.length;
	    for (let i = len - 1; i >= 0; i--) {
	      const scope = this.scopeStack[i];
	      const type = scope.tsNames.get(name);
	      if ((type & 1) > 0 || (type & 16) > 0) {
	        return;
	      }
	    }
	    super.checkLocalExport(id);
	  }
	}
	const getOwn$1 = (object, key) => hasOwnProperty.call(object, key) && object[key];
	const unwrapParenthesizedExpression = node => {
	  return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
	};
	class LValParser extends NodeUtils {
	  toAssignable(node, isLHS = false) {
	    var _node$extra, _node$extra3;
	    let parenthesized = undefined;
	    if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
	      parenthesized = unwrapParenthesizedExpression(node);
	      if (isLHS) {
	        if (parenthesized.type === "Identifier") {
	          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);
	        } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
	          this.raise(Errors.InvalidParenthesizedAssignment, node);
	        }
	      } else {
	        this.raise(Errors.InvalidParenthesizedAssignment, node);
	      }
	    }
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	      case "RestElement":
	        break;
	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
	          var _node$extra2;
	          const prop = node.properties[i];
	          const isLast = i === last;
	          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
	          if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
	            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
	          }
	        }
	        break;
	      case "ObjectProperty":
	        {
	          const {
	            key,
	            value
	          } = node;
	          if (this.isPrivateName(key)) {
	            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
	          }
	          this.toAssignable(value, isLHS);
	          break;
	        }
	      case "SpreadElement":
	        {
	          throw new Error("Internal @babel/parser error (this is a bug, please report it)." + " SpreadElement should be converted by .toAssignable's caller.");
	        }
	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
	        break;
	      case "AssignmentExpression":
	        if (node.operator !== "=") {
	          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);
	        }
	        node.type = "AssignmentPattern";
	        delete node.operator;
	        this.toAssignable(node.left, isLHS);
	        break;
	      case "ParenthesizedExpression":
	        this.toAssignable(parenthesized, isLHS);
	        break;
	    }
	  }
	  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
	    if (prop.type === "ObjectMethod") {
	      this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
	    } else if (prop.type === "SpreadElement") {
	      prop.type = "RestElement";
	      const arg = prop.argument;
	      this.checkToRestConversion(arg, false);
	      this.toAssignable(arg, isLHS);
	      if (!isLast) {
	        this.raise(Errors.RestTrailingComma, prop);
	      }
	    } else {
	      this.toAssignable(prop, isLHS);
	    }
	  }
	  toAssignableList(exprList, trailingCommaLoc, isLHS) {
	    const end = exprList.length - 1;
	    for (let i = 0; i <= end; i++) {
	      const elt = exprList[i];
	      if (!elt) continue;
	      if (elt.type === "SpreadElement") {
	        elt.type = "RestElement";
	        const arg = elt.argument;
	        this.checkToRestConversion(arg, true);
	        this.toAssignable(arg, isLHS);
	      } else {
	        this.toAssignable(elt, isLHS);
	      }
	      if (elt.type === "RestElement") {
	        if (i < end) {
	          this.raise(Errors.RestTrailingComma, elt);
	        } else if (trailingCommaLoc) {
	          this.raise(Errors.RestTrailingComma, trailingCommaLoc);
	        }
	      }
	    }
	  }
	  isAssignable(node, isBinding) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	      case "RestElement":
	        return true;
	      case "ObjectExpression":
	        {
	          const last = node.properties.length - 1;
	          return node.properties.every((prop, i) => {
	            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
	          });
	        }
	      case "ObjectProperty":
	        return this.isAssignable(node.value);
	      case "SpreadElement":
	        return this.isAssignable(node.argument);
	      case "ArrayExpression":
	        return node.elements.every(element => element === null || this.isAssignable(element));
	      case "AssignmentExpression":
	        return node.operator === "=";
	      case "ParenthesizedExpression":
	        return this.isAssignable(node.expression);
	      case "MemberExpression":
	      case "OptionalMemberExpression":
	        return !isBinding;
	      default:
	        return false;
	    }
	  }
	  toReferencedList(exprList, isParenthesizedExpr) {
	    return exprList;
	  }
	  toReferencedListDeep(exprList, isParenthesizedExpr) {
	    this.toReferencedList(exprList, isParenthesizedExpr);
	    for (const expr of exprList) {
	      if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
	        this.toReferencedListDeep(expr.elements);
	      }
	    }
	  }
	  parseSpread(refExpressionErrors) {
	    const node = this.startNode();
	    this.next();
	    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);
	    return this.finishNode(node, "SpreadElement");
	  }
	  parseRestBinding() {
	    const node = this.startNode();
	    this.next();
	    node.argument = this.parseBindingAtom();
	    return this.finishNode(node, "RestElement");
	  }
	  parseBindingAtom() {
	    switch (this.state.type) {
	      case 0:
	        {
	          const node = this.startNode();
	          this.next();
	          node.elements = this.parseBindingList(3, 93, 1);
	          return this.finishNode(node, "ArrayPattern");
	        }
	      case 5:
	        return this.parseObjectLike(8, true);
	    }
	    return this.parseIdentifier();
	  }
	  parseBindingList(close, closeCharCode, flags) {
	    const allowEmpty = flags & 1;
	    const elts = [];
	    let first = true;
	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(12);
	      }
	      if (allowEmpty && this.match(12)) {
	        elts.push(null);
	      } else if (this.eat(close)) {
	        break;
	      } else if (this.match(21)) {
	        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
	        if (!this.checkCommaAfterRest(closeCharCode)) {
	          this.expect(close);
	          break;
	        }
	      } else {
	        const decorators = [];
	        if (this.match(26) && this.hasPlugin("decorators")) {
	          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);
	        }
	        while (this.match(26)) {
	          decorators.push(this.parseDecorator());
	        }
	        elts.push(this.parseAssignableListItem(flags, decorators));
	      }
	    }
	    return elts;
	  }
	  parseBindingRestProperty(prop) {
	    this.next();
	    prop.argument = this.parseIdentifier();
	    this.checkCommaAfterRest(125);
	    return this.finishNode(prop, "RestElement");
	  }
	  parseBindingProperty() {
	    const {
	      type,
	      startLoc
	    } = this.state;
	    if (type === 21) {
	      return this.parseBindingRestProperty(this.startNode());
	    }
	    const prop = this.startNode();
	    if (type === 138) {
	      this.expectPlugin("destructuringPrivate", startLoc);
	      this.classScope.usePrivateName(this.state.value, startLoc);
	      prop.key = this.parsePrivateName();
	    } else {
	      this.parsePropertyName(prop);
	    }
	    prop.method = false;
	    return this.parseObjPropValue(prop, startLoc, false, false, true, false);
	  }
	  parseAssignableListItem(flags, decorators) {
	    const left = this.parseMaybeDefault();
	    this.parseAssignableListItemTypes(left, flags);
	    const elt = this.parseMaybeDefault(left.loc.start, left);
	    if (decorators.length) {
	      left.decorators = decorators;
	    }
	    return elt;
	  }
	  parseAssignableListItemTypes(param, flags) {
	    return param;
	  }
	  parseMaybeDefault(startLoc, left) {
	    var _startLoc, _left;
	    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
	    left = (_left = left) != null ? _left : this.parseBindingAtom();
	    if (!this.eat(29)) return left;
	    const node = this.startNodeAt(startLoc);
	    node.left = left;
	    node.right = this.parseMaybeAssignAllowIn();
	    return this.finishNode(node, "AssignmentPattern");
	  }
	  isValidLVal(type, isUnparenthesizedInAssign, binding) {
	    return getOwn$1({
	      AssignmentPattern: "left",
	      RestElement: "argument",
	      ObjectProperty: "value",
	      ParenthesizedExpression: "expression",
	      ArrayPattern: "elements",
	      ObjectPattern: "properties"
	    }, type);
	  }
	  isOptionalMemberExpression(expression) {
	    return expression.type === "OptionalMemberExpression";
	  }
	  checkLVal(expression, {
	    in: ancestor,
	    binding = 64,
	    checkClashes = false,
	    strictModeChanged = false,
	    hasParenthesizedAncestor = false
	  }) {
	    var _expression$extra;
	    const type = expression.type;
	    if (this.isObjectMethod(expression)) return;
	    const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
	    if (isOptionalMemberExpression || type === "MemberExpression") {
	      if (isOptionalMemberExpression) {
	        this.expectPlugin("optionalChainingAssign", expression.loc.start);
	        if (ancestor.type !== "AssignmentExpression") {
	          this.raise(Errors.InvalidLhsOptionalChaining, expression, {
	            ancestor
	          });
	        }
	      }
	      if (binding !== 64) {
	        this.raise(Errors.InvalidPropertyBindingPattern, expression);
	      }
	      return;
	    }
	    if (type === "Identifier") {
	      this.checkIdentifier(expression, binding, strictModeChanged);
	      const {
	        name
	      } = expression;
	      if (checkClashes) {
	        if (checkClashes.has(name)) {
	          this.raise(Errors.ParamDupe, expression);
	        } else {
	          checkClashes.add(name);
	        }
	      }
	      return;
	    }
	    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
	    if (validity === true) return;
	    if (validity === false) {
	      const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
	      this.raise(ParseErrorClass, expression, {
	        ancestor
	      });
	      return;
	    }
	    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
	    const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
	      type
	    } : ancestor;
	    for (const child of [].concat(expression[key])) {
	      if (child) {
	        this.checkLVal(child, {
	          in: nextAncestor,
	          binding,
	          checkClashes,
	          strictModeChanged,
	          hasParenthesizedAncestor: isParenthesizedExpression
	        });
	      }
	    }
	  }
	  checkIdentifier(at, bindingType, strictModeChanged = false) {
	    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
	      if (bindingType === 64) {
	        this.raise(Errors.StrictEvalArguments, at, {
	          referenceName: at.name
	        });
	      } else {
	        this.raise(Errors.StrictEvalArgumentsBinding, at, {
	          bindingName: at.name
	        });
	      }
	    }
	    if (bindingType & 8192 && at.name === "let") {
	      this.raise(Errors.LetInLexicalBinding, at);
	    }
	    if (!(bindingType & 64)) {
	      this.declareNameFromIdentifier(at, bindingType);
	    }
	  }
	  declareNameFromIdentifier(identifier, binding) {
	    this.scope.declareName(identifier.name, binding, identifier.loc.start);
	  }
	  checkToRestConversion(node, allowPattern) {
	    switch (node.type) {
	      case "ParenthesizedExpression":
	        this.checkToRestConversion(node.expression, allowPattern);
	        break;
	      case "Identifier":
	      case "MemberExpression":
	        break;
	      case "ArrayExpression":
	      case "ObjectExpression":
	        if (allowPattern) break;
	      default:
	        this.raise(Errors.InvalidRestAssignmentPattern, node);
	    }
	  }
	  checkCommaAfterRest(close) {
	    if (!this.match(12)) {
	      return false;
	    }
	    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);
	    return true;
	  }
	}
	const getOwn = (object, key) => hasOwnProperty.call(object, key) && object[key];
	function nonNull(x) {
	  if (x == null) {
	    throw new Error(`Unexpected ${x} value.`);
	  }
	  return x;
	}
	function assert(x) {
	  if (!x) {
	    throw new Error("Assert fail");
	  }
	}
	const TSErrors = ParseErrorEnum`typescript`({
	  AbstractMethodHasImplementation: ({
	    methodName
	  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
	  AbstractPropertyHasInitializer: ({
	    propertyName
	  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
	  AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
	  AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
	  AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
	  ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
	  ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
	  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
	  ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
	  DeclareAccessor: ({
	    kind
	  }) => `'declare' is not allowed in ${kind}ters.`,
	  DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
	  DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
	  DuplicateAccessibilityModifier: ({
	    modifier
	  }) => `Accessibility modifier already seen.`,
	  DuplicateModifier: ({
	    modifier
	  }) => `Duplicate modifier: '${modifier}'.`,
	  EmptyHeritageClauseType: ({
	    token
	  }) => `'${token}' list cannot be empty.`,
	  EmptyTypeArguments: "Type argument list cannot be empty.",
	  EmptyTypeParameters: "Type parameter list cannot be empty.",
	  ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
	  ImportAliasHasImportType: "An import alias can not use 'import type'.",
	  ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
	  IncompatibleModifiers: ({
	    modifiers
	  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
	  IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
	  IndexSignatureHasAccessibility: ({
	    modifier
	  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
	  IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
	  IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
	  IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
	  InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
	  InvalidModifierOnTypeMember: ({
	    modifier
	  }) => `'${modifier}' modifier cannot appear on a type member.`,
	  InvalidModifierOnTypeParameter: ({
	    modifier
	  }) => `'${modifier}' modifier cannot appear on a type parameter.`,
	  InvalidModifierOnTypeParameterPositions: ({
	    modifier
	  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
	  InvalidModifiersOrder: ({
	    orderedModifiers
	  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
	  InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. " + "You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
	  InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
	  MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
	  NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
	  NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
	  OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
	  OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
	  PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
	  PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
	  PrivateElementHasAccessibility: ({
	    modifier
	  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
	  ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
	  ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
	  ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
	  SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
	  SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
	  SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
	  SingleTypeParameterWithoutTrailingComma: ({
	    typeParameterName
	  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
	  StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
	  TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
	  TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
	  TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
	  TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
	  TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
	  UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
	  UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
	  UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
	  UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
	  UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
	  UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
	  UnsupportedSignatureParameterKind: ({
	    type
	  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
	});
	function keywordTypeFromName(value) {
	  switch (value) {
	    case "any":
	      return "TSAnyKeyword";
	    case "boolean":
	      return "TSBooleanKeyword";
	    case "bigint":
	      return "TSBigIntKeyword";
	    case "never":
	      return "TSNeverKeyword";
	    case "number":
	      return "TSNumberKeyword";
	    case "object":
	      return "TSObjectKeyword";
	    case "string":
	      return "TSStringKeyword";
	    case "symbol":
	      return "TSSymbolKeyword";
	    case "undefined":
	      return "TSUndefinedKeyword";
	    case "unknown":
	      return "TSUnknownKeyword";
	    default:
	      return undefined;
	  }
	}
	function tsIsAccessModifier(modifier) {
	  return modifier === "private" || modifier === "public" || modifier === "protected";
	}
	function tsIsVarianceAnnotations(modifier) {
	  return modifier === "in" || modifier === "out";
	}
	var typescript = superClass => class TypeScriptParserMixin extends superClass {
	  constructor(...args) {
	    super(...args);
	    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
	      allowedModifiers: ["in", "out"],
	      disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
	      errorTemplate: TSErrors.InvalidModifierOnTypeParameter
	    });
	    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
	      allowedModifiers: ["const"],
	      disallowedModifiers: ["in", "out"],
	      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
	    });
	    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
	      allowedModifiers: ["in", "out", "const"],
	      disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
	      errorTemplate: TSErrors.InvalidModifierOnTypeParameter
	    });
	  }
	  getScopeHandler() {
	    return TypeScriptScopeHandler;
	  }
	  tsIsIdentifier() {
	    return tokenIsIdentifier(this.state.type);
	  }
	  tsTokenCanFollowModifier() {
	    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
	  }
	  tsNextTokenCanFollowModifier() {
	    this.next();
	    return this.tsTokenCanFollowModifier();
	  }
	  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
	    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
	      return undefined;
	    }
	    const modifier = this.state.value;
	    if (allowedModifiers.includes(modifier)) {
	      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
	        return undefined;
	      }
	      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
	        return modifier;
	      }
	    }
	    return undefined;
	  }
	  tsParseModifiers({
	    allowedModifiers,
	    disallowedModifiers,
	    stopOnStartOfClassStaticBlock,
	    errorTemplate = TSErrors.InvalidModifierOnTypeMember
	  }, modified) {
	    const enforceOrder = (loc, modifier, before, after) => {
	      if (modifier === before && modified[after]) {
	        this.raise(TSErrors.InvalidModifiersOrder, loc, {
	          orderedModifiers: [before, after]
	        });
	      }
	    };
	    const incompatible = (loc, modifier, mod1, mod2) => {
	      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
	        this.raise(TSErrors.IncompatibleModifiers, loc, {
	          modifiers: [mod1, mod2]
	        });
	      }
	    };
	    for (;;) {
	      const {
	        startLoc
	      } = this.state;
	      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
	      if (!modifier) break;
	      if (tsIsAccessModifier(modifier)) {
	        if (modified.accessibility) {
	          this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {
	            modifier
	          });
	        } else {
	          enforceOrder(startLoc, modifier, modifier, "override");
	          enforceOrder(startLoc, modifier, modifier, "static");
	          enforceOrder(startLoc, modifier, modifier, "readonly");
	          modified.accessibility = modifier;
	        }
	      } else if (tsIsVarianceAnnotations(modifier)) {
	        if (modified[modifier]) {
	          this.raise(TSErrors.DuplicateModifier, startLoc, {
	            modifier
	          });
	        }
	        modified[modifier] = true;
	        enforceOrder(startLoc, modifier, "in", "out");
	      } else {
	        if (hasOwnProperty.call(modified, modifier)) {
	          this.raise(TSErrors.DuplicateModifier, startLoc, {
	            modifier
	          });
	        } else {
	          enforceOrder(startLoc, modifier, "static", "readonly");
	          enforceOrder(startLoc, modifier, "static", "override");
	          enforceOrder(startLoc, modifier, "override", "readonly");
	          enforceOrder(startLoc, modifier, "abstract", "override");
	          incompatible(startLoc, modifier, "declare", "override");
	          incompatible(startLoc, modifier, "static", "abstract");
	        }
	        modified[modifier] = true;
	      }
	      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
	        this.raise(errorTemplate, startLoc, {
	          modifier
	        });
	      }
	    }
	  }
	  tsIsListTerminator(kind) {
	    switch (kind) {
	      case "EnumMembers":
	      case "TypeMembers":
	        return this.match(8);
	      case "HeritageClauseElement":
	        return this.match(5);
	      case "TupleElementTypes":
	        return this.match(3);
	      case "TypeParametersOrArguments":
	        return this.match(48);
	    }
	  }
	  tsParseList(kind, parseElement) {
	    const result = [];
	    while (!this.tsIsListTerminator(kind)) {
	      result.push(parseElement());
	    }
	    return result;
	  }
	  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
	    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
	  }
	  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
	    const result = [];
	    let trailingCommaPos = -1;
	    for (;;) {
	      if (this.tsIsListTerminator(kind)) {
	        break;
	      }
	      trailingCommaPos = -1;
	      const element = parseElement();
	      if (element == null) {
	        return undefined;
	      }
	      result.push(element);
	      if (this.eat(12)) {
	        trailingCommaPos = this.state.lastTokStartLoc.index;
	        continue;
	      }
	      if (this.tsIsListTerminator(kind)) {
	        break;
	      }
	      if (expectSuccess) {
	        this.expect(12);
	      }
	      return undefined;
	    }
	    if (refTrailingCommaPos) {
	      refTrailingCommaPos.value = trailingCommaPos;
	    }
	    return result;
	  }
	  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
	    if (!skipFirstToken) {
	      if (bracket) {
	        this.expect(0);
	      } else {
	        this.expect(47);
	      }
	    }
	    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
	    if (bracket) {
	      this.expect(3);
	    } else {
	      this.expect(48);
	    }
	    return result;
	  }
	  tsParseImportType() {
	    const node = this.startNode();
	    this.expect(83);
	    this.expect(10);
	    if (!this.match(133)) {
	      this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);
	    }
	    node.argument = super.parseExprAtom();
	    if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
	      node.options = null;
	    }
	    if (this.eat(12)) {
	      this.expectImportAttributesPlugin();
	      if (!this.match(11)) {
	        node.options = super.parseMaybeAssignAllowIn();
	        this.eat(12);
	      }
	    }
	    this.expect(11);
	    if (this.eat(16)) {
	      node.qualifier = this.tsParseEntityName();
	    }
	    if (this.match(47)) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }
	    return this.finishNode(node, "TSImportType");
	  }
	  tsParseEntityName(allowReservedWords = true) {
	    let entity = this.parseIdentifier(allowReservedWords);
	    while (this.eat(16)) {
	      const node = this.startNodeAtNode(entity);
	      node.left = entity;
	      node.right = this.parseIdentifier(allowReservedWords);
	      entity = this.finishNode(node, "TSQualifiedName");
	    }
	    return entity;
	  }
	  tsParseTypeReference() {
	    const node = this.startNode();
	    node.typeName = this.tsParseEntityName();
	    if (!this.hasPrecedingLineBreak() && this.match(47)) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }
	    return this.finishNode(node, "TSTypeReference");
	  }
	  tsParseThisTypePredicate(lhs) {
	    this.next();
	    const node = this.startNodeAtNode(lhs);
	    node.parameterName = lhs;
	    node.typeAnnotation = this.tsParseTypeAnnotation(false);
	    node.asserts = false;
	    return this.finishNode(node, "TSTypePredicate");
	  }
	  tsParseThisTypeNode() {
	    const node = this.startNode();
	    this.next();
	    return this.finishNode(node, "TSThisType");
	  }
	  tsParseTypeQuery() {
	    const node = this.startNode();
	    this.expect(87);
	    if (this.match(83)) {
	      node.exprName = this.tsParseImportType();
	    } else {
	      node.exprName = this.tsParseEntityName();
	    }
	    if (!this.hasPrecedingLineBreak() && this.match(47)) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }
	    return this.finishNode(node, "TSTypeQuery");
	  }
	  tsParseTypeParameter(parseModifiers) {
	    const node = this.startNode();
	    parseModifiers(node);
	    node.name = this.tsParseTypeParameterName();
	    node.constraint = this.tsEatThenParseType(81);
	    node.default = this.tsEatThenParseType(29);
	    return this.finishNode(node, "TSTypeParameter");
	  }
	  tsTryParseTypeParameters(parseModifiers) {
	    if (this.match(47)) {
	      return this.tsParseTypeParameters(parseModifiers);
	    }
	  }
	  tsParseTypeParameters(parseModifiers) {
	    const node = this.startNode();
	    if (this.match(47) || this.match(142)) {
	      this.next();
	    } else {
	      this.unexpected();
	    }
	    const refTrailingCommaPos = {
	      value: -1
	    };
	    node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
	    if (node.params.length === 0) {
	      this.raise(TSErrors.EmptyTypeParameters, node);
	    }
	    if (refTrailingCommaPos.value !== -1) {
	      this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
	    }
	    return this.finishNode(node, "TSTypeParameterDeclaration");
	  }
	  tsFillSignature(returnToken, signature) {
	    const returnTokenRequired = returnToken === 19;
	    const paramsKey = "parameters";
	    const returnTypeKey = "typeAnnotation";
	    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
	    this.expect(10);
	    signature[paramsKey] = this.tsParseBindingListForSignature();
	    if (returnTokenRequired) {
	      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
	    } else if (this.match(returnToken)) {
	      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
	    }
	  }
	  tsParseBindingListForSignature() {
	    const list = super.parseBindingList(11, 41, 2);
	    for (const pattern of list) {
	      const {
	        type
	      } = pattern;
	      if (type === "AssignmentPattern" || type === "TSParameterProperty") {
	        this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {
	          type
	        });
	      }
	    }
	    return list;
	  }
	  tsParseTypeMemberSemicolon() {
	    if (!this.eat(12) && !this.isLineTerminator()) {
	      this.expect(13);
	    }
	  }
	  tsParseSignatureMember(kind, node) {
	    this.tsFillSignature(14, node);
	    this.tsParseTypeMemberSemicolon();
	    return this.finishNode(node, kind);
	  }
	  tsIsUnambiguouslyIndexSignature() {
	    this.next();
	    if (tokenIsIdentifier(this.state.type)) {
	      this.next();
	      return this.match(14);
	    }
	    return false;
	  }
	  tsTryParseIndexSignature(node) {
	    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
	      return;
	    }
	    this.expect(0);
	    const id = this.parseIdentifier();
	    id.typeAnnotation = this.tsParseTypeAnnotation();
	    this.resetEndLocation(id);
	    this.expect(3);
	    node.parameters = [id];
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) node.typeAnnotation = type;
	    this.tsParseTypeMemberSemicolon();
	    return this.finishNode(node, "TSIndexSignature");
	  }
	  tsParsePropertyOrMethodSignature(node, readonly) {
	    if (this.eat(17)) node.optional = true;
	    const nodeAny = node;
	    if (this.match(10) || this.match(47)) {
	      if (readonly) {
	        this.raise(TSErrors.ReadonlyForMethodSignature, node);
	      }
	      const method = nodeAny;
	      if (method.kind && this.match(47)) {
	        this.raise(TSErrors.AccesorCannotHaveTypeParameters, this.state.curPosition());
	      }
	      this.tsFillSignature(14, method);
	      this.tsParseTypeMemberSemicolon();
	      const paramsKey = "parameters";
	      const returnTypeKey = "typeAnnotation";
	      if (method.kind === "get") {
	        if (method[paramsKey].length > 0) {
	          this.raise(Errors.BadGetterArity, this.state.curPosition());
	          if (this.isThisParam(method[paramsKey][0])) {
	            this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
	          }
	        }
	      } else if (method.kind === "set") {
	        if (method[paramsKey].length !== 1) {
	          this.raise(Errors.BadSetterArity, this.state.curPosition());
	        } else {
	          const firstParameter = method[paramsKey][0];
	          if (this.isThisParam(firstParameter)) {
	            this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
	          }
	          if (firstParameter.type === "Identifier" && firstParameter.optional) {
	            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, this.state.curPosition());
	          }
	          if (firstParameter.type === "RestElement") {
	            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, this.state.curPosition());
	          }
	        }
	        if (method[returnTypeKey]) {
	          this.raise(TSErrors.SetAccesorCannotHaveReturnType, method[returnTypeKey]);
	        }
	      } else {
	        method.kind = "method";
	      }
	      return this.finishNode(method, "TSMethodSignature");
	    } else {
	      const property = nodeAny;
	      if (readonly) property.readonly = true;
	      const type = this.tsTryParseTypeAnnotation();
	      if (type) property.typeAnnotation = type;
	      this.tsParseTypeMemberSemicolon();
	      return this.finishNode(property, "TSPropertySignature");
	    }
	  }
	  tsParseTypeMember() {
	    const node = this.startNode();
	    if (this.match(10) || this.match(47)) {
	      return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
	    }
	    if (this.match(77)) {
	      const id = this.startNode();
	      this.next();
	      if (this.match(10) || this.match(47)) {
	        return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
	      } else {
	        node.key = this.createIdentifier(id, "new");
	        return this.tsParsePropertyOrMethodSignature(node, false);
	      }
	    }
	    this.tsParseModifiers({
	      allowedModifiers: ["readonly"],
	      disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
	    }, node);
	    const idx = this.tsTryParseIndexSignature(node);
	    if (idx) {
	      return idx;
	    }
	    super.parsePropertyName(node);
	    if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
	      node.kind = node.key.name;
	      super.parsePropertyName(node);
	    }
	    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
	  }
	  tsParseTypeLiteral() {
	    const node = this.startNode();
	    node.members = this.tsParseObjectTypeMembers();
	    return this.finishNode(node, "TSTypeLiteral");
	  }
	  tsParseObjectTypeMembers() {
	    this.expect(5);
	    const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
	    this.expect(8);
	    return members;
	  }
	  tsIsStartOfMappedType() {
	    this.next();
	    if (this.eat(53)) {
	      return this.isContextual(122);
	    }
	    if (this.isContextual(122)) {
	      this.next();
	    }
	    if (!this.match(0)) {
	      return false;
	    }
	    this.next();
	    if (!this.tsIsIdentifier()) {
	      return false;
	    }
	    this.next();
	    return this.match(58);
	  }
	  tsParseMappedTypeParameter() {
	    const node = this.startNode();
	    node.name = this.tsParseTypeParameterName();
	    node.constraint = this.tsExpectThenParseType(58);
	    return this.finishNode(node, "TSTypeParameter");
	  }
	  tsParseMappedType() {
	    const node = this.startNode();
	    this.expect(5);
	    if (this.match(53)) {
	      node.readonly = this.state.value;
	      this.next();
	      this.expectContextual(122);
	    } else if (this.eatContextual(122)) {
	      node.readonly = true;
	    }
	    this.expect(0);
	    node.typeParameter = this.tsParseMappedTypeParameter();
	    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
	    this.expect(3);
	    if (this.match(53)) {
	      node.optional = this.state.value;
	      this.next();
	      this.expect(17);
	    } else if (this.eat(17)) {
	      node.optional = true;
	    }
	    node.typeAnnotation = this.tsTryParseType();
	    this.semicolon();
	    this.expect(8);
	    return this.finishNode(node, "TSMappedType");
	  }
	  tsParseTupleType() {
	    const node = this.startNode();
	    node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
	    let seenOptionalElement = false;
	    node.elementTypes.forEach(elementNode => {
	      const {
	        type
	      } = elementNode;
	      if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
	        this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);
	      }
	      seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
	    });
	    return this.finishNode(node, "TSTupleType");
	  }
	  tsParseTupleElementType() {
	    const {
	      startLoc
	    } = this.state;
	    const rest = this.eat(21);
	    let labeled;
	    let label;
	    let optional;
	    let type;
	    const isWord = tokenIsKeywordOrIdentifier(this.state.type);
	    const chAfterWord = isWord ? this.lookaheadCharCode() : null;
	    if (chAfterWord === 58) {
	      labeled = true;
	      optional = false;
	      label = this.parseIdentifier(true);
	      this.expect(14);
	      type = this.tsParseType();
	    } else if (chAfterWord === 63) {
	      optional = true;
	      const startLoc = this.state.startLoc;
	      const wordName = this.state.value;
	      const typeOrLabel = this.tsParseNonArrayType();
	      if (this.lookaheadCharCode() === 58) {
	        labeled = true;
	        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);
	        this.expect(17);
	        this.expect(14);
	        type = this.tsParseType();
	      } else {
	        labeled = false;
	        type = typeOrLabel;
	        this.expect(17);
	      }
	    } else {
	      type = this.tsParseType();
	      optional = this.eat(17);
	      labeled = this.eat(14);
	    }
	    if (labeled) {
	      let labeledNode;
	      if (label) {
	        labeledNode = this.startNodeAtNode(label);
	        labeledNode.optional = optional;
	        labeledNode.label = label;
	        labeledNode.elementType = type;
	        if (this.eat(17)) {
	          labeledNode.optional = true;
	          this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);
	        }
	      } else {
	        labeledNode = this.startNodeAtNode(type);
	        labeledNode.optional = optional;
	        this.raise(TSErrors.InvalidTupleMemberLabel, type);
	        labeledNode.label = type;
	        labeledNode.elementType = this.tsParseType();
	      }
	      type = this.finishNode(labeledNode, "TSNamedTupleMember");
	    } else if (optional) {
	      const optionalTypeNode = this.startNodeAtNode(type);
	      optionalTypeNode.typeAnnotation = type;
	      type = this.finishNode(optionalTypeNode, "TSOptionalType");
	    }
	    if (rest) {
	      const restNode = this.startNodeAt(startLoc);
	      restNode.typeAnnotation = type;
	      type = this.finishNode(restNode, "TSRestType");
	    }
	    return type;
	  }
	  tsParseParenthesizedType() {
	    const node = this.startNode();
	    this.expect(10);
	    node.typeAnnotation = this.tsParseType();
	    this.expect(11);
	    return this.finishNode(node, "TSParenthesizedType");
	  }
	  tsParseFunctionOrConstructorType(type, abstract) {
	    const node = this.startNode();
	    if (type === "TSConstructorType") {
	      node.abstract = !!abstract;
	      if (abstract) this.next();
	      this.next();
	    }
	    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
	    return this.finishNode(node, type);
	  }
	  tsParseLiteralTypeNode() {
	    const node = this.startNode();
	    switch (this.state.type) {
	      case 134:
	      case 135:
	      case 133:
	      case 85:
	      case 86:
	        node.literal = super.parseExprAtom();
	        break;
	      default:
	        this.unexpected();
	    }
	    return this.finishNode(node, "TSLiteralType");
	  }
	  tsParseTemplateLiteralType() {
	    const node = this.startNode();
	    node.literal = super.parseTemplate(false);
	    return this.finishNode(node, "TSLiteralType");
	  }
	  parseTemplateSubstitution() {
	    if (this.state.inType) return this.tsParseType();
	    return super.parseTemplateSubstitution();
	  }
	  tsParseThisTypeOrThisTypePredicate() {
	    const thisKeyword = this.tsParseThisTypeNode();
	    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
	      return this.tsParseThisTypePredicate(thisKeyword);
	    } else {
	      return thisKeyword;
	    }
	  }
	  tsParseNonArrayType() {
	    switch (this.state.type) {
	      case 133:
	      case 134:
	      case 135:
	      case 85:
	      case 86:
	        return this.tsParseLiteralTypeNode();
	      case 53:
	        if (this.state.value === "-") {
	          const node = this.startNode();
	          const nextToken = this.lookahead();
	          if (nextToken.type !== 134 && nextToken.type !== 135) {
	            this.unexpected();
	          }
	          node.literal = this.parseMaybeUnary();
	          return this.finishNode(node, "TSLiteralType");
	        }
	        break;
	      case 78:
	        return this.tsParseThisTypeOrThisTypePredicate();
	      case 87:
	        return this.tsParseTypeQuery();
	      case 83:
	        return this.tsParseImportType();
	      case 5:
	        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
	      case 0:
	        return this.tsParseTupleType();
	      case 10:
	        return this.tsParseParenthesizedType();
	      case 25:
	      case 24:
	        return this.tsParseTemplateLiteralType();
	      default:
	        {
	          const {
	            type
	          } = this.state;
	          if (tokenIsIdentifier(type) || type === 88 || type === 84) {
	            const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
	            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {
	              const node = this.startNode();
	              this.next();
	              return this.finishNode(node, nodeType);
	            }
	            return this.tsParseTypeReference();
	          }
	        }
	    }
	    this.unexpected();
	  }
	  tsParseArrayTypeOrHigher() {
	    let type = this.tsParseNonArrayType();
	    while (!this.hasPrecedingLineBreak() && this.eat(0)) {
	      if (this.match(3)) {
	        const node = this.startNodeAtNode(type);
	        node.elementType = type;
	        this.expect(3);
	        type = this.finishNode(node, "TSArrayType");
	      } else {
	        const node = this.startNodeAtNode(type);
	        node.objectType = type;
	        node.indexType = this.tsParseType();
	        this.expect(3);
	        type = this.finishNode(node, "TSIndexedAccessType");
	      }
	    }
	    return type;
	  }
	  tsParseTypeOperator() {
	    const node = this.startNode();
	    const operator = this.state.value;
	    this.next();
	    node.operator = operator;
	    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
	    if (operator === "readonly") {
	      this.tsCheckTypeAnnotationForReadOnly(node);
	    }
	    return this.finishNode(node, "TSTypeOperator");
	  }
	  tsCheckTypeAnnotationForReadOnly(node) {
	    switch (node.typeAnnotation.type) {
	      case "TSTupleType":
	      case "TSArrayType":
	        return;
	      default:
	        this.raise(TSErrors.UnexpectedReadonly, node);
	    }
	  }
	  tsParseInferType() {
	    const node = this.startNode();
	    this.expectContextual(115);
	    const typeParameter = this.startNode();
	    typeParameter.name = this.tsParseTypeParameterName();
	    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
	    node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
	    return this.finishNode(node, "TSInferType");
	  }
	  tsParseConstraintForInferType() {
	    if (this.eat(81)) {
	      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
	      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
	        return constraint;
	      }
	    }
	  }
	  tsParseTypeOperatorOrHigher() {
	    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
	    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
	  }
	  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
	    const node = this.startNode();
	    const hasLeadingOperator = this.eat(operator);
	    const types = [];
	    do {
	      types.push(parseConstituentType());
	    } while (this.eat(operator));
	    if (types.length === 1 && !hasLeadingOperator) {
	      return types[0];
	    }
	    node.types = types;
	    return this.finishNode(node, kind);
	  }
	  tsParseIntersectionTypeOrHigher() {
	    return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
	  }
	  tsParseUnionTypeOrHigher() {
	    return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
	  }
	  tsIsStartOfFunctionType() {
	    if (this.match(47)) {
	      return true;
	    }
	    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
	  }
	  tsSkipParameterStart() {
	    if (tokenIsIdentifier(this.state.type) || this.match(78)) {
	      this.next();
	      return true;
	    }
	    if (this.match(5)) {
	      const {
	        errors
	      } = this.state;
	      const previousErrorCount = errors.length;
	      try {
	        this.parseObjectLike(8, true);
	        return errors.length === previousErrorCount;
	      } catch (_unused) {
	        return false;
	      }
	    }
	    if (this.match(0)) {
	      this.next();
	      const {
	        errors
	      } = this.state;
	      const previousErrorCount = errors.length;
	      try {
	        super.parseBindingList(3, 93, 1);
	        return errors.length === previousErrorCount;
	      } catch (_unused2) {
	        return false;
	      }
	    }
	    return false;
	  }
	  tsIsUnambiguouslyStartOfFunctionType() {
	    this.next();
	    if (this.match(11) || this.match(21)) {
	      return true;
	    }
	    if (this.tsSkipParameterStart()) {
	      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
	        return true;
	      }
	      if (this.match(11)) {
	        this.next();
	        if (this.match(19)) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }
	  tsParseTypeOrTypePredicateAnnotation(returnToken) {
	    return this.tsInType(() => {
	      const t = this.startNode();
	      this.expect(returnToken);
	      const node = this.startNode();
	      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
	      if (asserts && this.match(78)) {
	        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
	        if (thisTypePredicate.type === "TSThisType") {
	          node.parameterName = thisTypePredicate;
	          node.asserts = true;
	          node.typeAnnotation = null;
	          thisTypePredicate = this.finishNode(node, "TSTypePredicate");
	        } else {
	          this.resetStartLocationFromNode(thisTypePredicate, node);
	          thisTypePredicate.asserts = true;
	        }
	        t.typeAnnotation = thisTypePredicate;
	        return this.finishNode(t, "TSTypeAnnotation");
	      }
	      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
	      if (!typePredicateVariable) {
	        if (!asserts) {
	          return this.tsParseTypeAnnotation(false, t);
	        }
	        node.parameterName = this.parseIdentifier();
	        node.asserts = asserts;
	        node.typeAnnotation = null;
	        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
	        return this.finishNode(t, "TSTypeAnnotation");
	      }
	      const type = this.tsParseTypeAnnotation(false);
	      node.parameterName = typePredicateVariable;
	      node.typeAnnotation = type;
	      node.asserts = asserts;
	      t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
	      return this.finishNode(t, "TSTypeAnnotation");
	    });
	  }
	  tsTryParseTypeOrTypePredicateAnnotation() {
	    if (this.match(14)) {
	      return this.tsParseTypeOrTypePredicateAnnotation(14);
	    }
	  }
	  tsTryParseTypeAnnotation() {
	    if (this.match(14)) {
	      return this.tsParseTypeAnnotation();
	    }
	  }
	  tsTryParseType() {
	    return this.tsEatThenParseType(14);
	  }
	  tsParseTypePredicatePrefix() {
	    const id = this.parseIdentifier();
	    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
	      this.next();
	      return id;
	    }
	  }
	  tsParseTypePredicateAsserts() {
	    if (this.state.type !== 109) {
	      return false;
	    }
	    const containsEsc = this.state.containsEsc;
	    this.next();
	    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
	      return false;
	    }
	    if (containsEsc) {
	      this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {
	        reservedWord: "asserts"
	      });
	    }
	    return true;
	  }
	  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
	    this.tsInType(() => {
	      if (eatColon) this.expect(14);
	      t.typeAnnotation = this.tsParseType();
	    });
	    return this.finishNode(t, "TSTypeAnnotation");
	  }
	  tsParseType() {
	    assert(this.state.inType);
	    const type = this.tsParseNonConditionalType();
	    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
	      return type;
	    }
	    const node = this.startNodeAtNode(type);
	    node.checkType = type;
	    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
	    this.expect(17);
	    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
	    this.expect(14);
	    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
	    return this.finishNode(node, "TSConditionalType");
	  }
	  isAbstractConstructorSignature() {
	    return this.isContextual(124) && this.lookahead().type === 77;
	  }
	  tsParseNonConditionalType() {
	    if (this.tsIsStartOfFunctionType()) {
	      return this.tsParseFunctionOrConstructorType("TSFunctionType");
	    }
	    if (this.match(77)) {
	      return this.tsParseFunctionOrConstructorType("TSConstructorType");
	    } else if (this.isAbstractConstructorSignature()) {
	      return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
	    }
	    return this.tsParseUnionTypeOrHigher();
	  }
	  tsParseTypeAssertion() {
	    if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
	      this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
	    }
	    const node = this.startNode();
	    node.typeAnnotation = this.tsInType(() => {
	      this.next();
	      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
	    });
	    this.expect(48);
	    node.expression = this.parseMaybeUnary();
	    return this.finishNode(node, "TSTypeAssertion");
	  }
	  tsParseHeritageClause(token) {
	    const originalStartLoc = this.state.startLoc;
	    const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
	      const node = this.startNode();
	      node.expression = this.tsParseEntityName();
	      if (this.match(47)) {
	        node.typeParameters = this.tsParseTypeArguments();
	      }
	      return this.finishNode(node, "TSExpressionWithTypeArguments");
	    });
	    if (!delimitedList.length) {
	      this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {
	        token
	      });
	    }
	    return delimitedList;
	  }
	  tsParseInterfaceDeclaration(node, properties = {}) {
	    if (this.hasFollowingLineBreak()) return null;
	    this.expectContextual(129);
	    if (properties.declare) node.declare = true;
	    if (tokenIsIdentifier(this.state.type)) {
	      node.id = this.parseIdentifier();
	      this.checkIdentifier(node.id, 130);
	    } else {
	      node.id = null;
	      this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);
	    }
	    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
	    if (this.eat(81)) {
	      node.extends = this.tsParseHeritageClause("extends");
	    }
	    const body = this.startNode();
	    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
	    node.body = this.finishNode(body, "TSInterfaceBody");
	    return this.finishNode(node, "TSInterfaceDeclaration");
	  }
	  tsParseTypeAliasDeclaration(node) {
	    node.id = this.parseIdentifier();
	    this.checkIdentifier(node.id, 2);
	    node.typeAnnotation = this.tsInType(() => {
	      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
	      this.expect(29);
	      if (this.isContextual(114) && this.lookahead().type !== 16) {
	        const node = this.startNode();
	        this.next();
	        return this.finishNode(node, "TSIntrinsicKeyword");
	      }
	      return this.tsParseType();
	    });
	    this.semicolon();
	    return this.finishNode(node, "TSTypeAliasDeclaration");
	  }
	  tsInNoContext(cb) {
	    const oldContext = this.state.context;
	    this.state.context = [oldContext[0]];
	    try {
	      return cb();
	    } finally {
	      this.state.context = oldContext;
	    }
	  }
	  tsInType(cb) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    try {
	      return cb();
	    } finally {
	      this.state.inType = oldInType;
	    }
	  }
	  tsInDisallowConditionalTypesContext(cb) {
	    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
	    this.state.inDisallowConditionalTypesContext = true;
	    try {
	      return cb();
	    } finally {
	      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
	    }
	  }
	  tsInAllowConditionalTypesContext(cb) {
	    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
	    this.state.inDisallowConditionalTypesContext = false;
	    try {
	      return cb();
	    } finally {
	      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
	    }
	  }
	  tsEatThenParseType(token) {
	    if (this.match(token)) {
	      return this.tsNextThenParseType();
	    }
	  }
	  tsExpectThenParseType(token) {
	    return this.tsInType(() => {
	      this.expect(token);
	      return this.tsParseType();
	    });
	  }
	  tsNextThenParseType() {
	    return this.tsInType(() => {
	      this.next();
	      return this.tsParseType();
	    });
	  }
	  tsParseEnumMember() {
	    const node = this.startNode();
	    node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
	    if (this.eat(29)) {
	      node.initializer = super.parseMaybeAssignAllowIn();
	    }
	    return this.finishNode(node, "TSEnumMember");
	  }
	  tsParseEnumDeclaration(node, properties = {}) {
	    if (properties.const) node.const = true;
	    if (properties.declare) node.declare = true;
	    this.expectContextual(126);
	    node.id = this.parseIdentifier();
	    this.checkIdentifier(node.id, node.const ? 8971 : 8459);
	    this.expect(5);
	    node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
	    this.expect(8);
	    return this.finishNode(node, "TSEnumDeclaration");
	  }
	  tsParseModuleBlock() {
	    const node = this.startNode();
	    this.scope.enter(0);
	    this.expect(5);
	    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);
	    this.scope.exit();
	    return this.finishNode(node, "TSModuleBlock");
	  }
	  tsParseModuleOrNamespaceDeclaration(node, nested = false) {
	    node.id = this.parseIdentifier();
	    if (!nested) {
	      this.checkIdentifier(node.id, 1024);
	    }
	    if (this.eat(16)) {
	      const inner = this.startNode();
	      this.tsParseModuleOrNamespaceDeclaration(inner, true);
	      node.body = inner;
	    } else {
	      this.scope.enter(256);
	      this.prodParam.enter(0);
	      node.body = this.tsParseModuleBlock();
	      this.prodParam.exit();
	      this.scope.exit();
	    }
	    return this.finishNode(node, "TSModuleDeclaration");
	  }
	  tsParseAmbientExternalModuleDeclaration(node) {
	    if (this.isContextual(112)) {
	      node.global = true;
	      node.id = this.parseIdentifier();
	    } else if (this.match(133)) {
	      node.id = super.parseStringLiteral(this.state.value);
	    } else {
	      this.unexpected();
	    }
	    if (this.match(5)) {
	      this.scope.enter(256);
	      this.prodParam.enter(0);
	      node.body = this.tsParseModuleBlock();
	      this.prodParam.exit();
	      this.scope.exit();
	    } else {
	      this.semicolon();
	    }
	    return this.finishNode(node, "TSModuleDeclaration");
	  }
	  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
	    node.isExport = isExport || false;
	    node.id = maybeDefaultIdentifier || this.parseIdentifier();
	    this.checkIdentifier(node.id, 4096);
	    this.expect(29);
	    const moduleReference = this.tsParseModuleReference();
	    if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
	      this.raise(TSErrors.ImportAliasHasImportType, moduleReference);
	    }
	    node.moduleReference = moduleReference;
	    this.semicolon();
	    return this.finishNode(node, "TSImportEqualsDeclaration");
	  }
	  tsIsExternalModuleReference() {
	    return this.isContextual(119) && this.lookaheadCharCode() === 40;
	  }
	  tsParseModuleReference() {
	    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
	  }
	  tsParseExternalModuleReference() {
	    const node = this.startNode();
	    this.expectContextual(119);
	    this.expect(10);
	    if (!this.match(133)) {
	      this.unexpected();
	    }
	    node.expression = super.parseExprAtom();
	    this.expect(11);
	    this.sawUnambiguousESM = true;
	    return this.finishNode(node, "TSExternalModuleReference");
	  }
	  tsLookAhead(f) {
	    const state = this.state.clone();
	    const res = f();
	    this.state = state;
	    return res;
	  }
	  tsTryParseAndCatch(f) {
	    const result = this.tryParse(abort => f() || abort());
	    if (result.aborted || !result.node) return;
	    if (result.error) this.state = result.failState;
	    return result.node;
	  }
	  tsTryParse(f) {
	    const state = this.state.clone();
	    const result = f();
	    if (result !== undefined && result !== false) {
	      return result;
	    }
	    this.state = state;
	  }
	  tsTryParseDeclare(nany) {
	    if (this.isLineTerminator()) {
	      return;
	    }
	    let startType = this.state.type;
	    let kind;
	    if (this.isContextual(100)) {
	      startType = 74;
	      kind = "let";
	    }
	    return this.tsInAmbientContext(() => {
	      switch (startType) {
	        case 68:
	          nany.declare = true;
	          return super.parseFunctionStatement(nany, false, false);
	        case 80:
	          nany.declare = true;
	          return this.parseClass(nany, true, false);
	        case 126:
	          return this.tsParseEnumDeclaration(nany, {
	            declare: true
	          });
	        case 112:
	          return this.tsParseAmbientExternalModuleDeclaration(nany);
	        case 75:
	        case 74:
	          if (!this.match(75) || !this.isLookaheadContextual("enum")) {
	            nany.declare = true;
	            return this.parseVarStatement(nany, kind || this.state.value, true);
	          }
	          this.expect(75);
	          return this.tsParseEnumDeclaration(nany, {
	            const: true,
	            declare: true
	          });
	        case 129:
	          {
	            const result = this.tsParseInterfaceDeclaration(nany, {
	              declare: true
	            });
	            if (result) return result;
	          }
	        default:
	          if (tokenIsIdentifier(startType)) {
	            return this.tsParseDeclaration(nany, this.state.value, true, null);
	          }
	      }
	    });
	  }
	  tsTryParseExportDeclaration() {
	    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
	  }
	  tsParseExpressionStatement(node, expr, decorators) {
	    switch (expr.name) {
	      case "declare":
	        {
	          const declaration = this.tsTryParseDeclare(node);
	          if (declaration) {
	            declaration.declare = true;
	          }
	          return declaration;
	        }
	      case "global":
	        if (this.match(5)) {
	          this.scope.enter(256);
	          this.prodParam.enter(0);
	          const mod = node;
	          mod.global = true;
	          mod.id = expr;
	          mod.body = this.tsParseModuleBlock();
	          this.scope.exit();
	          this.prodParam.exit();
	          return this.finishNode(mod, "TSModuleDeclaration");
	        }
	        break;
	      default:
	        return this.tsParseDeclaration(node, expr.name, false, decorators);
	    }
	  }
	  tsParseDeclaration(node, value, next, decorators) {
	    switch (value) {
	      case "abstract":
	        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
	          return this.tsParseAbstractDeclaration(node, decorators);
	        }
	        break;
	      case "module":
	        if (this.tsCheckLineTerminator(next)) {
	          if (this.match(133)) {
	            return this.tsParseAmbientExternalModuleDeclaration(node);
	          } else if (tokenIsIdentifier(this.state.type)) {
	            return this.tsParseModuleOrNamespaceDeclaration(node);
	          }
	        }
	        break;
	      case "namespace":
	        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
	          return this.tsParseModuleOrNamespaceDeclaration(node);
	        }
	        break;
	      case "type":
	        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
	          return this.tsParseTypeAliasDeclaration(node);
	        }
	        break;
	    }
	  }
	  tsCheckLineTerminator(next) {
	    if (next) {
	      if (this.hasFollowingLineBreak()) return false;
	      this.next();
	      return true;
	    }
	    return !this.isLineTerminator();
	  }
	  tsTryParseGenericAsyncArrowFunction(startLoc) {
	    if (!this.match(47)) return;
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    this.state.maybeInArrowParameters = true;
	    const res = this.tsTryParseAndCatch(() => {
	      const node = this.startNodeAt(startLoc);
	      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
	      super.parseFunctionParams(node);
	      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
	      this.expect(19);
	      return node;
	    });
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    if (!res) return;
	    return super.parseArrowExpression(res, null, true);
	  }
	  tsParseTypeArgumentsInExpression() {
	    if (this.reScan_lt() !== 47) return;
	    return this.tsParseTypeArguments();
	  }
	  tsParseTypeArguments() {
	    const node = this.startNode();
	    node.params = this.tsInType(() => this.tsInNoContext(() => {
	      this.expect(47);
	      return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
	    }));
	    if (node.params.length === 0) {
	      this.raise(TSErrors.EmptyTypeArguments, node);
	    } else if (!this.state.inType && this.curContext() === types.brace) {
	      this.reScan_lt_gt();
	    }
	    this.expect(48);
	    return this.finishNode(node, "TSTypeParameterInstantiation");
	  }
	  tsIsDeclarationStart() {
	    return tokenIsTSDeclarationStart(this.state.type);
	  }
	  isExportDefaultSpecifier() {
	    if (this.tsIsDeclarationStart()) return false;
	    return super.isExportDefaultSpecifier();
	  }
	  parseAssignableListItem(flags, decorators) {
	    const startLoc = this.state.startLoc;
	    const modified = {};
	    this.tsParseModifiers({
	      allowedModifiers: ["public", "private", "protected", "override", "readonly"]
	    }, modified);
	    const accessibility = modified.accessibility;
	    const override = modified.override;
	    const readonly = modified.readonly;
	    if (!(flags & 4) && (accessibility || readonly || override)) {
	      this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
	    }
	    const left = this.parseMaybeDefault();
	    this.parseAssignableListItemTypes(left, flags);
	    const elt = this.parseMaybeDefault(left.loc.start, left);
	    if (accessibility || readonly || override) {
	      const pp = this.startNodeAt(startLoc);
	      if (decorators.length) {
	        pp.decorators = decorators;
	      }
	      if (accessibility) pp.accessibility = accessibility;
	      if (readonly) pp.readonly = readonly;
	      if (override) pp.override = override;
	      if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
	        this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);
	      }
	      pp.parameter = elt;
	      return this.finishNode(pp, "TSParameterProperty");
	    }
	    if (decorators.length) {
	      left.decorators = decorators;
	    }
	    return elt;
	  }
	  isSimpleParameter(node) {
	    return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
	  }
	  tsDisallowOptionalPattern(node) {
	    for (const param of node.params) {
	      if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
	        this.raise(TSErrors.PatternIsOptional, param);
	      }
	    }
	  }
	  setArrowFunctionParameters(node, params, trailingCommaLoc) {
	    super.setArrowFunctionParameters(node, params, trailingCommaLoc);
	    this.tsDisallowOptionalPattern(node);
	  }
	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    if (this.match(14)) {
	      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
	    }
	    const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;
	    if (bodilessType && !this.match(5) && this.isLineTerminator()) {
	      return this.finishNode(node, bodilessType);
	    }
	    if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
	      this.raise(TSErrors.DeclareFunctionHasImplementation, node);
	      if (node.declare) {
	        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
	      }
	    }
	    this.tsDisallowOptionalPattern(node);
	    return super.parseFunctionBodyAndFinish(node, type, isMethod);
	  }
	  registerFunctionStatementId(node) {
	    if (!node.body && node.id) {
	      this.checkIdentifier(node.id, 1024);
	    } else {
	      super.registerFunctionStatementId(node);
	    }
	  }
	  tsCheckForInvalidTypeCasts(items) {
	    items.forEach(node => {
	      if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
	        this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
	      }
	    });
	  }
	  toReferencedList(exprList, isInParens) {
	    this.tsCheckForInvalidTypeCasts(exprList);
	    return exprList;
	  }
	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
	    if (node.type === "ArrayExpression") {
	      this.tsCheckForInvalidTypeCasts(node.elements);
	    }
	    return node;
	  }
	  parseSubscript(base, startLoc, noCalls, state) {
	    if (!this.hasPrecedingLineBreak() && this.match(35)) {
	      this.state.canStartJSXElement = false;
	      this.next();
	      const nonNullExpression = this.startNodeAt(startLoc);
	      nonNullExpression.expression = base;
	      return this.finishNode(nonNullExpression, "TSNonNullExpression");
	    }
	    let isOptionalCall = false;
	    if (this.match(18) && this.lookaheadCharCode() === 60) {
	      if (noCalls) {
	        state.stop = true;
	        return base;
	      }
	      state.optionalChainMember = isOptionalCall = true;
	      this.next();
	    }
	    if (this.match(47) || this.match(51)) {
	      let missingParenErrorLoc;
	      const result = this.tsTryParseAndCatch(() => {
	        if (!noCalls && this.atPossibleAsyncArrow(base)) {
	          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
	          if (asyncArrowFn) {
	            return asyncArrowFn;
	          }
	        }
	        const typeArguments = this.tsParseTypeArgumentsInExpression();
	        if (!typeArguments) return;
	        if (isOptionalCall && !this.match(10)) {
	          missingParenErrorLoc = this.state.curPosition();
	          return;
	        }
	        if (tokenIsTemplate(this.state.type)) {
	          const result = super.parseTaggedTemplateExpression(base, startLoc, state);
	          result.typeParameters = typeArguments;
	          return result;
	        }
	        if (!noCalls && this.eat(10)) {
	          const node = this.startNodeAt(startLoc);
	          node.callee = base;
	          node.arguments = this.parseCallExpressionArguments(11, false);
	          this.tsCheckForInvalidTypeCasts(node.arguments);
	          node.typeParameters = typeArguments;
	          if (state.optionalChainMember) {
	            node.optional = isOptionalCall;
	          }
	          return this.finishCallExpression(node, state.optionalChainMember);
	        }
	        const tokenType = this.state.type;
	        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
	          return;
	        }
	        const node = this.startNodeAt(startLoc);
	        node.expression = base;
	        node.typeParameters = typeArguments;
	        return this.finishNode(node, "TSInstantiationExpression");
	      });
	      if (missingParenErrorLoc) {
	        this.unexpected(missingParenErrorLoc, 10);
	      }
	      if (result) {
	        if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
	          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);
	        }
	        return result;
	      }
	    }
	    return super.parseSubscript(base, startLoc, noCalls, state);
	  }
	  parseNewCallee(node) {
	    var _callee$extra;
	    super.parseNewCallee(node);
	    const {
	      callee
	    } = node;
	    if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
	      node.typeParameters = callee.typeParameters;
	      node.callee = callee.expression;
	    }
	  }
	  parseExprOp(left, leftStartLoc, minPrec) {
	    let isSatisfies;
	    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
	      const node = this.startNodeAt(leftStartLoc);
	      node.expression = left;
	      node.typeAnnotation = this.tsInType(() => {
	        this.next();
	        if (this.match(75)) {
	          if (isSatisfies) {
	            this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {
	              keyword: "const"
	            });
	          }
	          return this.tsParseTypeReference();
	        }
	        return this.tsParseType();
	      });
	      this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
	      this.reScan_lt_gt();
	      return this.parseExprOp(node, leftStartLoc, minPrec);
	    }
	    return super.parseExprOp(left, leftStartLoc, minPrec);
	  }
	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
	    if (!this.state.isAmbientContext) {
	      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
	    }
	  }
	  checkImportReflection(node) {
	    super.checkImportReflection(node);
	    if (node.module && node.importKind !== "value") {
	      this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
	    }
	  }
	  checkDuplicateExports() {}
	  isPotentialImportPhase(isExport) {
	    if (super.isPotentialImportPhase(isExport)) return true;
	    if (this.isContextual(130)) {
	      const ch = this.lookaheadCharCode();
	      return isExport ? ch === 123 || ch === 42 : ch !== 61;
	    }
	    return !isExport && this.isContextual(87);
	  }
	  applyImportPhase(node, isExport, phase, loc) {
	    super.applyImportPhase(node, isExport, phase, loc);
	    if (isExport) {
	      node.exportKind = phase === "type" ? "type" : "value";
	    } else {
	      node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
	    }
	  }
	  parseImport(node) {
	    if (this.match(133)) {
	      node.importKind = "value";
	      return super.parseImport(node);
	    }
	    let importNode;
	    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
	      node.importKind = "value";
	      return this.tsParseImportEqualsDeclaration(node);
	    } else if (this.isContextual(130)) {
	      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
	      if (this.lookaheadCharCode() === 61) {
	        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
	      } else {
	        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
	      }
	    } else {
	      importNode = super.parseImport(node);
	    }
	    if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
	      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);
	    }
	    return importNode;
	  }
	  parseExport(node, decorators) {
	    if (this.match(83)) {
	      this.next();
	      const nodeImportEquals = node;
	      let maybeDefaultIdentifier = null;
	      if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
	        maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false);
	      } else {
	        nodeImportEquals.importKind = "value";
	      }
	      return this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
	    } else if (this.eat(29)) {
	      const assign = node;
	      assign.expression = super.parseExpression();
	      this.semicolon();
	      this.sawUnambiguousESM = true;
	      return this.finishNode(assign, "TSExportAssignment");
	    } else if (this.eatContextual(93)) {
	      const decl = node;
	      this.expectContextual(128);
	      decl.id = this.parseIdentifier();
	      this.semicolon();
	      return this.finishNode(decl, "TSNamespaceExportDeclaration");
	    } else {
	      return super.parseExport(node, decorators);
	    }
	  }
	  isAbstractClass() {
	    return this.isContextual(124) && this.lookahead().type === 80;
	  }
	  parseExportDefaultExpression() {
	    if (this.isAbstractClass()) {
	      const cls = this.startNode();
	      this.next();
	      cls.abstract = true;
	      return this.parseClass(cls, true, true);
	    }
	    if (this.match(129)) {
	      const result = this.tsParseInterfaceDeclaration(this.startNode());
	      if (result) return result;
	    }
	    return super.parseExportDefaultExpression();
	  }
	  parseVarStatement(node, kind, allowMissingInitializer = false) {
	    const {
	      isAmbientContext
	    } = this.state;
	    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
	    if (!isAmbientContext) return declaration;
	    for (const {
	      id,
	      init
	    } of declaration.declarations) {
	      if (!init) continue;
	      if (kind !== "const" || !!id.typeAnnotation) {
	        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);
	      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
	        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);
	      }
	    }
	    return declaration;
	  }
	  parseStatementContent(flags, decorators) {
	    if (this.match(75) && this.isLookaheadContextual("enum")) {
	      const node = this.startNode();
	      this.expect(75);
	      return this.tsParseEnumDeclaration(node, {
	        const: true
	      });
	    }
	    if (this.isContextual(126)) {
	      return this.tsParseEnumDeclaration(this.startNode());
	    }
	    if (this.isContextual(129)) {
	      const result = this.tsParseInterfaceDeclaration(this.startNode());
	      if (result) return result;
	    }
	    return super.parseStatementContent(flags, decorators);
	  }
	  parseAccessModifier() {
	    return this.tsParseModifier(["public", "protected", "private"]);
	  }
	  tsHasSomeModifiers(member, modifiers) {
	    return modifiers.some(modifier => {
	      if (tsIsAccessModifier(modifier)) {
	        return member.accessibility === modifier;
	      }
	      return !!member[modifier];
	    });
	  }
	  tsIsStartOfStaticBlocks() {
	    return this.isContextual(106) && this.lookaheadCharCode() === 123;
	  }
	  parseClassMember(classBody, member, state) {
	    const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
	    this.tsParseModifiers({
	      allowedModifiers: modifiers,
	      disallowedModifiers: ["in", "out"],
	      stopOnStartOfClassStaticBlock: true,
	      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
	    }, member);
	    const callParseClassMemberWithIsStatic = () => {
	      if (this.tsIsStartOfStaticBlocks()) {
	        this.next();
	        this.next();
	        if (this.tsHasSomeModifiers(member, modifiers)) {
	          this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());
	        }
	        super.parseClassStaticBlock(classBody, member);
	      } else {
	        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
	      }
	    };
	    if (member.declare) {
	      this.tsInAmbientContext(callParseClassMemberWithIsStatic);
	    } else {
	      callParseClassMemberWithIsStatic();
	    }
	  }
	  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
	    const idx = this.tsTryParseIndexSignature(member);
	    if (idx) {
	      classBody.body.push(idx);
	      if (member.abstract) {
	        this.raise(TSErrors.IndexSignatureHasAbstract, member);
	      }
	      if (member.accessibility) {
	        this.raise(TSErrors.IndexSignatureHasAccessibility, member, {
	          modifier: member.accessibility
	        });
	      }
	      if (member.declare) {
	        this.raise(TSErrors.IndexSignatureHasDeclare, member);
	      }
	      if (member.override) {
	        this.raise(TSErrors.IndexSignatureHasOverride, member);
	      }
	      return;
	    }
	    if (!this.state.inAbstractClass && member.abstract) {
	      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);
	    }
	    if (member.override) {
	      if (!state.hadSuperClass) {
	        this.raise(TSErrors.OverrideNotInSubClass, member);
	      }
	    }
	    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	  }
	  parsePostMemberNameModifiers(methodOrProp) {
	    const optional = this.eat(17);
	    if (optional) methodOrProp.optional = true;
	    if (methodOrProp.readonly && this.match(10)) {
	      this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);
	    }
	    if (methodOrProp.declare && this.match(10)) {
	      this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
	    }
	  }
	  parseExpressionStatement(node, expr, decorators) {
	    const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;
	    return decl || super.parseExpressionStatement(node, expr, decorators);
	  }
	  shouldParseExportDeclaration() {
	    if (this.tsIsDeclarationStart()) return true;
	    return super.shouldParseExportDeclaration();
	  }
	  parseConditional(expr, startLoc, refExpressionErrors) {
	    if (!this.state.maybeInArrowParameters || !this.match(17)) {
	      return super.parseConditional(expr, startLoc, refExpressionErrors);
	    }
	    const result = this.tryParse(() => super.parseConditional(expr, startLoc));
	    if (!result.node) {
	      if (result.error) {
	        super.setOptionalParametersError(refExpressionErrors, result.error);
	      }
	      return expr;
	    }
	    if (result.error) this.state = result.failState;
	    return result.node;
	  }
	  parseParenItem(node, startLoc) {
	    const newNode = super.parseParenItem(node, startLoc);
	    if (this.eat(17)) {
	      newNode.optional = true;
	      this.resetEndLocation(node);
	    }
	    if (this.match(14)) {
	      const typeCastNode = this.startNodeAt(startLoc);
	      typeCastNode.expression = node;
	      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
	      return this.finishNode(typeCastNode, "TSTypeCastExpression");
	    }
	    return node;
	  }
	  parseExportDeclaration(node) {
	    if (!this.state.isAmbientContext && this.isContextual(125)) {
	      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
	    }
	    const startLoc = this.state.startLoc;
	    const isDeclare = this.eatContextual(125);
	    if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
	      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
	    }
	    const isIdentifier = tokenIsIdentifier(this.state.type);
	    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
	    if (!declaration) return null;
	    if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
	      node.exportKind = "type";
	    }
	    if (isDeclare) {
	      this.resetStartLocation(declaration, startLoc);
	      declaration.declare = true;
	    }
	    return declaration;
	  }
	  parseClassId(node, isStatement, optionalId, bindingType) {
	    if ((!isStatement || optionalId) && this.isContextual(113)) {
	      return;
	    }
	    super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
	    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
	    if (typeParameters) node.typeParameters = typeParameters;
	  }
	  parseClassPropertyAnnotation(node) {
	    if (!node.optional) {
	      if (this.eat(35)) {
	        node.definite = true;
	      } else if (this.eat(17)) {
	        node.optional = true;
	      }
	    }
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) node.typeAnnotation = type;
	  }
	  parseClassProperty(node) {
	    this.parseClassPropertyAnnotation(node);
	    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
	      this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);
	    }
	    if (node.abstract && this.match(29)) {
	      const {
	        key
	      } = node;
	      this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {
	        propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
	      });
	    }
	    return super.parseClassProperty(node);
	  }
	  parseClassPrivateProperty(node) {
	    if (node.abstract) {
	      this.raise(TSErrors.PrivateElementHasAbstract, node);
	    }
	    if (node.accessibility) {
	      this.raise(TSErrors.PrivateElementHasAccessibility, node, {
	        modifier: node.accessibility
	      });
	    }
	    this.parseClassPropertyAnnotation(node);
	    return super.parseClassPrivateProperty(node);
	  }
	  parseClassAccessorProperty(node) {
	    this.parseClassPropertyAnnotation(node);
	    if (node.optional) {
	      this.raise(TSErrors.AccessorCannotBeOptional, node);
	    }
	    return super.parseClassAccessorProperty(node);
	  }
	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
	    if (typeParameters && isConstructor) {
	      this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
	    }
	    const {
	      declare = false,
	      kind
	    } = method;
	    if (declare && (kind === "get" || kind === "set")) {
	      this.raise(TSErrors.DeclareAccessor, method, {
	        kind
	      });
	    }
	    if (typeParameters) method.typeParameters = typeParameters;
	    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
	  }
	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
	    if (typeParameters) method.typeParameters = typeParameters;
	    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
	  }
	  declareClassPrivateMethodInScope(node, kind) {
	    if (node.type === "TSDeclareMethod") return;
	    if (node.type === "MethodDefinition" && !hasOwnProperty.call(node.value, "body")) {
	      return;
	    }
	    super.declareClassPrivateMethodInScope(node, kind);
	  }
	  parseClassSuper(node) {
	    super.parseClassSuper(node);
	    if (node.superClass && (this.match(47) || this.match(51))) {
	      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
	    }
	    if (this.eatContextual(113)) {
	      node.implements = this.tsParseHeritageClause("implements");
	    }
	  }
	  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
	    if (typeParameters) prop.typeParameters = typeParameters;
	    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
	  }
	  parseFunctionParams(node, isConstructor) {
	    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
	    if (typeParameters) node.typeParameters = typeParameters;
	    super.parseFunctionParams(node, isConstructor);
	  }
	  parseVarId(decl, kind) {
	    super.parseVarId(decl, kind);
	    if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
	      decl.definite = true;
	    }
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) {
	      decl.id.typeAnnotation = type;
	      this.resetEndLocation(decl.id);
	    }
	  }
	  parseAsyncArrowFromCallExpression(node, call) {
	    if (this.match(14)) {
	      node.returnType = this.tsParseTypeAnnotation();
	    }
	    return super.parseAsyncArrowFromCallExpression(node, call);
	  }
	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
	    let state;
	    let jsx;
	    let typeCast;
	    if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
	      state = this.state.clone();
	      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
	      if (!jsx.error) return jsx.node;
	      const {
	        context
	      } = this.state;
	      const currentContext = context[context.length - 1];
	      if (currentContext === types.j_oTag || currentContext === types.j_expr) {
	        context.pop();
	      }
	    }
	    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {
	      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	    }
	    if (!state || state === this.state) state = this.state.clone();
	    let typeParameters;
	    const arrow = this.tryParse(abort => {
	      var _expr$extra, _typeParameters;
	      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
	      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	      if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
	        abort();
	      }
	      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
	        this.resetStartLocationFromNode(expr, typeParameters);
	      }
	      expr.typeParameters = typeParameters;
	      return expr;
	    }, state);
	    if (!arrow.error && !arrow.aborted) {
	      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
	      return arrow.node;
	    }
	    if (!jsx) {
	      assert(!this.hasPlugin("jsx"));
	      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
	      if (!typeCast.error) return typeCast.node;
	    }
	    if ((_jsx2 = jsx) != null && _jsx2.node) {
	      this.state = jsx.failState;
	      return jsx.node;
	    }
	    if (arrow.node) {
	      this.state = arrow.failState;
	      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
	      return arrow.node;
	    }
	    if ((_typeCast = typeCast) != null && _typeCast.node) {
	      this.state = typeCast.failState;
	      return typeCast.node;
	    }
	    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
	  }
	  reportReservedArrowTypeParam(node) {
	    var _node$extra;
	    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
	      this.raise(TSErrors.ReservedArrowTypeParam, node);
	    }
	  }
	  parseMaybeUnary(refExpressionErrors, sawUnary) {
	    if (!this.hasPlugin("jsx") && this.match(47)) {
	      return this.tsParseTypeAssertion();
	    }
	    return super.parseMaybeUnary(refExpressionErrors, sawUnary);
	  }
	  parseArrow(node) {
	    if (this.match(14)) {
	      const result = this.tryParse(abort => {
	        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
	        if (this.canInsertSemicolon() || !this.match(19)) abort();
	        return returnType;
	      });
	      if (result.aborted) return;
	      if (!result.thrown) {
	        if (result.error) this.state = result.failState;
	        node.returnType = result.node;
	      }
	    }
	    return super.parseArrow(node);
	  }
	  parseAssignableListItemTypes(param, flags) {
	    if (!(flags & 2)) return param;
	    if (this.eat(17)) {
	      param.optional = true;
	    }
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) param.typeAnnotation = type;
	    this.resetEndLocation(param);
	    return param;
	  }
	  isAssignable(node, isBinding) {
	    switch (node.type) {
	      case "TSTypeCastExpression":
	        return this.isAssignable(node.expression, isBinding);
	      case "TSParameterProperty":
	        return true;
	      default:
	        return super.isAssignable(node, isBinding);
	    }
	  }
	  toAssignable(node, isLHS = false) {
	    switch (node.type) {
	      case "ParenthesizedExpression":
	        this.toAssignableParenthesizedExpression(node, isLHS);
	        break;
	      case "TSAsExpression":
	      case "TSSatisfiesExpression":
	      case "TSNonNullExpression":
	      case "TSTypeAssertion":
	        if (isLHS) {
	          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);
	        } else {
	          this.raise(TSErrors.UnexpectedTypeCastInParameter, node);
	        }
	        this.toAssignable(node.expression, isLHS);
	        break;
	      case "AssignmentExpression":
	        if (!isLHS && node.left.type === "TSTypeCastExpression") {
	          node.left = this.typeCastToParameter(node.left);
	        }
	      default:
	        super.toAssignable(node, isLHS);
	    }
	  }
	  toAssignableParenthesizedExpression(node, isLHS) {
	    switch (node.expression.type) {
	      case "TSAsExpression":
	      case "TSSatisfiesExpression":
	      case "TSNonNullExpression":
	      case "TSTypeAssertion":
	      case "ParenthesizedExpression":
	        this.toAssignable(node.expression, isLHS);
	        break;
	      default:
	        super.toAssignable(node, isLHS);
	    }
	  }
	  checkToRestConversion(node, allowPattern) {
	    switch (node.type) {
	      case "TSAsExpression":
	      case "TSSatisfiesExpression":
	      case "TSTypeAssertion":
	      case "TSNonNullExpression":
	        this.checkToRestConversion(node.expression, false);
	        break;
	      default:
	        super.checkToRestConversion(node, allowPattern);
	    }
	  }
	  isValidLVal(type, isUnparenthesizedInAssign, binding) {
	    return getOwn({
	      TSTypeCastExpression: true,
	      TSParameterProperty: "parameter",
	      TSNonNullExpression: "expression",
	      TSInstantiationExpression: "expression",
	      TSAsExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
	      TSSatisfiesExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
	      TSTypeAssertion: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true]
	    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
	  }
	  parseBindingAtom() {
	    if (this.state.type === 78) {
	      return this.parseIdentifier(true);
	    }
	    return super.parseBindingAtom();
	  }
	  parseMaybeDecoratorArguments(expr) {
	    if (this.match(47) || this.match(51)) {
	      const typeArguments = this.tsParseTypeArgumentsInExpression();
	      if (this.match(10)) {
	        const call = super.parseMaybeDecoratorArguments(expr);
	        call.typeParameters = typeArguments;
	        return call;
	      }
	      this.unexpected(null, 10);
	    }
	    return super.parseMaybeDecoratorArguments(expr);
	  }
	  checkCommaAfterRest(close) {
	    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
	      this.next();
	      return false;
	    }
	    return super.checkCommaAfterRest(close);
	  }
	  isClassMethod() {
	    return this.match(47) || super.isClassMethod();
	  }
	  isClassProperty() {
	    return this.match(35) || this.match(14) || super.isClassProperty();
	  }
	  parseMaybeDefault(startLoc, left) {
	    const node = super.parseMaybeDefault(startLoc, left);
	    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	      this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);
	    }
	    return node;
	  }
	  getTokenFromCode(code) {
	    if (this.state.inType) {
	      if (code === 62) {
	        this.finishOp(48, 1);
	        return;
	      }
	      if (code === 60) {
	        this.finishOp(47, 1);
	        return;
	      }
	    }
	    super.getTokenFromCode(code);
	  }
	  reScan_lt_gt() {
	    const {
	      type
	    } = this.state;
	    if (type === 47) {
	      this.state.pos -= 1;
	      this.readToken_lt();
	    } else if (type === 48) {
	      this.state.pos -= 1;
	      this.readToken_gt();
	    }
	  }
	  reScan_lt() {
	    const {
	      type
	    } = this.state;
	    if (type === 51) {
	      this.state.pos -= 2;
	      this.finishOp(47, 1);
	      return 47;
	    }
	    return type;
	  }
	  toAssignableList(exprList, trailingCommaLoc, isLHS) {
	    for (let i = 0; i < exprList.length; i++) {
	      const expr = exprList[i];
	      if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
	        exprList[i] = this.typeCastToParameter(expr);
	      }
	    }
	    super.toAssignableList(exprList, trailingCommaLoc, isLHS);
	  }
	  typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
	    return node.expression;
	  }
	  shouldParseArrow(params) {
	    if (this.match(14)) {
	      return params.every(expr => this.isAssignable(expr, true));
	    }
	    return super.shouldParseArrow(params);
	  }
	  shouldParseAsyncArrow() {
	    return this.match(14) || super.shouldParseAsyncArrow();
	  }
	  canHaveLeadingDecorator() {
	    return super.canHaveLeadingDecorator() || this.isAbstractClass();
	  }
	  jsxParseOpeningElementAfterName(node) {
	    if (this.match(47) || this.match(51)) {
	      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
	      if (typeArguments) node.typeParameters = typeArguments;
	    }
	    return super.jsxParseOpeningElementAfterName(node);
	  }
	  getGetterSetterExpectedParamCount(method) {
	    const baseCount = super.getGetterSetterExpectedParamCount(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    const firstParam = params[0];
	    const hasContextParam = firstParam && this.isThisParam(firstParam);
	    return hasContextParam ? baseCount + 1 : baseCount;
	  }
	  parseCatchClauseParam() {
	    const param = super.parseCatchClauseParam();
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) {
	      param.typeAnnotation = type;
	      this.resetEndLocation(param);
	    }
	    return param;
	  }
	  tsInAmbientContext(cb) {
	    const {
	      isAmbientContext: oldIsAmbientContext,
	      strict: oldStrict
	    } = this.state;
	    this.state.isAmbientContext = true;
	    this.state.strict = false;
	    try {
	      return cb();
	    } finally {
	      this.state.isAmbientContext = oldIsAmbientContext;
	      this.state.strict = oldStrict;
	    }
	  }
	  parseClass(node, isStatement, optionalId) {
	    const oldInAbstractClass = this.state.inAbstractClass;
	    this.state.inAbstractClass = !!node.abstract;
	    try {
	      return super.parseClass(node, isStatement, optionalId);
	    } finally {
	      this.state.inAbstractClass = oldInAbstractClass;
	    }
	  }
	  tsParseAbstractDeclaration(node, decorators) {
	    if (this.match(80)) {
	      node.abstract = true;
	      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
	    } else if (this.isContextual(129)) {
	      if (!this.hasFollowingLineBreak()) {
	        node.abstract = true;
	        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);
	        return this.tsParseInterfaceDeclaration(node);
	      }
	    } else {
	      this.unexpected(null, 80);
	    }
	  }
	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
	    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
	    if (method.abstract) {
	      const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
	      if (hasBody) {
	        const {
	          key
	        } = method;
	        this.raise(TSErrors.AbstractMethodHasImplementation, method, {
	          methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
	        });
	      }
	    }
	    return method;
	  }
	  tsParseTypeParameterName() {
	    const typeName = this.parseIdentifier();
	    return typeName.name;
	  }
	  shouldParseAsAmbientContext() {
	    return !!this.getPluginOption("typescript", "dts");
	  }
	  parse() {
	    if (this.shouldParseAsAmbientContext()) {
	      this.state.isAmbientContext = true;
	    }
	    return super.parse();
	  }
	  getExpression() {
	    if (this.shouldParseAsAmbientContext()) {
	      this.state.isAmbientContext = true;
	    }
	    return super.getExpression();
	  }
	  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
	    if (!isString && isMaybeTypeOnly) {
	      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
	      return this.finishNode(node, "ExportSpecifier");
	    }
	    node.exportKind = "value";
	    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
	  }
	  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
	    if (!importedIsString && isMaybeTypeOnly) {
	      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
	      return this.finishNode(specifier, "ImportSpecifier");
	    }
	    specifier.importKind = "value";
	    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
	  }
	  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
	    const leftOfAsKey = isImport ? "imported" : "local";
	    const rightOfAsKey = isImport ? "local" : "exported";
	    let leftOfAs = node[leftOfAsKey];
	    let rightOfAs;
	    let hasTypeSpecifier = false;
	    let canParseAsKeyword = true;
	    const loc = leftOfAs.loc.start;
	    if (this.isContextual(93)) {
	      const firstAs = this.parseIdentifier();
	      if (this.isContextual(93)) {
	        const secondAs = this.parseIdentifier();
	        if (tokenIsKeywordOrIdentifier(this.state.type)) {
	          hasTypeSpecifier = true;
	          leftOfAs = firstAs;
	          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
	          canParseAsKeyword = false;
	        } else {
	          rightOfAs = secondAs;
	          canParseAsKeyword = false;
	        }
	      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
	        canParseAsKeyword = false;
	        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
	      } else {
	        hasTypeSpecifier = true;
	        leftOfAs = firstAs;
	      }
	    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
	      hasTypeSpecifier = true;
	      if (isImport) {
	        leftOfAs = this.parseIdentifier(true);
	        if (!this.isContextual(93)) {
	          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
	        }
	      } else {
	        leftOfAs = this.parseModuleExportName();
	      }
	    }
	    if (hasTypeSpecifier && isInTypeOnlyImportExport) {
	      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);
	    }
	    node[leftOfAsKey] = leftOfAs;
	    node[rightOfAsKey] = rightOfAs;
	    const kindKey = isImport ? "importKind" : "exportKind";
	    node[kindKey] = hasTypeSpecifier ? "type" : "value";
	    if (canParseAsKeyword && this.eatContextual(93)) {
	      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
	    }
	    if (!node[rightOfAsKey]) {
	      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
	    }
	    if (isImport) {
	      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
	    }
	  }
	};
	function isPossiblyLiteralEnum(expression) {
	  if (expression.type !== "MemberExpression") return false;
	  const {
	    computed,
	    property
	  } = expression;
	  if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
	    return false;
	  }
	  return isUncomputedMemberExpressionChain(expression.object);
	}
	function isValidAmbientConstInitializer(expression, estree) {
	  var _expression$extra;
	  const {
	    type
	  } = expression;
	  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
	    return false;
	  }
	  if (estree) {
	    if (type === "Literal") {
	      const {
	        value
	      } = expression;
	      if (typeof value === "string" || typeof value === "boolean") {
	        return true;
	      }
	    }
	  } else {
	    if (type === "StringLiteral" || type === "BooleanLiteral") {
	      return true;
	    }
	  }
	  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {
	    return true;
	  }
	  if (type === "TemplateLiteral" && expression.expressions.length === 0) {
	    return true;
	  }
	  if (isPossiblyLiteralEnum(expression)) {
	    return true;
	  }
	  return false;
	}
	function isNumber(expression, estree) {
	  if (estree) {
	    return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
	  }
	  return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
	}
	function isNegativeNumber(expression, estree) {
	  if (expression.type === "UnaryExpression") {
	    const {
	      operator,
	      argument
	    } = expression;
	    if (operator === "-" && isNumber(argument, estree)) {
	      return true;
	    }
	  }
	  return false;
	}
	function isUncomputedMemberExpressionChain(expression) {
	  if (expression.type === "Identifier") return true;
	  if (expression.type !== "MemberExpression" || expression.computed) {
	    return false;
	  }
	  return isUncomputedMemberExpressionChain(expression.object);
	}
	const PlaceholderErrors = ParseErrorEnum`placeholders`({
	  ClassNameIsRequired: "A class name is required.",
	  UnexpectedSpace: "Unexpected space in placeholder."
	});
	var placeholders = superClass => class PlaceholdersParserMixin extends superClass {
	  parsePlaceholder(expectedNode) {
	    if (this.match(144)) {
	      const node = this.startNode();
	      this.next();
	      this.assertNoSpace();
	      node.name = super.parseIdentifier(true);
	      this.assertNoSpace();
	      this.expect(144);
	      return this.finishPlaceholder(node, expectedNode);
	    }
	  }
	  finishPlaceholder(node, expectedNode) {
	    let placeholder = node;
	    if (!placeholder.expectedNode || !placeholder.type) {
	      placeholder = this.finishNode(placeholder, "Placeholder");
	    }
	    placeholder.expectedNode = expectedNode;
	    return placeholder;
	  }
	  getTokenFromCode(code) {
	    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
	      this.finishOp(144, 2);
	    } else {
	      super.getTokenFromCode(code);
	    }
	  }
	  parseExprAtom(refExpressionErrors) {
	    return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
	  }
	  parseIdentifier(liberal) {
	    return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
	  }
	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
	    if (word !== undefined) {
	      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
	    }
	  }
	  parseBindingAtom() {
	    return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
	  }
	  isValidLVal(type, isParenthesized, binding) {
	    return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
	  }
	  toAssignable(node, isLHS) {
	    if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
	      node.expectedNode = "Pattern";
	    } else {
	      super.toAssignable(node, isLHS);
	    }
	  }
	  chStartsBindingIdentifier(ch, pos) {
	    if (super.chStartsBindingIdentifier(ch, pos)) {
	      return true;
	    }
	    const nextToken = this.lookahead();
	    if (nextToken.type === 144) {
	      return true;
	    }
	    return false;
	  }
	  verifyBreakContinue(node, isBreak) {
	    if (node.label && node.label.type === "Placeholder") return;
	    super.verifyBreakContinue(node, isBreak);
	  }
	  parseExpressionStatement(node, expr) {
	    var _expr$extra;
	    if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
	      return super.parseExpressionStatement(node, expr);
	    }
	    if (this.match(14)) {
	      const stmt = node;
	      stmt.label = this.finishPlaceholder(expr, "Identifier");
	      this.next();
	      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
	      return this.finishNode(stmt, "LabeledStatement");
	    }
	    this.semicolon();
	    const stmtPlaceholder = node;
	    stmtPlaceholder.name = expr.name;
	    return this.finishPlaceholder(stmtPlaceholder, "Statement");
	  }
	  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
	    return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
	  }
	  parseFunctionId(requireId) {
	    return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
	  }
	  parseClass(node, isStatement, optionalId) {
	    const type = isStatement ? "ClassDeclaration" : "ClassExpression";
	    this.next();
	    const oldStrict = this.state.strict;
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (placeholder) {
	      if (this.match(81) || this.match(144) || this.match(5)) {
	        node.id = placeholder;
	      } else if (optionalId || !isStatement) {
	        node.id = null;
	        node.body = this.finishPlaceholder(placeholder, "ClassBody");
	        return this.finishNode(node, type);
	      } else {
	        throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
	      }
	    } else {
	      this.parseClassId(node, isStatement, optionalId);
	    }
	    super.parseClassSuper(node);
	    node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
	    return this.finishNode(node, type);
	  }
	  parseExport(node, decorators) {
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (!placeholder) return super.parseExport(node, decorators);
	    const node2 = node;
	    if (!this.isContextual(98) && !this.match(12)) {
	      node2.specifiers = [];
	      node2.source = null;
	      node2.declaration = this.finishPlaceholder(placeholder, "Declaration");
	      return this.finishNode(node2, "ExportNamedDeclaration");
	    }
	    this.expectPlugin("exportDefaultFrom");
	    const specifier = this.startNode();
	    specifier.exported = placeholder;
	    node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    return super.parseExport(node2, decorators);
	  }
	  isExportDefaultSpecifier() {
	    if (this.match(65)) {
	      const next = this.nextTokenStart();
	      if (this.isUnparsedContextual(next, "from")) {
	        if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {
	          return true;
	        }
	      }
	    }
	    return super.isExportDefaultSpecifier();
	  }
	  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
	    var _specifiers;
	    if ((_specifiers = node.specifiers) != null && _specifiers.length) {
	      return true;
	    }
	    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
	  }
	  checkExport(node) {
	    const {
	      specifiers
	    } = node;
	    if (specifiers != null && specifiers.length) {
	      node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
	    }
	    super.checkExport(node);
	    node.specifiers = specifiers;
	  }
	  parseImport(node) {
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (!placeholder) return super.parseImport(node);
	    node.specifiers = [];
	    if (!this.isContextual(98) && !this.match(12)) {
	      node.source = this.finishPlaceholder(placeholder, "StringLiteral");
	      this.semicolon();
	      return this.finishNode(node, "ImportDeclaration");
	    }
	    const specifier = this.startNodeAtNode(placeholder);
	    specifier.local = placeholder;
	    node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
	    if (this.eat(12)) {
	      const hasStarImport = this.maybeParseStarImportSpecifier(node);
	      if (!hasStarImport) this.parseNamedImportSpecifiers(node);
	    }
	    this.expectContextual(98);
	    node.source = this.parseImportSource();
	    this.semicolon();
	    return this.finishNode(node, "ImportDeclaration");
	  }
	  parseImportSource() {
	    return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
	  }
	  assertNoSpace() {
	    if (this.state.start > this.state.lastTokEndLoc.index) {
	      this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
	    }
	  }
	};
	var v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {
	  parseV8Intrinsic() {
	    if (this.match(54)) {
	      const v8IntrinsicStartLoc = this.state.startLoc;
	      const node = this.startNode();
	      this.next();
	      if (tokenIsIdentifier(this.state.type)) {
	        const name = this.parseIdentifierName();
	        const identifier = this.createIdentifier(node, name);
	        identifier.type = "V8IntrinsicIdentifier";
	        if (this.match(10)) {
	          return identifier;
	        }
	      }
	      this.unexpected(v8IntrinsicStartLoc);
	    }
	  }
	  parseExprAtom(refExpressionErrors) {
	    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
	  }
	};
	function hasPlugin(plugins, expectedConfig) {
	  const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
	  const expectedKeys = Object.keys(expectedOptions);
	  const expectedOptionsIsEmpty = expectedKeys.length === 0;
	  return plugins.some(p => {
	    if (typeof p === "string") {
	      return expectedOptionsIsEmpty && p === expectedName;
	    } else {
	      const [pluginName, pluginOptions] = p;
	      if (pluginName !== expectedName) {
	        return false;
	      }
	      for (const key of expectedKeys) {
	        if (pluginOptions[key] !== expectedOptions[key]) {
	          return false;
	        }
	      }
	      return true;
	    }
	  });
	}
	function getPluginOption(plugins, name, option) {
	  const plugin = plugins.find(plugin => {
	    if (Array.isArray(plugin)) {
	      return plugin[0] === name;
	    } else {
	      return plugin === name;
	    }
	  });
	  if (plugin && Array.isArray(plugin) && plugin.length > 1) {
	    return plugin[1][option];
	  }
	  return null;
	}
	const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
	const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
	function validatePlugins(plugins) {
	  if (hasPlugin(plugins, "decorators")) {
	    if (hasPlugin(plugins, "decorators-legacy")) {
	      throw new Error("Cannot use the decorators and decorators-legacy plugin together");
	    }
	    const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
	    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
	      throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
	    }
	    const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
	    if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
	      throw new Error("'allowCallParenthesized' must be a boolean.");
	    }
	  }
	  if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
	    throw new Error("Cannot combine flow and typescript plugins.");
	  }
	  if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
	    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
	  }
	  if (hasPlugin(plugins, "pipelineOperator")) {
	    const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
	    if (!PIPELINE_PROPOSALS.includes(proposal)) {
	      const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
	      throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
	    }
	    const recordAndTupleConfigItem = ["recordAndTuple", {
	      syntaxType: "hash"
	    }];
	    const tupleSyntaxIsHash = hasPlugin(plugins, recordAndTupleConfigItem);
	    if (proposal === "hack") {
	      if (hasPlugin(plugins, "placeholders")) {
	        throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
	      }
	      if (hasPlugin(plugins, "v8intrinsic")) {
	        throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
	      }
	      const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
	      if (!TOPIC_TOKENS.includes(topicToken)) {
	        const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");
	        throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
	      }
	      if (topicToken === "#" && tupleSyntaxIsHash) {
	        throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(recordAndTupleConfigItem)}\`.`);
	      }
	    } else if (proposal === "smart" && tupleSyntaxIsHash) {
	      throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(recordAndTupleConfigItem)}\`.`);
	    }
	  }
	  if (hasPlugin(plugins, "moduleAttributes")) {
	    {
	      if (hasPlugin(plugins, "importAssertions") || hasPlugin(plugins, "importAttributes")) {
	        throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
	      }
	      const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
	      if (moduleAttributesVersionPluginOption !== "may-2020") {
	        throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
	      }
	    }
	  }
	  if (hasPlugin(plugins, "importAssertions") && hasPlugin(plugins, "importAttributes")) {
	    throw new Error("Cannot combine importAssertions and importAttributes plugins.");
	  }
	  if (hasPlugin(plugins, "recordAndTuple")) {
	    const syntaxType = getPluginOption(plugins, "recordAndTuple", "syntaxType");
	    if (syntaxType != null) {
	      {
	        const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
	        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {
	          throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
	        }
	      }
	    }
	  }
	  if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
	    const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
	    error.missingPlugins = "doExpressions";
	    throw error;
	  }
	  if (hasPlugin(plugins, "optionalChainingAssign") && getPluginOption(plugins, "optionalChainingAssign", "version") !== "2023-07") {
	    throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is '2023-07'.");
	  }
	}
	const mixinPlugins = {
	  estree,
	  jsx,
	  flow,
	  typescript,
	  v8intrinsic,
	  placeholders
	};
	const mixinPluginNames = Object.keys(mixinPlugins);
	const defaultOptions = {
	  sourceType: "script",
	  sourceFilename: undefined,
	  startColumn: 0,
	  startLine: 1,
	  allowAwaitOutsideFunction: false,
	  allowReturnOutsideFunction: false,
	  allowNewTargetOutsideFunction: false,
	  allowImportExportEverywhere: false,
	  allowSuperOutsideMethod: false,
	  allowUndeclaredExports: false,
	  plugins: [],
	  strictMode: null,
	  ranges: false,
	  tokens: false,
	  createImportExpressions: false,
	  createParenthesizedExpressions: false,
	  errorRecovery: false,
	  attachComment: true,
	  annexB: true
	};
	function getOptions(opts) {
	  if (opts == null) {
	    return Object.assign({}, defaultOptions);
	  }
	  if (opts.annexB != null && opts.annexB !== false) {
	    throw new Error("The `annexB` option can only be set to `false`.");
	  }
	  const options = {};
	  for (const key of Object.keys(defaultOptions)) {
	    var _opts$key;
	    options[key] = (_opts$key = opts[key]) != null ? _opts$key : defaultOptions[key];
	  }
	  return options;
	}
	class ExpressionParser extends LValParser {
	  checkProto(prop, isRecord, protoRef, refExpressionErrors) {
	    if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
	      return;
	    }
	    const key = prop.key;
	    const name = key.type === "Identifier" ? key.name : key.value;
	    if (name === "__proto__") {
	      if (isRecord) {
	        this.raise(Errors.RecordNoProto, key);
	        return;
	      }
	      if (protoRef.used) {
	        if (refExpressionErrors) {
	          if (refExpressionErrors.doubleProtoLoc === null) {
	            refExpressionErrors.doubleProtoLoc = key.loc.start;
	          }
	        } else {
	          this.raise(Errors.DuplicateProto, key);
	        }
	      }
	      protoRef.used = true;
	    }
	  }
	  shouldExitDescending(expr, potentialArrowAt) {
	    return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
	  }
	  getExpression() {
	    this.enterInitialScopes();
	    this.nextToken();
	    const expr = this.parseExpression();
	    if (!this.match(139)) {
	      this.unexpected();
	    }
	    this.finalizeRemainingComments();
	    expr.comments = this.comments;
	    expr.errors = this.state.errors;
	    if (this.options.tokens) {
	      expr.tokens = this.tokens;
	    }
	    return expr;
	  }
	  parseExpression(disallowIn, refExpressionErrors) {
	    if (disallowIn) {
	      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
	    }
	    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
	  }
	  parseExpressionBase(refExpressionErrors) {
	    const startLoc = this.state.startLoc;
	    const expr = this.parseMaybeAssign(refExpressionErrors);
	    if (this.match(12)) {
	      const node = this.startNodeAt(startLoc);
	      node.expressions = [expr];
	      while (this.eat(12)) {
	        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
	      }
	      this.toReferencedList(node.expressions);
	      return this.finishNode(node, "SequenceExpression");
	    }
	    return expr;
	  }
	  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
	    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
	  }
	  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
	    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
	  }
	  setOptionalParametersError(refExpressionErrors, resultError) {
	    var _resultError$loc;
	    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
	  }
	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    const startLoc = this.state.startLoc;
	    if (this.isContextual(108)) {
	      if (this.prodParam.hasYield) {
	        let left = this.parseYield();
	        if (afterLeftParse) {
	          left = afterLeftParse.call(this, left, startLoc);
	        }
	        return left;
	      }
	    }
	    let ownExpressionErrors;
	    if (refExpressionErrors) {
	      ownExpressionErrors = false;
	    } else {
	      refExpressionErrors = new ExpressionErrors();
	      ownExpressionErrors = true;
	    }
	    const {
	      type
	    } = this.state;
	    if (type === 10 || tokenIsIdentifier(type)) {
	      this.state.potentialArrowAt = this.state.start;
	    }
	    let left = this.parseMaybeConditional(refExpressionErrors);
	    if (afterLeftParse) {
	      left = afterLeftParse.call(this, left, startLoc);
	    }
	    if (tokenIsAssignment(this.state.type)) {
	      const node = this.startNodeAt(startLoc);
	      const operator = this.state.value;
	      node.operator = operator;
	      if (this.match(29)) {
	        this.toAssignable(left, true);
	        node.left = left;
	        const startIndex = startLoc.index;
	        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
	          refExpressionErrors.doubleProtoLoc = null;
	        }
	        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
	          refExpressionErrors.shorthandAssignLoc = null;
	        }
	        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
	          this.checkDestructuringPrivate(refExpressionErrors);
	          refExpressionErrors.privateKeyLoc = null;
	        }
	      } else {
	        node.left = left;
	      }
	      this.next();
	      node.right = this.parseMaybeAssign();
	      this.checkLVal(left, {
	        in: this.finishNode(node, "AssignmentExpression")
	      });
	      return node;
	    } else if (ownExpressionErrors) {
	      this.checkExpressionErrors(refExpressionErrors, true);
	    }
	    return left;
	  }
	  parseMaybeConditional(refExpressionErrors) {
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseExprOps(refExpressionErrors);
	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }
	    return this.parseConditional(expr, startLoc, refExpressionErrors);
	  }
	  parseConditional(expr, startLoc, refExpressionErrors) {
	    if (this.eat(17)) {
	      const node = this.startNodeAt(startLoc);
	      node.test = expr;
	      node.consequent = this.parseMaybeAssignAllowIn();
	      this.expect(14);
	      node.alternate = this.parseMaybeAssign();
	      return this.finishNode(node, "ConditionalExpression");
	    }
	    return expr;
	  }
	  parseMaybeUnaryOrPrivate(refExpressionErrors) {
	    return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
	  }
	  parseExprOps(refExpressionErrors) {
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }
	    return this.parseExprOp(expr, startLoc, -1);
	  }
	  parseExprOp(left, leftStartLoc, minPrec) {
	    if (this.isPrivateName(left)) {
	      const value = this.getPrivateNameSV(left);
	      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
	        this.raise(Errors.PrivateInExpectedIn, left, {
	          identifierName: value
	        });
	      }
	      this.classScope.usePrivateName(value, left.loc.start);
	    }
	    const op = this.state.type;
	    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
	      let prec = tokenOperatorPrecedence(op);
	      if (prec > minPrec) {
	        if (op === 39) {
	          this.expectPlugin("pipelineOperator");
	          if (this.state.inFSharpPipelineDirectBody) {
	            return left;
	          }
	          this.checkPipelineAtInfixOperator(left, leftStartLoc);
	        }
	        const node = this.startNodeAt(leftStartLoc);
	        node.left = left;
	        node.operator = this.state.value;
	        const logical = op === 41 || op === 42;
	        const coalesce = op === 40;
	        if (coalesce) {
	          prec = tokenOperatorPrecedence(42);
	        }
	        this.next();
	        if (op === 39 && this.hasPlugin(["pipelineOperator", {
	          proposal: "minimal"
	        }])) {
	          if (this.state.type === 96 && this.prodParam.hasAwait) {
	            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
	          }
	        }
	        node.right = this.parseExprOpRightExpr(op, prec);
	        const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
	        const nextOp = this.state.type;
	        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
	          throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
	        }
	        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
	      }
	    }
	    return left;
	  }
	  parseExprOpRightExpr(op, prec) {
	    const startLoc = this.state.startLoc;
	    switch (op) {
	      case 39:
	        switch (this.getPluginOption("pipelineOperator", "proposal")) {
	          case "hack":
	            return this.withTopicBindingContext(() => {
	              return this.parseHackPipeBody();
	            });
	          case "smart":
	            return this.withTopicBindingContext(() => {
	              if (this.prodParam.hasYield && this.isContextual(108)) {
	                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
	              }
	              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
	            });
	          case "fsharp":
	            return this.withSoloAwaitPermittingContext(() => {
	              return this.parseFSharpPipelineBody(prec);
	            });
	        }
	      default:
	        return this.parseExprOpBaseRightExpr(op, prec);
	    }
	  }
	  parseExprOpBaseRightExpr(op, prec) {
	    const startLoc = this.state.startLoc;
	    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
	  }
	  parseHackPipeBody() {
	    var _body$extra;
	    const {
	      startLoc
	    } = this.state;
	    const body = this.parseMaybeAssign();
	    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
	    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
	      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {
	        type: body.type
	      });
	    }
	    if (!this.topicReferenceWasUsedInCurrentContext()) {
	      this.raise(Errors.PipeTopicUnused, startLoc);
	    }
	    return body;
	  }
	  checkExponentialAfterUnary(node) {
	    if (this.match(57)) {
	      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
	    }
	  }
	  parseMaybeUnary(refExpressionErrors, sawUnary) {
	    const startLoc = this.state.startLoc;
	    const isAwait = this.isContextual(96);
	    if (isAwait && this.isAwaitAllowed()) {
	      this.next();
	      const expr = this.parseAwait(startLoc);
	      if (!sawUnary) this.checkExponentialAfterUnary(expr);
	      return expr;
	    }
	    const update = this.match(34);
	    const node = this.startNode();
	    if (tokenIsPrefix(this.state.type)) {
	      node.operator = this.state.value;
	      node.prefix = true;
	      if (this.match(72)) {
	        this.expectPlugin("throwExpressions");
	      }
	      const isDelete = this.match(89);
	      this.next();
	      node.argument = this.parseMaybeUnary(null, true);
	      this.checkExpressionErrors(refExpressionErrors, true);
	      if (this.state.strict && isDelete) {
	        const arg = node.argument;
	        if (arg.type === "Identifier") {
	          this.raise(Errors.StrictDelete, node);
	        } else if (this.hasPropertyAsPrivateName(arg)) {
	          this.raise(Errors.DeletePrivateField, node);
	        }
	      }
	      if (!update) {
	        if (!sawUnary) {
	          this.checkExponentialAfterUnary(node);
	        }
	        return this.finishNode(node, "UnaryExpression");
	      }
	    }
	    const expr = this.parseUpdate(node, update, refExpressionErrors);
	    if (isAwait) {
	      const {
	        type
	      } = this.state;
	      const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
	      if (startsExpr && !this.isAmbiguousAwait()) {
	        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);
	        return this.parseAwait(startLoc);
	      }
	    }
	    return expr;
	  }
	  parseUpdate(node, update, refExpressionErrors) {
	    if (update) {
	      const updateExpressionNode = node;
	      this.checkLVal(updateExpressionNode.argument, {
	        in: this.finishNode(updateExpressionNode, "UpdateExpression")
	      });
	      return node;
	    }
	    const startLoc = this.state.startLoc;
	    let expr = this.parseExprSubscripts(refExpressionErrors);
	    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
	    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
	      const node = this.startNodeAt(startLoc);
	      node.operator = this.state.value;
	      node.prefix = false;
	      node.argument = expr;
	      this.next();
	      this.checkLVal(expr, {
	        in: expr = this.finishNode(node, "UpdateExpression")
	      });
	    }
	    return expr;
	  }
	  parseExprSubscripts(refExpressionErrors) {
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseExprAtom(refExpressionErrors);
	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }
	    return this.parseSubscripts(expr, startLoc);
	  }
	  parseSubscripts(base, startLoc, noCalls) {
	    const state = {
	      optionalChainMember: false,
	      maybeAsyncArrow: this.atPossibleAsyncArrow(base),
	      stop: false
	    };
	    do {
	      base = this.parseSubscript(base, startLoc, noCalls, state);
	      state.maybeAsyncArrow = false;
	    } while (!state.stop);
	    return base;
	  }
	  parseSubscript(base, startLoc, noCalls, state) {
	    const {
	      type
	    } = this.state;
	    if (!noCalls && type === 15) {
	      return this.parseBind(base, startLoc, noCalls, state);
	    } else if (tokenIsTemplate(type)) {
	      return this.parseTaggedTemplateExpression(base, startLoc, state);
	    }
	    let optional = false;
	    if (type === 18) {
	      if (noCalls) {
	        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);
	        if (this.lookaheadCharCode() === 40) {
	          state.stop = true;
	          return base;
	        }
	      }
	      state.optionalChainMember = optional = true;
	      this.next();
	    }
	    if (!noCalls && this.match(10)) {
	      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
	    } else {
	      const computed = this.eat(0);
	      if (computed || optional || this.eat(16)) {
	        return this.parseMember(base, startLoc, state, computed, optional);
	      } else {
	        state.stop = true;
	        return base;
	      }
	    }
	  }
	  parseMember(base, startLoc, state, computed, optional) {
	    const node = this.startNodeAt(startLoc);
	    node.object = base;
	    node.computed = computed;
	    if (computed) {
	      node.property = this.parseExpression();
	      this.expect(3);
	    } else if (this.match(138)) {
	      if (base.type === "Super") {
	        this.raise(Errors.SuperPrivateField, startLoc);
	      }
	      this.classScope.usePrivateName(this.state.value, this.state.startLoc);
	      node.property = this.parsePrivateName();
	    } else {
	      node.property = this.parseIdentifier(true);
	    }
	    if (state.optionalChainMember) {
	      node.optional = optional;
	      return this.finishNode(node, "OptionalMemberExpression");
	    } else {
	      return this.finishNode(node, "MemberExpression");
	    }
	  }
	  parseBind(base, startLoc, noCalls, state) {
	    const node = this.startNodeAt(startLoc);
	    node.object = base;
	    this.next();
	    node.callee = this.parseNoCallExpr();
	    state.stop = true;
	    return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
	  }
	  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    let refExpressionErrors = null;
	    this.state.maybeInArrowParameters = true;
	    this.next();
	    const node = this.startNodeAt(startLoc);
	    node.callee = base;
	    const {
	      maybeAsyncArrow,
	      optionalChainMember
	    } = state;
	    if (maybeAsyncArrow) {
	      this.expressionScope.enter(newAsyncArrowScope());
	      refExpressionErrors = new ExpressionErrors();
	    }
	    if (optionalChainMember) {
	      node.optional = optional;
	    }
	    if (optional) {
	      node.arguments = this.parseCallExpressionArguments(11);
	    } else {
	      node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
	    }
	    let finishedNode = this.finishCallExpression(node, optionalChainMember);
	    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
	      state.stop = true;
	      this.checkDestructuringPrivate(refExpressionErrors);
	      this.expressionScope.validateAsPattern();
	      this.expressionScope.exit();
	      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
	    } else {
	      if (maybeAsyncArrow) {
	        this.checkExpressionErrors(refExpressionErrors, true);
	        this.expressionScope.exit();
	      }
	      this.toReferencedArguments(finishedNode);
	    }
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return finishedNode;
	  }
	  toReferencedArguments(node, isParenthesizedExpr) {
	    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
	  }
	  parseTaggedTemplateExpression(base, startLoc, state) {
	    const node = this.startNodeAt(startLoc);
	    node.tag = base;
	    node.quasi = this.parseTemplate(true);
	    if (state.optionalChainMember) {
	      this.raise(Errors.OptionalChainingNoTemplate, startLoc);
	    }
	    return this.finishNode(node, "TaggedTemplateExpression");
	  }
	  atPossibleAsyncArrow(base) {
	    return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
	  }
	  expectImportAttributesPlugin() {
	    if (!this.hasPlugin("importAssertions")) {
	      this.expectPlugin("importAttributes");
	    }
	  }
	  finishCallExpression(node, optional) {
	    if (node.callee.type === "Import") {
	      if (node.arguments.length === 2) {
	        {
	          if (!this.hasPlugin("moduleAttributes")) {
	            this.expectImportAttributesPlugin();
	          }
	        }
	      }
	      if (node.arguments.length === 0 || node.arguments.length > 2) {
	        this.raise(Errors.ImportCallArity, node, {
	          maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
	        });
	      } else {
	        for (const arg of node.arguments) {
	          if (arg.type === "SpreadElement") {
	            this.raise(Errors.ImportCallSpreadArgument, arg);
	          }
	        }
	      }
	    }
	    return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
	  }
	  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
	    const elts = [];
	    let first = true;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(12);
	        if (this.match(close)) {
	          if (dynamicImport && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
	            this.raise(Errors.ImportCallArgumentTrailingComma, this.state.lastTokStartLoc);
	          }
	          if (nodeForExtra) {
	            this.addTrailingCommaExtraToNode(nodeForExtra);
	          }
	          this.next();
	          break;
	        }
	      }
	      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
	    }
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return elts;
	  }
	  shouldParseAsyncArrow() {
	    return this.match(19) && !this.canInsertSemicolon();
	  }
	  parseAsyncArrowFromCallExpression(node, call) {
	    var _call$extra;
	    this.resetPreviousNodeTrailingComments(call);
	    this.expect(19);
	    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
	    if (call.innerComments) {
	      setInnerComments(node, call.innerComments);
	    }
	    if (call.callee.trailingComments) {
	      setInnerComments(node, call.callee.trailingComments);
	    }
	    return node;
	  }
	  parseNoCallExpr() {
	    const startLoc = this.state.startLoc;
	    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
	  }
	  parseExprAtom(refExpressionErrors) {
	    let node;
	    let decorators = null;
	    const {
	      type
	    } = this.state;
	    switch (type) {
	      case 79:
	        return this.parseSuper();
	      case 83:
	        node = this.startNode();
	        this.next();
	        if (this.match(16)) {
	          return this.parseImportMetaProperty(node);
	        }
	        if (this.match(10)) {
	          if (this.options.createImportExpressions) {
	            return this.parseImportCall(node);
	          } else {
	            return this.finishNode(node, "Import");
	          }
	        } else {
	          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);
	          return this.finishNode(node, "Import");
	        }
	      case 78:
	        node = this.startNode();
	        this.next();
	        return this.finishNode(node, "ThisExpression");
	      case 90:
	        {
	          return this.parseDo(this.startNode(), false);
	        }
	      case 56:
	      case 31:
	        {
	          this.readRegexp();
	          return this.parseRegExpLiteral(this.state.value);
	        }
	      case 134:
	        return this.parseNumericLiteral(this.state.value);
	      case 135:
	        return this.parseBigIntLiteral(this.state.value);
	      case 136:
	        return this.parseDecimalLiteral(this.state.value);
	      case 133:
	        return this.parseStringLiteral(this.state.value);
	      case 84:
	        return this.parseNullLiteral();
	      case 85:
	        return this.parseBooleanLiteral(true);
	      case 86:
	        return this.parseBooleanLiteral(false);
	      case 10:
	        {
	          const canBeArrow = this.state.potentialArrowAt === this.state.start;
	          return this.parseParenAndDistinguishExpression(canBeArrow);
	        }
	      case 2:
	      case 1:
	        {
	          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
	        }
	      case 0:
	        {
	          return this.parseArrayLike(3, true, false, refExpressionErrors);
	        }
	      case 6:
	      case 7:
	        {
	          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
	        }
	      case 5:
	        {
	          return this.parseObjectLike(8, false, false, refExpressionErrors);
	        }
	      case 68:
	        return this.parseFunctionOrFunctionSent();
	      case 26:
	        decorators = this.parseDecorators();
	      case 80:
	        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
	      case 77:
	        return this.parseNewOrNewTarget();
	      case 25:
	      case 24:
	        return this.parseTemplate(false);
	      case 15:
	        {
	          node = this.startNode();
	          this.next();
	          node.object = null;
	          const callee = node.callee = this.parseNoCallExpr();
	          if (callee.type === "MemberExpression") {
	            return this.finishNode(node, "BindExpression");
	          } else {
	            throw this.raise(Errors.UnsupportedBind, callee);
	          }
	        }
	      case 138:
	        {
	          this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {
	            identifierName: this.state.value
	          });
	          return this.parsePrivateName();
	        }
	      case 33:
	        {
	          return this.parseTopicReferenceThenEqualsSign(54, "%");
	        }
	      case 32:
	        {
	          return this.parseTopicReferenceThenEqualsSign(44, "^");
	        }
	      case 37:
	      case 38:
	        {
	          return this.parseTopicReference("hack");
	        }
	      case 44:
	      case 54:
	      case 27:
	        {
	          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
	          if (pipeProposal) {
	            return this.parseTopicReference(pipeProposal);
	          }
	          this.unexpected();
	          break;
	        }
	      case 47:
	        {
	          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
	          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
	            this.expectOnePlugin(["jsx", "flow", "typescript"]);
	          } else {
	            this.unexpected();
	          }
	          break;
	        }
	      default:
	        if (tokenIsIdentifier(type)) {
	          if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
	            return this.parseModuleExpression();
	          }
	          const canBeArrow = this.state.potentialArrowAt === this.state.start;
	          const containsEsc = this.state.containsEsc;
	          const id = this.parseIdentifier();
	          if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
	            const {
	              type
	            } = this.state;
	            if (type === 68) {
	              this.resetPreviousNodeTrailingComments(id);
	              this.next();
	              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
	            } else if (tokenIsIdentifier(type)) {
	              if (this.lookaheadCharCode() === 61) {
	                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
	              } else {
	                return id;
	              }
	            } else if (type === 90) {
	              this.resetPreviousNodeTrailingComments(id);
	              return this.parseDo(this.startNodeAtNode(id), true);
	            }
	          }
	          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
	            this.next();
	            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
	          }
	          return id;
	        } else {
	          this.unexpected();
	        }
	    }
	  }
	  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
	    const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
	    if (pipeProposal) {
	      this.state.type = topicTokenType;
	      this.state.value = topicTokenValue;
	      this.state.pos--;
	      this.state.end--;
	      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
	      return this.parseTopicReference(pipeProposal);
	    } else {
	      this.unexpected();
	    }
	  }
	  parseTopicReference(pipeProposal) {
	    const node = this.startNode();
	    const startLoc = this.state.startLoc;
	    const tokenType = this.state.type;
	    this.next();
	    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
	  }
	  finishTopicReference(node, startLoc, pipeProposal, tokenType) {
	    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
	      const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
	      if (!this.topicReferenceIsAllowedInCurrentContext()) {
	        this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc);
	      }
	      this.registerTopicReference();
	      return this.finishNode(node, nodeType);
	    } else {
	      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {
	        token: tokenLabelName(tokenType)
	      });
	    }
	  }
	  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
	    switch (pipeProposal) {
	      case "hack":
	        {
	          return this.hasPlugin(["pipelineOperator", {
	            topicToken: tokenLabelName(tokenType)
	          }]);
	        }
	      case "smart":
	        return tokenType === 27;
	      default:
	        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
	    }
	  }
	  parseAsyncArrowUnaryFunction(node) {
	    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
	    const params = [this.parseIdentifier()];
	    this.prodParam.exit();
	    if (this.hasPrecedingLineBreak()) {
	      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());
	    }
	    this.expect(19);
	    return this.parseArrowExpression(node, params, true);
	  }
	  parseDo(node, isAsync) {
	    this.expectPlugin("doExpressions");
	    if (isAsync) {
	      this.expectPlugin("asyncDoExpressions");
	    }
	    node.async = isAsync;
	    this.next();
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    if (isAsync) {
	      this.prodParam.enter(2);
	      node.body = this.parseBlock();
	      this.prodParam.exit();
	    } else {
	      node.body = this.parseBlock();
	    }
	    this.state.labels = oldLabels;
	    return this.finishNode(node, "DoExpression");
	  }
	  parseSuper() {
	    const node = this.startNode();
	    this.next();
	    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
	      this.raise(Errors.SuperNotAllowed, node);
	    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
	      this.raise(Errors.UnexpectedSuper, node);
	    }
	    if (!this.match(10) && !this.match(0) && !this.match(16)) {
	      this.raise(Errors.UnsupportedSuper, node);
	    }
	    return this.finishNode(node, "Super");
	  }
	  parsePrivateName() {
	    const node = this.startNode();
	    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
	    const name = this.state.value;
	    this.next();
	    node.id = this.createIdentifier(id, name);
	    return this.finishNode(node, "PrivateName");
	  }
	  parseFunctionOrFunctionSent() {
	    const node = this.startNode();
	    this.next();
	    if (this.prodParam.hasYield && this.match(16)) {
	      const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
	      this.next();
	      if (this.match(103)) {
	        this.expectPlugin("functionSent");
	      } else if (!this.hasPlugin("functionSent")) {
	        this.unexpected();
	      }
	      return this.parseMetaProperty(node, meta, "sent");
	    }
	    return this.parseFunction(node);
	  }
	  parseMetaProperty(node, meta, propertyName) {
	    node.meta = meta;
	    const containsEsc = this.state.containsEsc;
	    node.property = this.parseIdentifier(true);
	    if (node.property.name !== propertyName || containsEsc) {
	      this.raise(Errors.UnsupportedMetaProperty, node.property, {
	        target: meta.name,
	        onlyValidPropertyName: propertyName
	      });
	    }
	    return this.finishNode(node, "MetaProperty");
	  }
	  parseImportMetaProperty(node) {
	    const id = this.createIdentifier(this.startNodeAtNode(node), "import");
	    this.next();
	    if (this.isContextual(101)) {
	      if (!this.inModule) {
	        this.raise(Errors.ImportMetaOutsideModule, id);
	      }
	      this.sawUnambiguousESM = true;
	    } else if (this.isContextual(105) || this.isContextual(97)) {
	      const isSource = this.isContextual(105);
	      if (!isSource) this.unexpected();
	      this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
	      if (!this.options.createImportExpressions) {
	        throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {
	          phase: this.state.value
	        });
	      }
	      this.next();
	      node.phase = isSource ? "source" : "defer";
	      return this.parseImportCall(node);
	    }
	    return this.parseMetaProperty(node, id, "meta");
	  }
	  parseLiteralAtNode(value, type, node) {
	    this.addExtra(node, "rawValue", value);
	    this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
	    node.value = value;
	    this.next();
	    return this.finishNode(node, type);
	  }
	  parseLiteral(value, type) {
	    const node = this.startNode();
	    return this.parseLiteralAtNode(value, type, node);
	  }
	  parseStringLiteral(value) {
	    return this.parseLiteral(value, "StringLiteral");
	  }
	  parseNumericLiteral(value) {
	    return this.parseLiteral(value, "NumericLiteral");
	  }
	  parseBigIntLiteral(value) {
	    return this.parseLiteral(value, "BigIntLiteral");
	  }
	  parseDecimalLiteral(value) {
	    return this.parseLiteral(value, "DecimalLiteral");
	  }
	  parseRegExpLiteral(value) {
	    const node = this.startNode();
	    this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
	    node.pattern = value.pattern;
	    node.flags = value.flags;
	    this.next();
	    return this.finishNode(node, "RegExpLiteral");
	  }
	  parseBooleanLiteral(value) {
	    const node = this.startNode();
	    node.value = value;
	    this.next();
	    return this.finishNode(node, "BooleanLiteral");
	  }
	  parseNullLiteral() {
	    const node = this.startNode();
	    this.next();
	    return this.finishNode(node, "NullLiteral");
	  }
	  parseParenAndDistinguishExpression(canBeArrow) {
	    const startLoc = this.state.startLoc;
	    let val;
	    this.next();
	    this.expressionScope.enter(newArrowHeadScope());
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.maybeInArrowParameters = true;
	    this.state.inFSharpPipelineDirectBody = false;
	    const innerStartLoc = this.state.startLoc;
	    const exprList = [];
	    const refExpressionErrors = new ExpressionErrors();
	    let first = true;
	    let spreadStartLoc;
	    let optionalCommaStartLoc;
	    while (!this.match(11)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
	        if (this.match(11)) {
	          optionalCommaStartLoc = this.state.startLoc;
	          break;
	        }
	      }
	      if (this.match(21)) {
	        const spreadNodeStartLoc = this.state.startLoc;
	        spreadStartLoc = this.state.startLoc;
	        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
	        if (!this.checkCommaAfterRest(41)) {
	          break;
	        }
	      } else {
	        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
	      }
	    }
	    const innerEndLoc = this.state.lastTokEndLoc;
	    this.expect(11);
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    let arrowNode = this.startNodeAt(startLoc);
	    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
	      this.checkDestructuringPrivate(refExpressionErrors);
	      this.expressionScope.validateAsPattern();
	      this.expressionScope.exit();
	      this.parseArrowExpression(arrowNode, exprList, false);
	      return arrowNode;
	    }
	    this.expressionScope.exit();
	    if (!exprList.length) {
	      this.unexpected(this.state.lastTokStartLoc);
	    }
	    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
	    if (spreadStartLoc) this.unexpected(spreadStartLoc);
	    this.checkExpressionErrors(refExpressionErrors, true);
	    this.toReferencedListDeep(exprList, true);
	    if (exprList.length > 1) {
	      val = this.startNodeAt(innerStartLoc);
	      val.expressions = exprList;
	      this.finishNode(val, "SequenceExpression");
	      this.resetEndLocation(val, innerEndLoc);
	    } else {
	      val = exprList[0];
	    }
	    return this.wrapParenthesis(startLoc, val);
	  }
	  wrapParenthesis(startLoc, expression) {
	    if (!this.options.createParenthesizedExpressions) {
	      this.addExtra(expression, "parenthesized", true);
	      this.addExtra(expression, "parenStart", startLoc.index);
	      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
	      return expression;
	    }
	    const parenExpression = this.startNodeAt(startLoc);
	    parenExpression.expression = expression;
	    return this.finishNode(parenExpression, "ParenthesizedExpression");
	  }
	  shouldParseArrow(params) {
	    return !this.canInsertSemicolon();
	  }
	  parseArrow(node) {
	    if (this.eat(19)) {
	      return node;
	    }
	  }
	  parseParenItem(node, startLoc) {
	    return node;
	  }
	  parseNewOrNewTarget() {
	    const node = this.startNode();
	    this.next();
	    if (this.match(16)) {
	      const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
	      this.next();
	      const metaProp = this.parseMetaProperty(node, meta, "target");
	      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
	        this.raise(Errors.UnexpectedNewTarget, metaProp);
	      }
	      return metaProp;
	    }
	    return this.parseNew(node);
	  }
	  parseNew(node) {
	    this.parseNewCallee(node);
	    if (this.eat(10)) {
	      const args = this.parseExprList(11);
	      this.toReferencedList(args);
	      node.arguments = args;
	    } else {
	      node.arguments = [];
	    }
	    return this.finishNode(node, "NewExpression");
	  }
	  parseNewCallee(node) {
	    const isImport = this.match(83);
	    const callee = this.parseNoCallExpr();
	    node.callee = callee;
	    if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
	      this.raise(Errors.ImportCallNotNewExpression, callee);
	    }
	  }
	  parseTemplateElement(isTagged) {
	    const {
	      start,
	      startLoc,
	      end,
	      value
	    } = this.state;
	    const elemStart = start + 1;
	    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
	    if (value === null) {
	      if (!isTagged) {
	        this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));
	      }
	    }
	    const isTail = this.match(24);
	    const endOffset = isTail ? -1 : -2;
	    const elemEnd = end + endOffset;
	    elem.value = {
	      raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
	      cooked: value === null ? null : value.slice(1, endOffset)
	    };
	    elem.tail = isTail;
	    this.next();
	    const finishedNode = this.finishNode(elem, "TemplateElement");
	    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
	    return finishedNode;
	  }
	  parseTemplate(isTagged) {
	    const node = this.startNode();
	    let curElt = this.parseTemplateElement(isTagged);
	    const quasis = [curElt];
	    const substitutions = [];
	    while (!curElt.tail) {
	      substitutions.push(this.parseTemplateSubstitution());
	      this.readTemplateContinuation();
	      quasis.push(curElt = this.parseTemplateElement(isTagged));
	    }
	    node.expressions = substitutions;
	    node.quasis = quasis;
	    return this.finishNode(node, "TemplateLiteral");
	  }
	  parseTemplateSubstitution() {
	    return this.parseExpression();
	  }
	  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
	    if (isRecord) {
	      this.expectPlugin("recordAndTuple");
	    }
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    const propHash = Object.create(null);
	    let first = true;
	    const node = this.startNode();
	    node.properties = [];
	    this.next();
	    while (!this.match(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(12);
	        if (this.match(close)) {
	          this.addTrailingCommaExtraToNode(node);
	          break;
	        }
	      }
	      let prop;
	      if (isPattern) {
	        prop = this.parseBindingProperty();
	      } else {
	        prop = this.parsePropertyDefinition(refExpressionErrors);
	        this.checkProto(prop, isRecord, propHash, refExpressionErrors);
	      }
	      if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
	        this.raise(Errors.InvalidRecordProperty, prop);
	      }
	      {
	        if (prop.shorthand) {
	          this.addExtra(prop, "shorthand", true);
	        }
	      }
	      node.properties.push(prop);
	    }
	    this.next();
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    let type = "ObjectExpression";
	    if (isPattern) {
	      type = "ObjectPattern";
	    } else if (isRecord) {
	      type = "RecordExpression";
	    }
	    return this.finishNode(node, type);
	  }
	  addTrailingCommaExtraToNode(node) {
	    this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index);
	    this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
	  }
	  maybeAsyncOrAccessorProp(prop) {
	    return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
	  }
	  parsePropertyDefinition(refExpressionErrors) {
	    let decorators = [];
	    if (this.match(26)) {
	      if (this.hasPlugin("decorators")) {
	        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);
	      }
	      while (this.match(26)) {
	        decorators.push(this.parseDecorator());
	      }
	    }
	    const prop = this.startNode();
	    let isAsync = false;
	    let isAccessor = false;
	    let startLoc;
	    if (this.match(21)) {
	      if (decorators.length) this.unexpected();
	      return this.parseSpread();
	    }
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }
	    prop.method = false;
	    if (refExpressionErrors) {
	      startLoc = this.state.startLoc;
	    }
	    let isGenerator = this.eat(55);
	    this.parsePropertyNamePrefixOperator(prop);
	    const containsEsc = this.state.containsEsc;
	    this.parsePropertyName(prop, refExpressionErrors);
	    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
	      const {
	        key
	      } = prop;
	      const keyName = key.name;
	      if (keyName === "async" && !this.hasPrecedingLineBreak()) {
	        isAsync = true;
	        this.resetPreviousNodeTrailingComments(key);
	        isGenerator = this.eat(55);
	        this.parsePropertyName(prop);
	      }
	      if (keyName === "get" || keyName === "set") {
	        isAccessor = true;
	        this.resetPreviousNodeTrailingComments(key);
	        prop.kind = keyName;
	        if (this.match(55)) {
	          isGenerator = true;
	          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {
	            kind: keyName
	          });
	          this.next();
	        }
	        this.parsePropertyName(prop);
	      }
	    }
	    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
	  }
	  getGetterSetterExpectedParamCount(method) {
	    return method.kind === "get" ? 0 : 1;
	  }
	  getObjectOrClassMethodParams(method) {
	    return method.params;
	  }
	  checkGetterSetterParams(method) {
	    var _params;
	    const paramCount = this.getGetterSetterExpectedParamCount(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    if (params.length !== paramCount) {
	      this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);
	    }
	    if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
	      this.raise(Errors.BadSetterRestParameter, method);
	    }
	  }
	  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
	    if (isAccessor) {
	      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
	      this.checkGetterSetterParams(finishedProp);
	      return finishedProp;
	    }
	    if (isAsync || isGenerator || this.match(10)) {
	      if (isPattern) this.unexpected();
	      prop.kind = "method";
	      prop.method = true;
	      return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
	    }
	  }
	  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
	    prop.shorthand = false;
	    if (this.eat(14)) {
	      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
	      return this.finishNode(prop, "ObjectProperty");
	    }
	    if (!prop.computed && prop.key.type === "Identifier") {
	      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
	      if (isPattern) {
	        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
	      } else if (this.match(29)) {
	        const shorthandAssignLoc = this.state.startLoc;
	        if (refExpressionErrors != null) {
	          if (refExpressionErrors.shorthandAssignLoc === null) {
	            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
	          }
	        } else {
	          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
	        }
	        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
	      } else {
	        prop.value = cloneIdentifier(prop.key);
	      }
	      prop.shorthand = true;
	      return this.finishNode(prop, "ObjectProperty");
	    }
	  }
	  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
	    if (!node) this.unexpected();
	    return node;
	  }
	  parsePropertyName(prop, refExpressionErrors) {
	    if (this.eat(0)) {
	      prop.computed = true;
	      prop.key = this.parseMaybeAssignAllowIn();
	      this.expect(3);
	    } else {
	      const {
	        type,
	        value
	      } = this.state;
	      let key;
	      if (tokenIsKeywordOrIdentifier(type)) {
	        key = this.parseIdentifier(true);
	      } else {
	        switch (type) {
	          case 134:
	            key = this.parseNumericLiteral(value);
	            break;
	          case 133:
	            key = this.parseStringLiteral(value);
	            break;
	          case 135:
	            key = this.parseBigIntLiteral(value);
	            break;
	          case 136:
	            key = this.parseDecimalLiteral(value);
	            break;
	          case 138:
	            {
	              const privateKeyLoc = this.state.startLoc;
	              if (refExpressionErrors != null) {
	                if (refExpressionErrors.privateKeyLoc === null) {
	                  refExpressionErrors.privateKeyLoc = privateKeyLoc;
	                }
	              } else {
	                this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
	              }
	              key = this.parsePrivateName();
	              break;
	            }
	          default:
	            this.unexpected();
	        }
	      }
	      prop.key = key;
	      if (type !== 138) {
	        prop.computed = false;
	      }
	    }
	  }
	  initFunction(node, isAsync) {
	    node.id = null;
	    node.generator = false;
	    node.async = isAsync;
	  }
	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
	    this.initFunction(node, isAsync);
	    node.generator = isGenerator;
	    this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
	    this.prodParam.enter(functionFlags(isAsync, node.generator));
	    this.parseFunctionParams(node, isConstructor);
	    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
	    this.prodParam.exit();
	    this.scope.exit();
	    return finishedNode;
	  }
	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    if (isTuple) {
	      this.expectPlugin("recordAndTuple");
	    }
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    const node = this.startNode();
	    this.next();
	    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
	  }
	  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
	    this.scope.enter(2 | 4);
	    let flags = functionFlags(isAsync, false);
	    if (!this.match(5) && this.prodParam.hasIn) {
	      flags |= 8;
	    }
	    this.prodParam.enter(flags);
	    this.initFunction(node, isAsync);
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    if (params) {
	      this.state.maybeInArrowParameters = true;
	      this.setArrowFunctionParameters(node, params, trailingCommaLoc);
	    }
	    this.state.maybeInArrowParameters = false;
	    this.parseFunctionBody(node, true);
	    this.prodParam.exit();
	    this.scope.exit();
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return this.finishNode(node, "ArrowFunctionExpression");
	  }
	  setArrowFunctionParameters(node, params, trailingCommaLoc) {
	    this.toAssignableList(params, trailingCommaLoc, false);
	    node.params = params;
	  }
	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    this.parseFunctionBody(node, false, isMethod);
	    return this.finishNode(node, type);
	  }
	  parseFunctionBody(node, allowExpression, isMethod = false) {
	    const isExpression = allowExpression && !this.match(5);
	    this.expressionScope.enter(newExpressionScope());
	    if (isExpression) {
	      node.body = this.parseMaybeAssign();
	      this.checkParams(node, false, allowExpression, false);
	    } else {
	      const oldStrict = this.state.strict;
	      const oldLabels = this.state.labels;
	      this.state.labels = [];
	      this.prodParam.enter(this.prodParam.currentFlags() | 4);
	      node.body = this.parseBlock(true, false, hasStrictModeDirective => {
	        const nonSimple = !this.isSimpleParamList(node.params);
	        if (hasStrictModeDirective && nonSimple) {
	          this.raise(Errors.IllegalLanguageModeDirective, (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node);
	        }
	        const strictModeChanged = !oldStrict && this.state.strict;
	        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
	        if (this.state.strict && node.id) {
	          this.checkIdentifier(node.id, 65, strictModeChanged);
	        }
	      });
	      this.prodParam.exit();
	      this.state.labels = oldLabels;
	    }
	    this.expressionScope.exit();
	  }
	  isSimpleParameter(node) {
	    return node.type === "Identifier";
	  }
	  isSimpleParamList(params) {
	    for (let i = 0, len = params.length; i < len; i++) {
	      if (!this.isSimpleParameter(params[i])) return false;
	    }
	    return true;
	  }
	  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
	    const checkClashes = !allowDuplicates && new Set();
	    const formalParameters = {
	      type: "FormalParameters"
	    };
	    for (const param of node.params) {
	      this.checkLVal(param, {
	        in: formalParameters,
	        binding: 5,
	        checkClashes,
	        strictModeChanged
	      });
	    }
	  }
	  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
	    const elts = [];
	    let first = true;
	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(12);
	        if (this.match(close)) {
	          if (nodeForExtra) {
	            this.addTrailingCommaExtraToNode(nodeForExtra);
	          }
	          this.next();
	          break;
	        }
	      }
	      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
	    }
	    return elts;
	  }
	  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
	    let elt;
	    if (this.match(12)) {
	      if (!allowEmpty) {
	        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {
	          unexpected: ","
	        });
	      }
	      elt = null;
	    } else if (this.match(21)) {
	      const spreadNodeStartLoc = this.state.startLoc;
	      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
	    } else if (this.match(17)) {
	      this.expectPlugin("partialApplication");
	      if (!allowPlaceholder) {
	        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
	      }
	      const node = this.startNode();
	      this.next();
	      elt = this.finishNode(node, "ArgumentPlaceholder");
	    } else {
	      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
	    }
	    return elt;
	  }
	  parseIdentifier(liberal) {
	    const node = this.startNode();
	    const name = this.parseIdentifierName(liberal);
	    return this.createIdentifier(node, name);
	  }
	  createIdentifier(node, name) {
	    node.name = name;
	    node.loc.identifierName = name;
	    return this.finishNode(node, "Identifier");
	  }
	  parseIdentifierName(liberal) {
	    let name;
	    const {
	      startLoc,
	      type
	    } = this.state;
	    if (tokenIsKeywordOrIdentifier(type)) {
	      name = this.state.value;
	    } else {
	      this.unexpected();
	    }
	    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);
	    if (liberal) {
	      if (tokenIsKeyword) {
	        this.replaceToken(132);
	      }
	    } else {
	      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);
	    }
	    this.next();
	    return name;
	  }
	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
	    if (word.length > 10) {
	      return;
	    }
	    if (!canBeReservedWord(word)) {
	      return;
	    }
	    if (checkKeywords && isKeyword(word)) {
	      this.raise(Errors.UnexpectedKeyword, startLoc, {
	        keyword: word
	      });
	      return;
	    }
	    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
	    if (reservedTest(word, this.inModule)) {
	      this.raise(Errors.UnexpectedReservedWord, startLoc, {
	        reservedWord: word
	      });
	      return;
	    } else if (word === "yield") {
	      if (this.prodParam.hasYield) {
	        this.raise(Errors.YieldBindingIdentifier, startLoc);
	        return;
	      }
	    } else if (word === "await") {
	      if (this.prodParam.hasAwait) {
	        this.raise(Errors.AwaitBindingIdentifier, startLoc);
	        return;
	      }
	      if (this.scope.inStaticBlock) {
	        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
	        return;
	      }
	      this.expressionScope.recordAsyncArrowParametersError(startLoc);
	    } else if (word === "arguments") {
	      if (this.scope.inClassAndNotInNonArrowFunction) {
	        this.raise(Errors.ArgumentsInClass, startLoc);
	        return;
	      }
	    }
	  }
	  isAwaitAllowed() {
	    if (this.prodParam.hasAwait) return true;
	    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
	      return true;
	    }
	    return false;
	  }
	  parseAwait(startLoc) {
	    const node = this.startNodeAt(startLoc);
	    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);
	    if (this.eat(55)) {
	      this.raise(Errors.ObsoleteAwaitStar, node);
	    }
	    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
	      if (this.isAmbiguousAwait()) {
	        this.ambiguousScriptDifferentAst = true;
	      } else {
	        this.sawUnambiguousESM = true;
	      }
	    }
	    if (!this.state.soloAwait) {
	      node.argument = this.parseMaybeUnary(null, true);
	    }
	    return this.finishNode(node, "AwaitExpression");
	  }
	  isAmbiguousAwait() {
	    if (this.hasPrecedingLineBreak()) return true;
	    const {
	      type
	    } = this.state;
	    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
	  }
	  parseYield() {
	    const node = this.startNode();
	    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);
	    this.next();
	    let delegating = false;
	    let argument = null;
	    if (!this.hasPrecedingLineBreak()) {
	      delegating = this.eat(55);
	      switch (this.state.type) {
	        case 13:
	        case 139:
	        case 8:
	        case 11:
	        case 3:
	        case 9:
	        case 14:
	        case 12:
	          if (!delegating) break;
	        default:
	          argument = this.parseMaybeAssign();
	      }
	    }
	    node.delegate = delegating;
	    node.argument = argument;
	    return this.finishNode(node, "YieldExpression");
	  }
	  parseImportCall(node) {
	    this.next();
	    node.source = this.parseMaybeAssignAllowIn();
	    if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
	      node.options = null;
	    }
	    if (this.eat(12)) {
	      this.expectImportAttributesPlugin();
	      if (!this.match(11)) {
	        node.options = this.parseMaybeAssignAllowIn();
	        this.eat(12);
	      }
	    }
	    this.expect(11);
	    return this.finishNode(node, "ImportExpression");
	  }
	  checkPipelineAtInfixOperator(left, leftStartLoc) {
	    if (this.hasPlugin(["pipelineOperator", {
	      proposal: "smart"
	    }])) {
	      if (left.type === "SequenceExpression") {
	        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
	      }
	    }
	  }
	  parseSmartPipelineBodyInStyle(childExpr, startLoc) {
	    if (this.isSimpleReference(childExpr)) {
	      const bodyNode = this.startNodeAt(startLoc);
	      bodyNode.callee = childExpr;
	      return this.finishNode(bodyNode, "PipelineBareFunction");
	    } else {
	      const bodyNode = this.startNodeAt(startLoc);
	      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
	      bodyNode.expression = childExpr;
	      return this.finishNode(bodyNode, "PipelineTopicExpression");
	    }
	  }
	  isSimpleReference(expression) {
	    switch (expression.type) {
	      case "MemberExpression":
	        return !expression.computed && this.isSimpleReference(expression.object);
	      case "Identifier":
	        return true;
	      default:
	        return false;
	    }
	  }
	  checkSmartPipeTopicBodyEarlyErrors(startLoc) {
	    if (this.match(19)) {
	      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
	    }
	    if (!this.topicReferenceWasUsedInCurrentContext()) {
	      this.raise(Errors.PipelineTopicUnused, startLoc);
	    }
	  }
	  withTopicBindingContext(callback) {
	    const outerContextTopicState = this.state.topicContext;
	    this.state.topicContext = {
	      maxNumOfResolvableTopics: 1,
	      maxTopicIndex: null
	    };
	    try {
	      return callback();
	    } finally {
	      this.state.topicContext = outerContextTopicState;
	    }
	  }
	  withSmartMixTopicForbiddingContext(callback) {
	    if (this.hasPlugin(["pipelineOperator", {
	      proposal: "smart"
	    }])) {
	      const outerContextTopicState = this.state.topicContext;
	      this.state.topicContext = {
	        maxNumOfResolvableTopics: 0,
	        maxTopicIndex: null
	      };
	      try {
	        return callback();
	      } finally {
	        this.state.topicContext = outerContextTopicState;
	      }
	    } else {
	      return callback();
	    }
	  }
	  withSoloAwaitPermittingContext(callback) {
	    const outerContextSoloAwaitState = this.state.soloAwait;
	    this.state.soloAwait = true;
	    try {
	      return callback();
	    } finally {
	      this.state.soloAwait = outerContextSoloAwaitState;
	    }
	  }
	  allowInAnd(callback) {
	    const flags = this.prodParam.currentFlags();
	    const prodParamToSet = 8 & ~flags;
	    if (prodParamToSet) {
	      this.prodParam.enter(flags | 8);
	      try {
	        return callback();
	      } finally {
	        this.prodParam.exit();
	      }
	    }
	    return callback();
	  }
	  disallowInAnd(callback) {
	    const flags = this.prodParam.currentFlags();
	    const prodParamToClear = 8 & flags;
	    if (prodParamToClear) {
	      this.prodParam.enter(flags & ~8);
	      try {
	        return callback();
	      } finally {
	        this.prodParam.exit();
	      }
	    }
	    return callback();
	  }
	  registerTopicReference() {
	    this.state.topicContext.maxTopicIndex = 0;
	  }
	  topicReferenceIsAllowedInCurrentContext() {
	    return this.state.topicContext.maxNumOfResolvableTopics >= 1;
	  }
	  topicReferenceWasUsedInCurrentContext() {
	    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
	  }
	  parseFSharpPipelineBody(prec) {
	    const startLoc = this.state.startLoc;
	    this.state.potentialArrowAt = this.state.start;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = true;
	    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return ret;
	  }
	  parseModuleExpression() {
	    this.expectPlugin("moduleBlocks");
	    const node = this.startNode();
	    this.next();
	    if (!this.match(5)) {
	      this.unexpected(null, 5);
	    }
	    const program = this.startNodeAt(this.state.endLoc);
	    this.next();
	    const revertScopes = this.initializeScopes(true);
	    this.enterInitialScopes();
	    try {
	      node.body = this.parseProgram(program, 8, "module");
	    } finally {
	      revertScopes();
	    }
	    return this.finishNode(node, "ModuleExpression");
	  }
	  parsePropertyNamePrefixOperator(prop) {}
	}
	const loopLabel = {
	    kind: 1
	  },
	  switchLabel = {
	    kind: 2
	  };
	const loneSurrogate = /[\uD800-\uDFFF]/u;
	const keywordRelationalOperator = /in(?:stanceof)?/y;
	function babel7CompatTokens(tokens, input) {
	  for (let i = 0; i < tokens.length; i++) {
	    const token = tokens[i];
	    const {
	      type
	    } = token;
	    if (typeof type === "number") {
	      {
	        if (type === 138) {
	          const {
	            loc,
	            start,
	            value,
	            end
	          } = token;
	          const hashEndPos = start + 1;
	          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
	          tokens.splice(i, 1, new Token({
	            type: getExportedToken(27),
	            value: "#",
	            start: start,
	            end: hashEndPos,
	            startLoc: loc.start,
	            endLoc: hashEndLoc
	          }), new Token({
	            type: getExportedToken(132),
	            value: value,
	            start: hashEndPos,
	            end: end,
	            startLoc: hashEndLoc,
	            endLoc: loc.end
	          }));
	          i++;
	          continue;
	        }
	        if (tokenIsTemplate(type)) {
	          const {
	            loc,
	            start,
	            value,
	            end
	          } = token;
	          const backquoteEnd = start + 1;
	          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
	          let startToken;
	          if (input.charCodeAt(start) === 96) {
	            startToken = new Token({
	              type: getExportedToken(22),
	              value: "`",
	              start: start,
	              end: backquoteEnd,
	              startLoc: loc.start,
	              endLoc: backquoteEndLoc
	            });
	          } else {
	            startToken = new Token({
	              type: getExportedToken(8),
	              value: "}",
	              start: start,
	              end: backquoteEnd,
	              startLoc: loc.start,
	              endLoc: backquoteEndLoc
	            });
	          }
	          let templateValue, templateElementEnd, templateElementEndLoc, endToken;
	          if (type === 24) {
	            templateElementEnd = end - 1;
	            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
	            templateValue = value === null ? null : value.slice(1, -1);
	            endToken = new Token({
	              type: getExportedToken(22),
	              value: "`",
	              start: templateElementEnd,
	              end: end,
	              startLoc: templateElementEndLoc,
	              endLoc: loc.end
	            });
	          } else {
	            templateElementEnd = end - 2;
	            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
	            templateValue = value === null ? null : value.slice(1, -2);
	            endToken = new Token({
	              type: getExportedToken(23),
	              value: "${",
	              start: templateElementEnd,
	              end: end,
	              startLoc: templateElementEndLoc,
	              endLoc: loc.end
	            });
	          }
	          tokens.splice(i, 1, startToken, new Token({
	            type: getExportedToken(20),
	            value: templateValue,
	            start: backquoteEnd,
	            end: templateElementEnd,
	            startLoc: backquoteEndLoc,
	            endLoc: templateElementEndLoc
	          }), endToken);
	          i += 2;
	          continue;
	        }
	      }
	      token.type = getExportedToken(type);
	    }
	  }
	  return tokens;
	}
	class StatementParser extends ExpressionParser {
	  parseTopLevel(file, program) {
	    file.program = this.parseProgram(program);
	    file.comments = this.comments;
	    if (this.options.tokens) {
	      file.tokens = babel7CompatTokens(this.tokens, this.input);
	    }
	    return this.finishNode(file, "File");
	  }
	  parseProgram(program, end = 139, sourceType = this.options.sourceType) {
	    program.sourceType = sourceType;
	    program.interpreter = this.parseInterpreterDirective();
	    this.parseBlockBody(program, true, true, end);
	    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
	      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
	        this.raise(Errors.ModuleExportUndefined, at, {
	          localName
	        });
	      }
	    }
	    let finishedProgram;
	    if (end === 139) {
	      finishedProgram = this.finishNode(program, "Program");
	    } else {
	      finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
	    }
	    return finishedProgram;
	  }
	  stmtToDirective(stmt) {
	    const directive = stmt;
	    directive.type = "Directive";
	    directive.value = directive.expression;
	    delete directive.expression;
	    const directiveLiteral = directive.value;
	    const expressionValue = directiveLiteral.value;
	    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
	    const val = directiveLiteral.value = raw.slice(1, -1);
	    this.addExtra(directiveLiteral, "raw", raw);
	    this.addExtra(directiveLiteral, "rawValue", val);
	    this.addExtra(directiveLiteral, "expressionValue", expressionValue);
	    directiveLiteral.type = "DirectiveLiteral";
	    return directive;
	  }
	  parseInterpreterDirective() {
	    if (!this.match(28)) {
	      return null;
	    }
	    const node = this.startNode();
	    node.value = this.state.value;
	    this.next();
	    return this.finishNode(node, "InterpreterDirective");
	  }
	  isLet() {
	    if (!this.isContextual(100)) {
	      return false;
	    }
	    return this.hasFollowingBindingAtom();
	  }
	  chStartsBindingIdentifier(ch, pos) {
	    if (isIdentifierStart(ch)) {
	      keywordRelationalOperator.lastIndex = pos;
	      if (keywordRelationalOperator.test(this.input)) {
	        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
	        if (!isIdentifierChar(endCh) && endCh !== 92) {
	          return false;
	        }
	      }
	      return true;
	    } else if (ch === 92) {
	      return true;
	    } else {
	      return false;
	    }
	  }
	  chStartsBindingPattern(ch) {
	    return ch === 91 || ch === 123;
	  }
	  hasFollowingBindingAtom() {
	    const next = this.nextTokenStart();
	    const nextCh = this.codePointAtPos(next);
	    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
	  }
	  hasInLineFollowingBindingIdentifierOrBrace() {
	    const next = this.nextTokenInLineStart();
	    const nextCh = this.codePointAtPos(next);
	    return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);
	  }
	  startsUsingForOf() {
	    const {
	      type,
	      containsEsc
	    } = this.lookahead();
	    if (type === 102 && !containsEsc) {
	      return false;
	    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
	      this.expectPlugin("explicitResourceManagement");
	      return true;
	    }
	  }
	  startsAwaitUsing() {
	    let next = this.nextTokenInLineStart();
	    if (this.isUnparsedContextual(next, "using")) {
	      next = this.nextTokenInLineStartSince(next + 5);
	      const nextCh = this.codePointAtPos(next);
	      if (this.chStartsBindingIdentifier(nextCh, next)) {
	        this.expectPlugin("explicitResourceManagement");
	        return true;
	      }
	    }
	    return false;
	  }
	  parseModuleItem() {
	    return this.parseStatementLike(1 | 2 | 4 | 8);
	  }
	  parseStatementListItem() {
	    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
	  }
	  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
	    let flags = 0;
	    if (this.options.annexB && !this.state.strict) {
	      flags |= 4;
	      if (allowLabeledFunction) {
	        flags |= 8;
	      }
	    }
	    return this.parseStatementLike(flags);
	  }
	  parseStatement() {
	    return this.parseStatementLike(0);
	  }
	  parseStatementLike(flags) {
	    let decorators = null;
	    if (this.match(26)) {
	      decorators = this.parseDecorators(true);
	    }
	    return this.parseStatementContent(flags, decorators);
	  }
	  parseStatementContent(flags, decorators) {
	    const starttype = this.state.type;
	    const node = this.startNode();
	    const allowDeclaration = !!(flags & 2);
	    const allowFunctionDeclaration = !!(flags & 4);
	    const topLevel = flags & 1;
	    switch (starttype) {
	      case 60:
	        return this.parseBreakContinueStatement(node, true);
	      case 63:
	        return this.parseBreakContinueStatement(node, false);
	      case 64:
	        return this.parseDebuggerStatement(node);
	      case 90:
	        return this.parseDoWhileStatement(node);
	      case 91:
	        return this.parseForStatement(node);
	      case 68:
	        if (this.lookaheadCharCode() === 46) break;
	        if (!allowFunctionDeclaration) {
	          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);
	        }
	        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
	      case 80:
	        if (!allowDeclaration) this.unexpected();
	        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
	      case 69:
	        return this.parseIfStatement(node);
	      case 70:
	        return this.parseReturnStatement(node);
	      case 71:
	        return this.parseSwitchStatement(node);
	      case 72:
	        return this.parseThrowStatement(node);
	      case 73:
	        return this.parseTryStatement(node);
	      case 96:
	        if (!this.state.containsEsc && this.startsAwaitUsing()) {
	          if (!this.isAwaitAllowed()) {
	            this.raise(Errors.AwaitUsingNotInAsyncContext, node);
	          } else if (!allowDeclaration) {
	            this.raise(Errors.UnexpectedLexicalDeclaration, node);
	          }
	          this.next();
	          return this.parseVarStatement(node, "await using");
	        }
	        break;
	      case 107:
	        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) {
	          break;
	        }
	        this.expectPlugin("explicitResourceManagement");
	        if (!this.scope.inModule && this.scope.inTopLevel) {
	          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);
	        } else if (!allowDeclaration) {
	          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
	        }
	        return this.parseVarStatement(node, "using");
	      case 100:
	        {
	          if (this.state.containsEsc) {
	            break;
	          }
	          const next = this.nextTokenStart();
	          const nextCh = this.codePointAtPos(next);
	          if (nextCh !== 91) {
	            if (!allowDeclaration && this.hasFollowingLineBreak()) break;
	            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
	              break;
	            }
	          }
	        }
	      case 75:
	        {
	          if (!allowDeclaration) {
	            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
	          }
	        }
	      case 74:
	        {
	          const kind = this.state.value;
	          return this.parseVarStatement(node, kind);
	        }
	      case 92:
	        return this.parseWhileStatement(node);
	      case 76:
	        return this.parseWithStatement(node);
	      case 5:
	        return this.parseBlock();
	      case 13:
	        return this.parseEmptyStatement(node);
	      case 83:
	        {
	          const nextTokenCharCode = this.lookaheadCharCode();
	          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
	            break;
	          }
	        }
	      case 82:
	        {
	          if (!this.options.allowImportExportEverywhere && !topLevel) {
	            this.raise(Errors.UnexpectedImportExport, this.state.startLoc);
	          }
	          this.next();
	          let result;
	          if (starttype === 83) {
	            result = this.parseImport(node);
	            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
	              this.sawUnambiguousESM = true;
	            }
	          } else {
	            result = this.parseExport(node, decorators);
	            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
	              this.sawUnambiguousESM = true;
	            }
	          }
	          this.assertModuleNodeAllowed(result);
	          return result;
	        }
	      default:
	        {
	          if (this.isAsyncFunction()) {
	            if (!allowDeclaration) {
	              this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);
	            }
	            this.next();
	            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
	          }
	        }
	    }
	    const maybeName = this.state.value;
	    const expr = this.parseExpression();
	    if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
	      return this.parseLabeledStatement(node, maybeName, expr, flags);
	    } else {
	      return this.parseExpressionStatement(node, expr, decorators);
	    }
	  }
	  assertModuleNodeAllowed(node) {
	    if (!this.options.allowImportExportEverywhere && !this.inModule) {
	      this.raise(Errors.ImportOutsideModule, node);
	    }
	  }
	  decoratorsEnabledBeforeExport() {
	    if (this.hasPlugin("decorators-legacy")) return true;
	    return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
	  }
	  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
	    if (maybeDecorators) {
	      if (classNode.decorators && classNode.decorators.length > 0) {
	        if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
	          this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);
	        }
	        classNode.decorators.unshift(...maybeDecorators);
	      } else {
	        classNode.decorators = maybeDecorators;
	      }
	      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
	      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
	    }
	    return classNode;
	  }
	  canHaveLeadingDecorator() {
	    return this.match(80);
	  }
	  parseDecorators(allowExport) {
	    const decorators = [];
	    do {
	      decorators.push(this.parseDecorator());
	    } while (this.match(26));
	    if (this.match(82)) {
	      if (!allowExport) {
	        this.unexpected();
	      }
	      if (!this.decoratorsEnabledBeforeExport()) {
	        this.raise(Errors.DecoratorExportClass, this.state.startLoc);
	      }
	    } else if (!this.canHaveLeadingDecorator()) {
	      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
	    }
	    return decorators;
	  }
	  parseDecorator() {
	    this.expectOnePlugin(["decorators", "decorators-legacy"]);
	    const node = this.startNode();
	    this.next();
	    if (this.hasPlugin("decorators")) {
	      const startLoc = this.state.startLoc;
	      let expr;
	      if (this.match(10)) {
	        const startLoc = this.state.startLoc;
	        this.next();
	        expr = this.parseExpression();
	        this.expect(11);
	        expr = this.wrapParenthesis(startLoc, expr);
	        const paramsStartLoc = this.state.startLoc;
	        node.expression = this.parseMaybeDecoratorArguments(expr);
	        if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
	          this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
	        }
	      } else {
	        expr = this.parseIdentifier(false);
	        while (this.eat(16)) {
	          const node = this.startNodeAt(startLoc);
	          node.object = expr;
	          if (this.match(138)) {
	            this.classScope.usePrivateName(this.state.value, this.state.startLoc);
	            node.property = this.parsePrivateName();
	          } else {
	            node.property = this.parseIdentifier(true);
	          }
	          node.computed = false;
	          expr = this.finishNode(node, "MemberExpression");
	        }
	        node.expression = this.parseMaybeDecoratorArguments(expr);
	      }
	    } else {
	      node.expression = this.parseExprSubscripts();
	    }
	    return this.finishNode(node, "Decorator");
	  }
	  parseMaybeDecoratorArguments(expr) {
	    if (this.eat(10)) {
	      const node = this.startNodeAtNode(expr);
	      node.callee = expr;
	      node.arguments = this.parseCallExpressionArguments(11, false);
	      this.toReferencedList(node.arguments);
	      return this.finishNode(node, "CallExpression");
	    }
	    return expr;
	  }
	  parseBreakContinueStatement(node, isBreak) {
	    this.next();
	    if (this.isLineTerminator()) {
	      node.label = null;
	    } else {
	      node.label = this.parseIdentifier();
	      this.semicolon();
	    }
	    this.verifyBreakContinue(node, isBreak);
	    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	  }
	  verifyBreakContinue(node, isBreak) {
	    let i;
	    for (i = 0; i < this.state.labels.length; ++i) {
	      const lab = this.state.labels[i];
	      if (node.label == null || lab.name === node.label.name) {
	        if (lab.kind != null && (isBreak || lab.kind === 1)) {
	          break;
	        }
	        if (node.label && isBreak) break;
	      }
	    }
	    if (i === this.state.labels.length) {
	      const type = isBreak ? "BreakStatement" : "ContinueStatement";
	      this.raise(Errors.IllegalBreakContinue, node, {
	        type
	      });
	    }
	  }
	  parseDebuggerStatement(node) {
	    this.next();
	    this.semicolon();
	    return this.finishNode(node, "DebuggerStatement");
	  }
	  parseHeaderExpression() {
	    this.expect(10);
	    const val = this.parseExpression();
	    this.expect(11);
	    return val;
	  }
	  parseDoWhileStatement(node) {
	    this.next();
	    this.state.labels.push(loopLabel);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
	    this.state.labels.pop();
	    this.expect(92);
	    node.test = this.parseHeaderExpression();
	    this.eat(13);
	    return this.finishNode(node, "DoWhileStatement");
	  }
	  parseForStatement(node) {
	    this.next();
	    this.state.labels.push(loopLabel);
	    let awaitAt = null;
	    if (this.isAwaitAllowed() && this.eatContextual(96)) {
	      awaitAt = this.state.lastTokStartLoc;
	    }
	    this.scope.enter(0);
	    this.expect(10);
	    if (this.match(13)) {
	      if (awaitAt !== null) {
	        this.unexpected(awaitAt);
	      }
	      return this.parseFor(node, null);
	    }
	    const startsWithLet = this.isContextual(100);
	    {
	      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
	      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
	      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
	      if (this.match(74) || this.match(75) || isLetOrUsing) {
	        const initNode = this.startNode();
	        let kind;
	        if (startsWithAwaitUsing) {
	          kind = "await using";
	          if (!this.isAwaitAllowed()) {
	            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);
	          }
	          this.next();
	        } else {
	          kind = this.state.value;
	        }
	        this.next();
	        this.parseVar(initNode, true, kind);
	        const init = this.finishNode(initNode, "VariableDeclaration");
	        const isForIn = this.match(58);
	        if (isForIn && starsWithUsingDeclaration) {
	          this.raise(Errors.ForInUsing, init);
	        }
	        if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {
	          return this.parseForIn(node, init, awaitAt);
	        }
	        if (awaitAt !== null) {
	          this.unexpected(awaitAt);
	        }
	        return this.parseFor(node, init);
	      }
	    }
	    const startsWithAsync = this.isContextual(95);
	    const refExpressionErrors = new ExpressionErrors();
	    const init = this.parseExpression(true, refExpressionErrors);
	    const isForOf = this.isContextual(102);
	    if (isForOf) {
	      if (startsWithLet) {
	        this.raise(Errors.ForOfLet, init);
	      }
	      if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
	        this.raise(Errors.ForOfAsync, init);
	      }
	    }
	    if (isForOf || this.match(58)) {
	      this.checkDestructuringPrivate(refExpressionErrors);
	      this.toAssignable(init, true);
	      const type = isForOf ? "ForOfStatement" : "ForInStatement";
	      this.checkLVal(init, {
	        in: {
	          type
	        }
	      });
	      return this.parseForIn(node, init, awaitAt);
	    } else {
	      this.checkExpressionErrors(refExpressionErrors, true);
	    }
	    if (awaitAt !== null) {
	      this.unexpected(awaitAt);
	    }
	    return this.parseFor(node, init);
	  }
	  parseFunctionStatement(node, isAsync, isHangingDeclaration) {
	    this.next();
	    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
	  }
	  parseIfStatement(node) {
	    this.next();
	    node.test = this.parseHeaderExpression();
	    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
	    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
	    return this.finishNode(node, "IfStatement");
	  }
	  parseReturnStatement(node) {
	    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
	      this.raise(Errors.IllegalReturn, this.state.startLoc);
	    }
	    this.next();
	    if (this.isLineTerminator()) {
	      node.argument = null;
	    } else {
	      node.argument = this.parseExpression();
	      this.semicolon();
	    }
	    return this.finishNode(node, "ReturnStatement");
	  }
	  parseSwitchStatement(node) {
	    this.next();
	    node.discriminant = this.parseHeaderExpression();
	    const cases = node.cases = [];
	    this.expect(5);
	    this.state.labels.push(switchLabel);
	    this.scope.enter(0);
	    let cur;
	    for (let sawDefault; !this.match(8);) {
	      if (this.match(61) || this.match(65)) {
	        const isCase = this.match(61);
	        if (cur) this.finishNode(cur, "SwitchCase");
	        cases.push(cur = this.startNode());
	        cur.consequent = [];
	        this.next();
	        if (isCase) {
	          cur.test = this.parseExpression();
	        } else {
	          if (sawDefault) {
	            this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);
	          }
	          sawDefault = true;
	          cur.test = null;
	        }
	        this.expect(14);
	      } else {
	        if (cur) {
	          cur.consequent.push(this.parseStatementListItem());
	        } else {
	          this.unexpected();
	        }
	      }
	    }
	    this.scope.exit();
	    if (cur) this.finishNode(cur, "SwitchCase");
	    this.next();
	    this.state.labels.pop();
	    return this.finishNode(node, "SwitchStatement");
	  }
	  parseThrowStatement(node) {
	    this.next();
	    if (this.hasPrecedingLineBreak()) {
	      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);
	    }
	    node.argument = this.parseExpression();
	    this.semicolon();
	    return this.finishNode(node, "ThrowStatement");
	  }
	  parseCatchClauseParam() {
	    const param = this.parseBindingAtom();
	    this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
	    this.checkLVal(param, {
	      in: {
	        type: "CatchClause"
	      },
	      binding: 9
	    });
	    return param;
	  }
	  parseTryStatement(node) {
	    this.next();
	    node.block = this.parseBlock();
	    node.handler = null;
	    if (this.match(62)) {
	      const clause = this.startNode();
	      this.next();
	      if (this.match(10)) {
	        this.expect(10);
	        clause.param = this.parseCatchClauseParam();
	        this.expect(11);
	      } else {
	        clause.param = null;
	        this.scope.enter(0);
	      }
	      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
	      this.scope.exit();
	      node.handler = this.finishNode(clause, "CatchClause");
	    }
	    node.finalizer = this.eat(67) ? this.parseBlock() : null;
	    if (!node.handler && !node.finalizer) {
	      this.raise(Errors.NoCatchOrFinally, node);
	    }
	    return this.finishNode(node, "TryStatement");
	  }
	  parseVarStatement(node, kind, allowMissingInitializer = false) {
	    this.next();
	    this.parseVar(node, false, kind, allowMissingInitializer);
	    this.semicolon();
	    return this.finishNode(node, "VariableDeclaration");
	  }
	  parseWhileStatement(node) {
	    this.next();
	    node.test = this.parseHeaderExpression();
	    this.state.labels.push(loopLabel);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
	    this.state.labels.pop();
	    return this.finishNode(node, "WhileStatement");
	  }
	  parseWithStatement(node) {
	    if (this.state.strict) {
	      this.raise(Errors.StrictWith, this.state.startLoc);
	    }
	    this.next();
	    node.object = this.parseHeaderExpression();
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
	    return this.finishNode(node, "WithStatement");
	  }
	  parseEmptyStatement(node) {
	    this.next();
	    return this.finishNode(node, "EmptyStatement");
	  }
	  parseLabeledStatement(node, maybeName, expr, flags) {
	    for (const label of this.state.labels) {
	      if (label.name === maybeName) {
	        this.raise(Errors.LabelRedeclaration, expr, {
	          labelName: maybeName
	        });
	      }
	    }
	    const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;
	    for (let i = this.state.labels.length - 1; i >= 0; i--) {
	      const label = this.state.labels[i];
	      if (label.statementStart === node.start) {
	        label.statementStart = this.state.start;
	        label.kind = kind;
	      } else {
	        break;
	      }
	    }
	    this.state.labels.push({
	      name: maybeName,
	      kind: kind,
	      statementStart: this.state.start
	    });
	    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
	    this.state.labels.pop();
	    node.label = expr;
	    return this.finishNode(node, "LabeledStatement");
	  }
	  parseExpressionStatement(node, expr, decorators) {
	    node.expression = expr;
	    this.semicolon();
	    return this.finishNode(node, "ExpressionStatement");
	  }
	  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
	    const node = this.startNode();
	    if (allowDirectives) {
	      this.state.strictErrors.clear();
	    }
	    this.expect(5);
	    if (createNewLexicalScope) {
	      this.scope.enter(0);
	    }
	    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
	    if (createNewLexicalScope) {
	      this.scope.exit();
	    }
	    return this.finishNode(node, "BlockStatement");
	  }
	  isValidDirective(stmt) {
	    return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
	  }
	  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
	    const body = node.body = [];
	    const directives = node.directives = [];
	    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
	  }
	  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
	    const oldStrict = this.state.strict;
	    let hasStrictModeDirective = false;
	    let parsedNonDirective = false;
	    while (!this.match(end)) {
	      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
	      if (directives && !parsedNonDirective) {
	        if (this.isValidDirective(stmt)) {
	          const directive = this.stmtToDirective(stmt);
	          directives.push(directive);
	          if (!hasStrictModeDirective && directive.value.value === "use strict") {
	            hasStrictModeDirective = true;
	            this.setStrict(true);
	          }
	          continue;
	        }
	        parsedNonDirective = true;
	        this.state.strictErrors.clear();
	      }
	      body.push(stmt);
	    }
	    afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
	    if (!oldStrict) {
	      this.setStrict(false);
	    }
	    this.next();
	  }
	  parseFor(node, init) {
	    node.init = init;
	    this.semicolon(false);
	    node.test = this.match(13) ? null : this.parseExpression();
	    this.semicolon(false);
	    node.update = this.match(11) ? null : this.parseExpression();
	    this.expect(11);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
	    this.scope.exit();
	    this.state.labels.pop();
	    return this.finishNode(node, "ForStatement");
	  }
	  parseForIn(node, init, awaitAt) {
	    const isForIn = this.match(58);
	    this.next();
	    if (isForIn) {
	      if (awaitAt !== null) this.unexpected(awaitAt);
	    } else {
	      node.await = awaitAt !== null;
	    }
	    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
	      this.raise(Errors.ForInOfLoopInitializer, init, {
	        type: isForIn ? "ForInStatement" : "ForOfStatement"
	      });
	    }
	    if (init.type === "AssignmentPattern") {
	      this.raise(Errors.InvalidLhs, init, {
	        ancestor: {
	          type: "ForStatement"
	        }
	      });
	    }
	    node.left = init;
	    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
	    this.expect(11);
	    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
	    this.scope.exit();
	    this.state.labels.pop();
	    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
	  }
	  parseVar(node, isFor, kind, allowMissingInitializer = false) {
	    const declarations = node.declarations = [];
	    node.kind = kind;
	    for (;;) {
	      const decl = this.startNode();
	      this.parseVarId(decl, kind);
	      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
	      if (decl.init === null && !allowMissingInitializer) {
	        if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
	          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
	            kind: "destructuring"
	          });
	        } else if ((kind === "const" || kind === "using" || kind === "await using") && !(this.match(58) || this.isContextual(102))) {
	          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
	            kind
	          });
	        }
	      }
	      declarations.push(this.finishNode(decl, "VariableDeclarator"));
	      if (!this.eat(12)) break;
	    }
	    return node;
	  }
	  parseVarId(decl, kind) {
	    const id = this.parseBindingAtom();
	    if (kind === "using" || kind === "await using") {
	      if (id.type === "ArrayPattern" || id.type === "ObjectPattern") {
	        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);
	      }
	    }
	    this.checkLVal(id, {
	      in: {
	        type: "VariableDeclarator"
	      },
	      binding: kind === "var" ? 5 : 8201
	    });
	    decl.id = id;
	  }
	  parseAsyncFunctionExpression(node) {
	    return this.parseFunction(node, 8);
	  }
	  parseFunction(node, flags = 0) {
	    const hangingDeclaration = flags & 2;
	    const isDeclaration = !!(flags & 1);
	    const requireId = isDeclaration && !(flags & 4);
	    const isAsync = !!(flags & 8);
	    this.initFunction(node, isAsync);
	    if (this.match(55)) {
	      if (hangingDeclaration) {
	        this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);
	      }
	      this.next();
	      node.generator = true;
	    }
	    if (isDeclaration) {
	      node.id = this.parseFunctionId(requireId);
	    }
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    this.state.maybeInArrowParameters = false;
	    this.scope.enter(2);
	    this.prodParam.enter(functionFlags(isAsync, node.generator));
	    if (!isDeclaration) {
	      node.id = this.parseFunctionId();
	    }
	    this.parseFunctionParams(node, false);
	    this.withSmartMixTopicForbiddingContext(() => {
	      this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
	    });
	    this.prodParam.exit();
	    this.scope.exit();
	    if (isDeclaration && !hangingDeclaration) {
	      this.registerFunctionStatementId(node);
	    }
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return node;
	  }
	  parseFunctionId(requireId) {
	    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
	  }
	  parseFunctionParams(node, isConstructor) {
	    this.expect(10);
	    this.expressionScope.enter(newParameterDeclarationScope());
	    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
	    this.expressionScope.exit();
	  }
	  registerFunctionStatementId(node) {
	    if (!node.id) return;
	    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
	  }
	  parseClass(node, isStatement, optionalId) {
	    this.next();
	    const oldStrict = this.state.strict;
	    this.state.strict = true;
	    this.parseClassId(node, isStatement, optionalId);
	    this.parseClassSuper(node);
	    node.body = this.parseClassBody(!!node.superClass, oldStrict);
	    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	  }
	  isClassProperty() {
	    return this.match(29) || this.match(13) || this.match(8);
	  }
	  isClassMethod() {
	    return this.match(10);
	  }
	  nameIsConstructor(key) {
	    return key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor";
	  }
	  isNonstaticConstructor(method) {
	    return !method.computed && !method.static && this.nameIsConstructor(method.key);
	  }
	  parseClassBody(hadSuperClass, oldStrict) {
	    this.classScope.enter();
	    const state = {
	      hadConstructor: false,
	      hadSuperClass
	    };
	    let decorators = [];
	    const classBody = this.startNode();
	    classBody.body = [];
	    this.expect(5);
	    this.withSmartMixTopicForbiddingContext(() => {
	      while (!this.match(8)) {
	        if (this.eat(13)) {
	          if (decorators.length > 0) {
	            throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
	          }
	          continue;
	        }
	        if (this.match(26)) {
	          decorators.push(this.parseDecorator());
	          continue;
	        }
	        const member = this.startNode();
	        if (decorators.length) {
	          member.decorators = decorators;
	          this.resetStartLocationFromNode(member, decorators[0]);
	          decorators = [];
	        }
	        this.parseClassMember(classBody, member, state);
	        if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
	          this.raise(Errors.DecoratorConstructor, member);
	        }
	      }
	    });
	    this.state.strict = oldStrict;
	    this.next();
	    if (decorators.length) {
	      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
	    }
	    this.classScope.exit();
	    return this.finishNode(classBody, "ClassBody");
	  }
	  parseClassMemberFromModifier(classBody, member) {
	    const key = this.parseIdentifier(true);
	    if (this.isClassMethod()) {
	      const method = member;
	      method.kind = "method";
	      method.computed = false;
	      method.key = key;
	      method.static = false;
	      this.pushClassMethod(classBody, method, false, false, false, false);
	      return true;
	    } else if (this.isClassProperty()) {
	      const prop = member;
	      prop.computed = false;
	      prop.key = key;
	      prop.static = false;
	      classBody.body.push(this.parseClassProperty(prop));
	      return true;
	    }
	    this.resetPreviousNodeTrailingComments(key);
	    return false;
	  }
	  parseClassMember(classBody, member, state) {
	    const isStatic = this.isContextual(106);
	    if (isStatic) {
	      if (this.parseClassMemberFromModifier(classBody, member)) {
	        return;
	      }
	      if (this.eat(5)) {
	        this.parseClassStaticBlock(classBody, member);
	        return;
	      }
	    }
	    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	  }
	  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
	    const publicMethod = member;
	    const privateMethod = member;
	    const publicProp = member;
	    const privateProp = member;
	    const accessorProp = member;
	    const method = publicMethod;
	    const publicMember = publicMethod;
	    member.static = isStatic;
	    this.parsePropertyNamePrefixOperator(member);
	    if (this.eat(55)) {
	      method.kind = "method";
	      const isPrivateName = this.match(138);
	      this.parseClassElementName(method);
	      if (isPrivateName) {
	        this.pushClassPrivateMethod(classBody, privateMethod, true, false);
	        return;
	      }
	      if (this.isNonstaticConstructor(publicMethod)) {
	        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);
	      }
	      this.pushClassMethod(classBody, publicMethod, true, false, false, false);
	      return;
	    }
	    const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type);
	    const key = this.parseClassElementName(member);
	    const maybeContextualKw = isContextual ? key.name : null;
	    const isPrivate = this.isPrivateName(key);
	    const maybeQuestionTokenStartLoc = this.state.startLoc;
	    this.parsePostMemberNameModifiers(publicMember);
	    if (this.isClassMethod()) {
	      method.kind = "method";
	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
	        return;
	      }
	      const isConstructor = this.isNonstaticConstructor(publicMethod);
	      let allowsDirectSuper = false;
	      if (isConstructor) {
	        publicMethod.kind = "constructor";
	        if (state.hadConstructor && !this.hasPlugin("typescript")) {
	          this.raise(Errors.DuplicateConstructor, key);
	        }
	        if (isConstructor && this.hasPlugin("typescript") && member.override) {
	          this.raise(Errors.OverrideOnConstructor, key);
	        }
	        state.hadConstructor = true;
	        allowsDirectSuper = state.hadSuperClass;
	      }
	      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
	    } else if (this.isClassProperty()) {
	      if (isPrivate) {
	        this.pushClassPrivateProperty(classBody, privateProp);
	      } else {
	        this.pushClassProperty(classBody, publicProp);
	      }
	    } else if (maybeContextualKw === "async" && !this.isLineTerminator()) {
	      this.resetPreviousNodeTrailingComments(key);
	      const isGenerator = this.eat(55);
	      if (publicMember.optional) {
	        this.unexpected(maybeQuestionTokenStartLoc);
	      }
	      method.kind = "method";
	      const isPrivate = this.match(138);
	      this.parseClassElementName(method);
	      this.parsePostMemberNameModifiers(publicMember);
	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
	      } else {
	        if (this.isNonstaticConstructor(publicMethod)) {
	          this.raise(Errors.ConstructorIsAsync, publicMethod.key);
	        }
	        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
	      }
	    } else if ((maybeContextualKw === "get" || maybeContextualKw === "set") && !(this.match(55) && this.isLineTerminator())) {
	      this.resetPreviousNodeTrailingComments(key);
	      method.kind = maybeContextualKw;
	      const isPrivate = this.match(138);
	      this.parseClassElementName(publicMethod);
	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
	      } else {
	        if (this.isNonstaticConstructor(publicMethod)) {
	          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);
	        }
	        this.pushClassMethod(classBody, publicMethod, false, false, false, false);
	      }
	      this.checkGetterSetterParams(publicMethod);
	    } else if (maybeContextualKw === "accessor" && !this.isLineTerminator()) {
	      this.expectPlugin("decoratorAutoAccessors");
	      this.resetPreviousNodeTrailingComments(key);
	      const isPrivate = this.match(138);
	      this.parseClassElementName(publicProp);
	      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);
	    } else if (this.isLineTerminator()) {
	      if (isPrivate) {
	        this.pushClassPrivateProperty(classBody, privateProp);
	      } else {
	        this.pushClassProperty(classBody, publicProp);
	      }
	    } else {
	      this.unexpected();
	    }
	  }
	  parseClassElementName(member) {
	    const {
	      type,
	      value
	    } = this.state;
	    if ((type === 132 || type === 133) && member.static && value === "prototype") {
	      this.raise(Errors.StaticPrototype, this.state.startLoc);
	    }
	    if (type === 138) {
	      if (value === "constructor") {
	        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
	      }
	      const key = this.parsePrivateName();
	      member.key = key;
	      return key;
	    }
	    this.parsePropertyName(member);
	    return member.key;
	  }
	  parseClassStaticBlock(classBody, member) {
	    var _member$decorators;
	    this.scope.enter(64 | 128 | 16);
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    this.prodParam.enter(0);
	    const body = member.body = [];
	    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);
	    this.prodParam.exit();
	    this.scope.exit();
	    this.state.labels = oldLabels;
	    classBody.body.push(this.finishNode(member, "StaticBlock"));
	    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
	      this.raise(Errors.DecoratorStaticBlock, member);
	    }
	  }
	  pushClassProperty(classBody, prop) {
	    if (!prop.computed && this.nameIsConstructor(prop.key)) {
	      this.raise(Errors.ConstructorClassField, prop.key);
	    }
	    classBody.body.push(this.parseClassProperty(prop));
	  }
	  pushClassPrivateProperty(classBody, prop) {
	    const node = this.parseClassPrivateProperty(prop);
	    classBody.body.push(node);
	    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
	  }
	  pushClassAccessorProperty(classBody, prop, isPrivate) {
	    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {
	      this.raise(Errors.ConstructorClassField, prop.key);
	    }
	    const node = this.parseClassAccessorProperty(prop);
	    classBody.body.push(node);
	    if (isPrivate) {
	      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
	    }
	  }
	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
	  }
	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
	    classBody.body.push(node);
	    const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
	    this.declareClassPrivateMethodInScope(node, kind);
	  }
	  declareClassPrivateMethodInScope(node, kind) {
	    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
	  }
	  parsePostMemberNameModifiers(methodOrProp) {}
	  parseClassPrivateProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassPrivateProperty");
	  }
	  parseClassProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassProperty");
	  }
	  parseClassAccessorProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassAccessorProperty");
	  }
	  parseInitializer(node) {
	    this.scope.enter(64 | 16);
	    this.expressionScope.enter(newExpressionScope());
	    this.prodParam.enter(0);
	    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
	    this.expressionScope.exit();
	    this.prodParam.exit();
	    this.scope.exit();
	  }
	  parseClassId(node, isStatement, optionalId, bindingType = 8331) {
	    if (tokenIsIdentifier(this.state.type)) {
	      node.id = this.parseIdentifier();
	      if (isStatement) {
	        this.declareNameFromIdentifier(node.id, bindingType);
	      }
	    } else {
	      if (optionalId || !isStatement) {
	        node.id = null;
	      } else {
	        throw this.raise(Errors.MissingClassName, this.state.startLoc);
	      }
	    }
	  }
	  parseClassSuper(node) {
	    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
	  }
	  parseExport(node, decorators) {
	    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
	    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
	    const parseAfterDefault = !hasDefault || this.eat(12);
	    const hasStar = parseAfterDefault && this.eatExportStar(node);
	    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
	    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
	    const isFromRequired = hasDefault || hasStar;
	    if (hasStar && !hasNamespace) {
	      if (hasDefault) this.unexpected();
	      if (decorators) {
	        throw this.raise(Errors.UnsupportedDecoratorExport, node);
	      }
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
	    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
	      this.unexpected(null, 5);
	    }
	    if (hasNamespace && parseAfterNamespace) {
	      this.unexpected(null, 98);
	    }
	    let hasDeclaration;
	    if (isFromRequired || hasSpecifiers) {
	      hasDeclaration = false;
	      if (decorators) {
	        throw this.raise(Errors.UnsupportedDecoratorExport, node);
	      }
	      this.parseExportFrom(node, isFromRequired);
	    } else {
	      hasDeclaration = this.maybeParseExportDeclaration(node);
	    }
	    if (isFromRequired || hasSpecifiers || hasDeclaration) {
	      var _node2$declaration;
	      const node2 = node;
	      this.checkExport(node2, true, false, !!node2.source);
	      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
	        this.maybeTakeDecorators(decorators, node2.declaration, node2);
	      } else if (decorators) {
	        throw this.raise(Errors.UnsupportedDecoratorExport, node);
	      }
	      return this.finishNode(node2, "ExportNamedDeclaration");
	    }
	    if (this.eat(65)) {
	      const node2 = node;
	      const decl = this.parseExportDefaultExpression();
	      node2.declaration = decl;
	      if (decl.type === "ClassDeclaration") {
	        this.maybeTakeDecorators(decorators, decl, node2);
	      } else if (decorators) {
	        throw this.raise(Errors.UnsupportedDecoratorExport, node);
	      }
	      this.checkExport(node2, true, true);
	      return this.finishNode(node2, "ExportDefaultDeclaration");
	    }
	    this.unexpected(null, 5);
	  }
	  eatExportStar(node) {
	    return this.eat(55);
	  }
	  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
	    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
	      this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
	      const id = maybeDefaultIdentifier || this.parseIdentifier(true);
	      const specifier = this.startNodeAtNode(id);
	      specifier.exported = id;
	      node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	      return true;
	    }
	    return false;
	  }
	  maybeParseExportNamespaceSpecifier(node) {
	    if (this.isContextual(93)) {
	      var _ref, _ref$specifiers;
	      (_ref$specifiers = (_ref = node).specifiers) != null ? _ref$specifiers : _ref.specifiers = [];
	      const specifier = this.startNodeAt(this.state.lastTokStartLoc);
	      this.next();
	      specifier.exported = this.parseModuleExportName();
	      node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
	      return true;
	    }
	    return false;
	  }
	  maybeParseExportNamedSpecifiers(node) {
	    if (this.match(5)) {
	      const node2 = node;
	      if (!node2.specifiers) node2.specifiers = [];
	      const isTypeExport = node2.exportKind === "type";
	      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
	      node2.source = null;
	      node2.declaration = null;
	      if (this.hasPlugin("importAssertions")) {
	        node2.assertions = [];
	      }
	      return true;
	    }
	    return false;
	  }
	  maybeParseExportDeclaration(node) {
	    if (this.shouldParseExportDeclaration()) {
	      node.specifiers = [];
	      node.source = null;
	      if (this.hasPlugin("importAssertions")) {
	        node.assertions = [];
	      }
	      node.declaration = this.parseExportDeclaration(node);
	      return true;
	    }
	    return false;
	  }
	  isAsyncFunction() {
	    if (!this.isContextual(95)) return false;
	    const next = this.nextTokenInLineStart();
	    return this.isUnparsedContextual(next, "function");
	  }
	  parseExportDefaultExpression() {
	    const expr = this.startNode();
	    if (this.match(68)) {
	      this.next();
	      return this.parseFunction(expr, 1 | 4);
	    } else if (this.isAsyncFunction()) {
	      this.next();
	      this.next();
	      return this.parseFunction(expr, 1 | 4 | 8);
	    }
	    if (this.match(80)) {
	      return this.parseClass(expr, true, true);
	    }
	    if (this.match(26)) {
	      if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
	        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
	      }
	      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
	    }
	    if (this.match(75) || this.match(74) || this.isLet()) {
	      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
	    }
	    const res = this.parseMaybeAssignAllowIn();
	    this.semicolon();
	    return res;
	  }
	  parseExportDeclaration(node) {
	    if (this.match(80)) {
	      const node = this.parseClass(this.startNode(), true, false);
	      return node;
	    }
	    return this.parseStatementListItem();
	  }
	  isExportDefaultSpecifier() {
	    const {
	      type
	    } = this.state;
	    if (tokenIsIdentifier(type)) {
	      if (type === 95 && !this.state.containsEsc || type === 100) {
	        return false;
	      }
	      if ((type === 130 || type === 129) && !this.state.containsEsc) {
	        const {
	          type: nextType
	        } = this.lookahead();
	        if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
	          this.expectOnePlugin(["flow", "typescript"]);
	          return false;
	        }
	      }
	    } else if (!this.match(65)) {
	      return false;
	    }
	    const next = this.nextTokenStart();
	    const hasFrom = this.isUnparsedContextual(next, "from");
	    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
	      return true;
	    }
	    if (this.match(65) && hasFrom) {
	      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
	      return nextAfterFrom === 34 || nextAfterFrom === 39;
	    }
	    return false;
	  }
	  parseExportFrom(node, expect) {
	    if (this.eatContextual(98)) {
	      node.source = this.parseImportSource();
	      this.checkExport(node);
	      this.maybeParseImportAttributes(node);
	      this.checkJSONModuleImport(node);
	    } else if (expect) {
	      this.unexpected();
	    }
	    this.semicolon();
	  }
	  shouldParseExportDeclaration() {
	    const {
	      type
	    } = this.state;
	    if (type === 26) {
	      this.expectOnePlugin(["decorators", "decorators-legacy"]);
	      if (this.hasPlugin("decorators")) {
	        if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
	          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
	        }
	        return true;
	      }
	    }
	    if (this.isContextual(107)) {
	      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
	      return true;
	    }
	    if (this.isContextual(96) && this.startsAwaitUsing()) {
	      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
	      return true;
	    }
	    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
	  }
	  checkExport(node, checkNames, isDefault, isFrom) {
	    if (checkNames) {
	      var _node$specifiers;
	      if (isDefault) {
	        this.checkDuplicateExports(node, "default");
	        if (this.hasPlugin("exportDefaultFrom")) {
	          var _declaration$extra;
	          const declaration = node.declaration;
	          if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
	            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
	          }
	        }
	      } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
	        for (const specifier of node.specifiers) {
	          const {
	            exported
	          } = specifier;
	          const exportName = exported.type === "Identifier" ? exported.name : exported.value;
	          this.checkDuplicateExports(specifier, exportName);
	          if (!isFrom && specifier.local) {
	            const {
	              local
	            } = specifier;
	            if (local.type !== "Identifier") {
	              this.raise(Errors.ExportBindingIsString, specifier, {
	                localName: local.value,
	                exportName
	              });
	            } else {
	              this.checkReservedWord(local.name, local.loc.start, true, false);
	              this.scope.checkLocalExport(local);
	            }
	          }
	        }
	      } else if (node.declaration) {
	        const decl = node.declaration;
	        if (decl.type === "FunctionDeclaration" || decl.type === "ClassDeclaration") {
	          const {
	            id
	          } = decl;
	          if (!id) throw new Error("Assertion failure");
	          this.checkDuplicateExports(node, id.name);
	        } else if (decl.type === "VariableDeclaration") {
	          for (const declaration of decl.declarations) {
	            this.checkDeclaration(declaration.id);
	          }
	        }
	      }
	    }
	  }
	  checkDeclaration(node) {
	    if (node.type === "Identifier") {
	      this.checkDuplicateExports(node, node.name);
	    } else if (node.type === "ObjectPattern") {
	      for (const prop of node.properties) {
	        this.checkDeclaration(prop);
	      }
	    } else if (node.type === "ArrayPattern") {
	      for (const elem of node.elements) {
	        if (elem) {
	          this.checkDeclaration(elem);
	        }
	      }
	    } else if (node.type === "ObjectProperty") {
	      this.checkDeclaration(node.value);
	    } else if (node.type === "RestElement") {
	      this.checkDeclaration(node.argument);
	    } else if (node.type === "AssignmentPattern") {
	      this.checkDeclaration(node.left);
	    }
	  }
	  checkDuplicateExports(node, exportName) {
	    if (this.exportedIdentifiers.has(exportName)) {
	      if (exportName === "default") {
	        this.raise(Errors.DuplicateDefaultExport, node);
	      } else {
	        this.raise(Errors.DuplicateExport, node, {
	          exportName
	        });
	      }
	    }
	    this.exportedIdentifiers.add(exportName);
	  }
	  parseExportSpecifiers(isInTypeExport) {
	    const nodes = [];
	    let first = true;
	    this.expect(5);
	    while (!this.eat(8)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(12);
	        if (this.eat(8)) break;
	      }
	      const isMaybeTypeOnly = this.isContextual(130);
	      const isString = this.match(133);
	      const node = this.startNode();
	      node.local = this.parseModuleExportName();
	      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
	    }
	    return nodes;
	  }
	  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
	    if (this.eatContextual(93)) {
	      node.exported = this.parseModuleExportName();
	    } else if (isString) {
	      node.exported = cloneStringLiteral(node.local);
	    } else if (!node.exported) {
	      node.exported = cloneIdentifier(node.local);
	    }
	    return this.finishNode(node, "ExportSpecifier");
	  }
	  parseModuleExportName() {
	    if (this.match(133)) {
	      const result = this.parseStringLiteral(this.state.value);
	      const surrogate = loneSurrogate.exec(result.value);
	      if (surrogate) {
	        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {
	          surrogateCharCode: surrogate[0].charCodeAt(0)
	        });
	      }
	      return result;
	    }
	    return this.parseIdentifier(true);
	  }
	  isJSONModuleImport(node) {
	    if (node.assertions != null) {
	      return node.assertions.some(({
	        key,
	        value
	      }) => {
	        return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
	      });
	    }
	    return false;
	  }
	  checkImportReflection(node) {
	    const {
	      specifiers
	    } = node;
	    const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
	    if (node.phase === "source") {
	      if (singleBindingType !== "ImportDefaultSpecifier") {
	        this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
	      }
	    } else if (node.phase === "defer") {
	      if (singleBindingType !== "ImportNamespaceSpecifier") {
	        this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
	      }
	    } else if (node.module) {
	      var _node$assertions;
	      if (singleBindingType !== "ImportDefaultSpecifier") {
	        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);
	      }
	      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
	        this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
	      }
	    }
	  }
	  checkJSONModuleImport(node) {
	    if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
	      const {
	        specifiers
	      } = node;
	      if (specifiers != null) {
	        const nonDefaultNamedSpecifier = specifiers.find(specifier => {
	          let imported;
	          if (specifier.type === "ExportSpecifier") {
	            imported = specifier.local;
	          } else if (specifier.type === "ImportSpecifier") {
	            imported = specifier.imported;
	          }
	          if (imported !== undefined) {
	            return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
	          }
	        });
	        if (nonDefaultNamedSpecifier !== undefined) {
	          this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
	        }
	      }
	    }
	  }
	  isPotentialImportPhase(isExport) {
	    if (isExport) return false;
	    return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
	  }
	  applyImportPhase(node, isExport, phase, loc) {
	    if (isExport) {
	      return;
	    }
	    if (phase === "module") {
	      this.expectPlugin("importReflection", loc);
	      node.module = true;
	    } else if (this.hasPlugin("importReflection")) {
	      node.module = false;
	    }
	    if (phase === "source") {
	      this.expectPlugin("sourcePhaseImports", loc);
	      node.phase = "source";
	    } else if (phase === "defer") {
	      this.expectPlugin("deferredImportEvaluation", loc);
	      node.phase = "defer";
	    } else if (this.hasPlugin("sourcePhaseImports")) {
	      node.phase = null;
	    }
	  }
	  parseMaybeImportPhase(node, isExport) {
	    if (!this.isPotentialImportPhase(isExport)) {
	      this.applyImportPhase(node, isExport, null);
	      return null;
	    }
	    const phaseIdentifier = this.parseIdentifier(true);
	    const {
	      type
	    } = this.state;
	    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
	    if (isImportPhase) {
	      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
	      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
	      return null;
	    } else {
	      this.applyImportPhase(node, isExport, null);
	      return phaseIdentifier;
	    }
	  }
	  isPrecedingIdImportPhase(phase) {
	    const {
	      type
	    } = this.state;
	    return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
	  }
	  parseImport(node) {
	    if (this.match(133)) {
	      return this.parseImportSourceAndAttributes(node);
	    }
	    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
	  }
	  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
	    node.specifiers = [];
	    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
	    const parseNext = !hasDefault || this.eat(12);
	    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
	    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
	    this.expectContextual(98);
	    return this.parseImportSourceAndAttributes(node);
	  }
	  parseImportSourceAndAttributes(node) {
	    var _node$specifiers2;
	    (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];
	    node.source = this.parseImportSource();
	    this.maybeParseImportAttributes(node);
	    this.checkImportReflection(node);
	    this.checkJSONModuleImport(node);
	    this.semicolon();
	    return this.finishNode(node, "ImportDeclaration");
	  }
	  parseImportSource() {
	    if (!this.match(133)) this.unexpected();
	    return this.parseExprAtom();
	  }
	  parseImportSpecifierLocal(node, specifier, type) {
	    specifier.local = this.parseIdentifier();
	    node.specifiers.push(this.finishImportSpecifier(specifier, type));
	  }
	  finishImportSpecifier(specifier, type, bindingType = 8201) {
	    this.checkLVal(specifier.local, {
	      in: {
	        type
	      },
	      binding: bindingType
	    });
	    return this.finishNode(specifier, type);
	  }
	  parseImportAttributes() {
	    this.expect(5);
	    const attrs = [];
	    const attrNames = new Set();
	    do {
	      if (this.match(8)) {
	        break;
	      }
	      const node = this.startNode();
	      const keyName = this.state.value;
	      if (attrNames.has(keyName)) {
	        this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
	          key: keyName
	        });
	      }
	      attrNames.add(keyName);
	      if (this.match(133)) {
	        node.key = this.parseStringLiteral(keyName);
	      } else {
	        node.key = this.parseIdentifier(true);
	      }
	      this.expect(14);
	      if (!this.match(133)) {
	        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
	      }
	      node.value = this.parseStringLiteral(this.state.value);
	      attrs.push(this.finishNode(node, "ImportAttribute"));
	    } while (this.eat(12));
	    this.expect(8);
	    return attrs;
	  }
	  parseModuleAttributes() {
	    const attrs = [];
	    const attributes = new Set();
	    do {
	      const node = this.startNode();
	      node.key = this.parseIdentifier(true);
	      if (node.key.name !== "type") {
	        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);
	      }
	      if (attributes.has(node.key.name)) {
	        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {
	          key: node.key.name
	        });
	      }
	      attributes.add(node.key.name);
	      this.expect(14);
	      if (!this.match(133)) {
	        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
	      }
	      node.value = this.parseStringLiteral(this.state.value);
	      attrs.push(this.finishNode(node, "ImportAttribute"));
	    } while (this.eat(12));
	    return attrs;
	  }
	  maybeParseImportAttributes(node) {
	    let attributes;
	    let useWith = false;
	    if (this.match(76)) {
	      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
	        return;
	      }
	      this.next();
	      {
	        if (this.hasPlugin("moduleAttributes")) {
	          attributes = this.parseModuleAttributes();
	        } else {
	          this.expectImportAttributesPlugin();
	          attributes = this.parseImportAttributes();
	        }
	      }
	      useWith = true;
	    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
	      if (this.hasPlugin("importAttributes")) {
	        if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
	          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);
	        }
	        this.addExtra(node, "deprecatedAssertSyntax", true);
	      } else {
	        this.expectOnePlugin(["importAttributes", "importAssertions"]);
	      }
	      this.next();
	      attributes = this.parseImportAttributes();
	    } else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
	      attributes = [];
	    } else {
	      if (this.hasPlugin("moduleAttributes")) {
	        attributes = [];
	      } else return;
	    }
	    if (!useWith && this.hasPlugin("importAssertions")) {
	      node.assertions = attributes;
	    } else {
	      node.attributes = attributes;
	    }
	  }
	  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
	    if (maybeDefaultIdentifier) {
	      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
	      specifier.local = maybeDefaultIdentifier;
	      node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
	      return true;
	    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
	      this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
	      return true;
	    }
	    return false;
	  }
	  maybeParseStarImportSpecifier(node) {
	    if (this.match(55)) {
	      const specifier = this.startNode();
	      this.next();
	      this.expectContextual(93);
	      this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
	      return true;
	    }
	    return false;
	  }
	  parseNamedImportSpecifiers(node) {
	    let first = true;
	    this.expect(5);
	    while (!this.eat(8)) {
	      if (first) {
	        first = false;
	      } else {
	        if (this.eat(14)) {
	          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
	        }
	        this.expect(12);
	        if (this.eat(8)) break;
	      }
	      const specifier = this.startNode();
	      const importedIsString = this.match(133);
	      const isMaybeTypeOnly = this.isContextual(130);
	      specifier.imported = this.parseModuleExportName();
	      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, undefined);
	      node.specifiers.push(importSpecifier);
	    }
	  }
	  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
	    if (this.eatContextual(93)) {
	      specifier.local = this.parseIdentifier();
	    } else {
	      const {
	        imported
	      } = specifier;
	      if (importedIsString) {
	        throw this.raise(Errors.ImportBindingIsString, specifier, {
	          importName: imported.value
	        });
	      }
	      this.checkReservedWord(imported.name, specifier.loc.start, true, true);
	      if (!specifier.local) {
	        specifier.local = cloneIdentifier(imported);
	      }
	    }
	    return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
	  }
	  isThisParam(param) {
	    return param.type === "Identifier" && param.name === "this";
	  }
	}
	class Parser extends StatementParser {
	  constructor(options, input) {
	    options = getOptions(options);
	    super(options, input);
	    this.options = options;
	    this.initializeScopes();
	    this.plugins = pluginsMap(this.options.plugins);
	    this.filename = options.sourceFilename;
	  }
	  getScopeHandler() {
	    return ScopeHandler;
	  }
	  parse() {
	    this.enterInitialScopes();
	    const file = this.startNode();
	    const program = this.startNode();
	    this.nextToken();
	    file.errors = null;
	    this.parseTopLevel(file, program);
	    file.errors = this.state.errors;
	    file.comments.length = this.state.commentsLen;
	    return file;
	  }
	}
	function pluginsMap(plugins) {
	  const pluginMap = new Map();
	  for (const plugin of plugins) {
	    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
	    if (!pluginMap.has(name)) pluginMap.set(name, options || {});
	  }
	  return pluginMap;
	}
	function parse(input, options) {
	  var _options;
	  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
	    options = Object.assign({}, options);
	    try {
	      options.sourceType = "module";
	      const parser = getParser(options, input);
	      const ast = parser.parse();
	      if (parser.sawUnambiguousESM) {
	        return ast;
	      }
	      if (parser.ambiguousScriptDifferentAst) {
	        try {
	          options.sourceType = "script";
	          return getParser(options, input).parse();
	        } catch (_unused) {}
	      } else {
	        ast.program.sourceType = "script";
	      }
	      return ast;
	    } catch (moduleError) {
	      try {
	        options.sourceType = "script";
	        return getParser(options, input).parse();
	      } catch (_unused2) {}
	      throw moduleError;
	    }
	  } else {
	    return getParser(options, input).parse();
	  }
	}
	function parseExpression(input, options) {
	  const parser = getParser(options, input);
	  if (parser.options.strictMode) {
	    parser.state.strict = true;
	  }
	  return parser.getExpression();
	}
	function generateExportedTokenTypes(internalTokenTypes) {
	  const tokenTypes = {};
	  for (const typeName of Object.keys(internalTokenTypes)) {
	    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);
	  }
	  return tokenTypes;
	}
	const tokTypes = generateExportedTokenTypes(tt);
	function getParser(options, input) {
	  let cls = Parser;
	  if (options != null && options.plugins) {
	    validatePlugins(options.plugins);
	    cls = getParserClass(options.plugins);
	  }
	  return new cls(options, input);
	}
	const parserClassCache = {};
	function getParserClass(pluginsFromOptions) {
	  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
	  const key = pluginList.join("/");
	  let cls = parserClassCache[key];
	  if (!cls) {
	    cls = Parser;
	    for (const plugin of pluginList) {
	      cls = mixinPlugins[plugin](cls);
	    }
	    parserClassCache[key] = cls;
	  }
	  return cls;
	}
	lib.parse = parse;
	lib.parseExpression = parseExpression;
	lib.tokTypes = tokTypes;
	return lib;
}

var estreeWalker = {exports: {}};

var hasRequiredEstreeWalker;
function requireEstreeWalker () {
	if (hasRequiredEstreeWalker) return estreeWalker.exports;
	hasRequiredEstreeWalker = 1;
	(function (module, exports) {
		(function (global, factory) {
			factory(exports) ;
		}(commonjsGlobal, (function (exports) {			class WalkerBase {
				constructor() {
					this.should_skip = false;
					this.should_remove = false;
					this.replacement = null;
					this.context = {
						skip: () => (this.should_skip = true),
						remove: () => (this.should_remove = true),
						replace: (node) => (this.replacement = node)
					};
				}
				replace(parent, prop, index, node) {
					if (parent) {
						if (index !== null) {
							parent[prop][index] = node;
						} else {
							parent[prop] = node;
						}
					}
				}
				remove(parent, prop, index) {
					if (parent) {
						if (index !== null) {
							parent[prop].splice(index, 1);
						} else {
							delete parent[prop];
						}
					}
				}
			}
			class SyncWalker extends WalkerBase {
				constructor(enter, leave) {
					super();
					this.enter = enter;
					this.leave = leave;
				}
				visit(node, parent, prop, index) {
					if (node) {
						if (this.enter) {
							const _should_skip = this.should_skip;
							const _should_remove = this.should_remove;
							const _replacement = this.replacement;
							this.should_skip = false;
							this.should_remove = false;
							this.replacement = null;
							this.enter.call(this.context, node, parent, prop, index);
							if (this.replacement) {
								node = this.replacement;
								this.replace(parent, prop, index, node);
							}
							if (this.should_remove) {
								this.remove(parent, prop, index);
							}
							const skipped = this.should_skip;
							const removed = this.should_remove;
							this.should_skip = _should_skip;
							this.should_remove = _should_remove;
							this.replacement = _replacement;
							if (skipped) return node;
							if (removed) return null;
						}
						for (const key in node) {
							const value = node[key];
							if (typeof value !== "object") {
								continue;
							} else if (Array.isArray(value)) {
								for (let i = 0; i < value.length; i += 1) {
									if (value[i] !== null && typeof value[i].type === 'string') {
										if (!this.visit(value[i], node, key, i)) {
											i--;
										}
									}
								}
							} else if (value !== null && typeof value.type === "string") {
								this.visit(value, node, key, null);
							}
						}
						if (this.leave) {
							const _replacement = this.replacement;
							const _should_remove = this.should_remove;
							this.replacement = null;
							this.should_remove = false;
							this.leave.call(this.context, node, parent, prop, index);
							if (this.replacement) {
								node = this.replacement;
								this.replace(parent, prop, index, node);
							}
							if (this.should_remove) {
								this.remove(parent, prop, index);
							}
							const removed = this.should_remove;
							this.replacement = _replacement;
							this.should_remove = _should_remove;
							if (removed) return null;
						}
					}
					return node;
				}
			}
			class AsyncWalker extends WalkerBase {
				constructor(enter, leave) {
					super();
					this.enter = enter;
					this.leave = leave;
				}
				async visit(node, parent, prop, index) {
					if (node) {
						if (this.enter) {
							const _should_skip = this.should_skip;
							const _should_remove = this.should_remove;
							const _replacement = this.replacement;
							this.should_skip = false;
							this.should_remove = false;
							this.replacement = null;
							await this.enter.call(this.context, node, parent, prop, index);
							if (this.replacement) {
								node = this.replacement;
								this.replace(parent, prop, index, node);
							}
							if (this.should_remove) {
								this.remove(parent, prop, index);
							}
							const skipped = this.should_skip;
							const removed = this.should_remove;
							this.should_skip = _should_skip;
							this.should_remove = _should_remove;
							this.replacement = _replacement;
							if (skipped) return node;
							if (removed) return null;
						}
						for (const key in node) {
							const value = node[key];
							if (typeof value !== "object") {
								continue;
							} else if (Array.isArray(value)) {
								for (let i = 0; i < value.length; i += 1) {
									if (value[i] !== null && typeof value[i].type === 'string') {
										if (!(await this.visit(value[i], node, key, i))) {
											i--;
										}
									}
								}
							} else if (value !== null && typeof value.type === "string") {
								await this.visit(value, node, key, null);
							}
						}
						if (this.leave) {
							const _replacement = this.replacement;
							const _should_remove = this.should_remove;
							this.replacement = null;
							this.should_remove = false;
							await this.leave.call(this.context, node, parent, prop, index);
							if (this.replacement) {
								node = this.replacement;
								this.replace(parent, prop, index, node);
							}
							if (this.should_remove) {
								this.remove(parent, prop, index);
							}
							const removed = this.should_remove;
							this.replacement = _replacement;
							this.should_remove = _should_remove;
							if (removed) return null;
						}
					}
					return node;
				}
			}
			function walk(ast, { enter, leave }) {
				const instance = new SyncWalker(enter, leave);
				return instance.visit(ast, null);
			}
			async function asyncWalk(ast, { enter, leave }) {
				const instance = new AsyncWalker(enter, leave);
				return await instance.visit(ast, null);
			}
			exports.asyncWalk = asyncWalk;
			exports.walk = walk;
			Object.defineProperty(exports, '__esModule', { value: true });
		})));
	} (estreeWalker, estreeWalker.exports));
	return estreeWalker.exports;
}

var sourceMap = {};

var sourceMapGenerator = {};

var base64Vlq = {};

var base64 = {};

var hasRequiredBase64;
function requireBase64 () {
	if (hasRequiredBase64) return base64;
	hasRequiredBase64 = 1;
	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	base64.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};
	base64.decode = function (charCode) {
	  var bigA = 65;
	  var bigZ = 90;
	  var littleA = 97;
	  var littleZ = 122;
	  var zero = 48;
	  var nine = 57;
	  var plus = 43;
	  var slash = 47;
	  var littleOffset = 26;
	  var numberOffset = 52;
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }
	  if (charCode == plus) {
	    return 62;
	  }
	  if (charCode == slash) {
	    return 63;
	  }
	  return -1;
	};
	return base64;
}

var hasRequiredBase64Vlq;
function requireBase64Vlq () {
	if (hasRequiredBase64Vlq) return base64Vlq;
	hasRequiredBase64Vlq = 1;
	var base64 = requireBase64();
	var VLQ_BASE_SHIFT = 5;
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	var VLQ_BASE_MASK = VLQ_BASE - 1;
	var VLQ_CONTINUATION_BIT = VLQ_BASE;
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}
	base64Vlq.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;
	  var vlq = toVLQSigned(aValue);
	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);
	  return encoded;
	};
	base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;
	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }
	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }
	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);
	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};
	return base64Vlq;
}

var util = {};

var hasRequiredUtil;
function requireUtil () {
	if (hasRequiredUtil) return util;
	hasRequiredUtil = 1;
	(function (exports) {
		function getArg(aArgs, aName, aDefaultValue) {
		  if (aName in aArgs) {
		    return aArgs[aName];
		  } else if (arguments.length === 3) {
		    return aDefaultValue;
		  } else {
		    throw new Error('"' + aName + '" is a required argument.');
		  }
		}
		exports.getArg = getArg;
		var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
		var dataUrlRegexp = /^data:.+\,.+$/;
		function urlParse(aUrl) {
		  var match = aUrl.match(urlRegexp);
		  if (!match) {
		    return null;
		  }
		  return {
		    scheme: match[1],
		    auth: match[2],
		    host: match[3],
		    port: match[4],
		    path: match[5]
		  };
		}
		exports.urlParse = urlParse;
		function urlGenerate(aParsedUrl) {
		  var url = '';
		  if (aParsedUrl.scheme) {
		    url += aParsedUrl.scheme + ':';
		  }
		  url += '//';
		  if (aParsedUrl.auth) {
		    url += aParsedUrl.auth + '@';
		  }
		  if (aParsedUrl.host) {
		    url += aParsedUrl.host;
		  }
		  if (aParsedUrl.port) {
		    url += ":" + aParsedUrl.port;
		  }
		  if (aParsedUrl.path) {
		    url += aParsedUrl.path;
		  }
		  return url;
		}
		exports.urlGenerate = urlGenerate;
		var MAX_CACHED_INPUTS = 32;
		function lruMemoize(f) {
		  var cache = [];
		  return function(input) {
		    for (var i = 0; i < cache.length; i++) {
		      if (cache[i].input === input) {
		        var temp = cache[0];
		        cache[0] = cache[i];
		        cache[i] = temp;
		        return cache[0].result;
		      }
		    }
		    var result = f(input);
		    cache.unshift({
		      input,
		      result,
		    });
		    if (cache.length > MAX_CACHED_INPUTS) {
		      cache.pop();
		    }
		    return result;
		  };
		}
		var normalize = lruMemoize(function normalize(aPath) {
		  var path = aPath;
		  var url = urlParse(aPath);
		  if (url) {
		    if (!url.path) {
		      return aPath;
		    }
		    path = url.path;
		  }
		  var isAbsolute = exports.isAbsolute(path);
		  var parts = [];
		  var start = 0;
		  var i = 0;
		  while (true) {
		    start = i;
		    i = path.indexOf("/", start);
		    if (i === -1) {
		      parts.push(path.slice(start));
		      break;
		    } else {
		      parts.push(path.slice(start, i));
		      while (i < path.length && path[i] === "/") {
		        i++;
		      }
		    }
		  }
		  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
		    part = parts[i];
		    if (part === '.') {
		      parts.splice(i, 1);
		    } else if (part === '..') {
		      up++;
		    } else if (up > 0) {
		      if (part === '') {
		        parts.splice(i + 1, up);
		        up = 0;
		      } else {
		        parts.splice(i, 2);
		        up--;
		      }
		    }
		  }
		  path = parts.join('/');
		  if (path === '') {
		    path = isAbsolute ? '/' : '.';
		  }
		  if (url) {
		    url.path = path;
		    return urlGenerate(url);
		  }
		  return path;
		});
		exports.normalize = normalize;
		function join(aRoot, aPath) {
		  if (aRoot === "") {
		    aRoot = ".";
		  }
		  if (aPath === "") {
		    aPath = ".";
		  }
		  var aPathUrl = urlParse(aPath);
		  var aRootUrl = urlParse(aRoot);
		  if (aRootUrl) {
		    aRoot = aRootUrl.path || '/';
		  }
		  if (aPathUrl && !aPathUrl.scheme) {
		    if (aRootUrl) {
		      aPathUrl.scheme = aRootUrl.scheme;
		    }
		    return urlGenerate(aPathUrl);
		  }
		  if (aPathUrl || aPath.match(dataUrlRegexp)) {
		    return aPath;
		  }
		  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
		    aRootUrl.host = aPath;
		    return urlGenerate(aRootUrl);
		  }
		  var joined = aPath.charAt(0) === '/'
		    ? aPath
		    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
		  if (aRootUrl) {
		    aRootUrl.path = joined;
		    return urlGenerate(aRootUrl);
		  }
		  return joined;
		}
		exports.join = join;
		exports.isAbsolute = function (aPath) {
		  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
		};
		function relative(aRoot, aPath) {
		  if (aRoot === "") {
		    aRoot = ".";
		  }
		  aRoot = aRoot.replace(/\/$/, '');
		  var level = 0;
		  while (aPath.indexOf(aRoot + '/') !== 0) {
		    var index = aRoot.lastIndexOf("/");
		    if (index < 0) {
		      return aPath;
		    }
		    aRoot = aRoot.slice(0, index);
		    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
		      return aPath;
		    }
		    ++level;
		  }
		  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
		}
		exports.relative = relative;
		var supportsNullProto = (function () {
		  var obj = Object.create(null);
		  return !('__proto__' in obj);
		}());
		function identity (s) {
		  return s;
		}
		function toSetString(aStr) {
		  if (isProtoString(aStr)) {
		    return '$' + aStr;
		  }
		  return aStr;
		}
		exports.toSetString = supportsNullProto ? identity : toSetString;
		function fromSetString(aStr) {
		  if (isProtoString(aStr)) {
		    return aStr.slice(1);
		  }
		  return aStr;
		}
		exports.fromSetString = supportsNullProto ? identity : fromSetString;
		function isProtoString(s) {
		  if (!s) {
		    return false;
		  }
		  var length = s.length;
		  if (length < 9 ) {
		    return false;
		  }
		  if (s.charCodeAt(length - 1) !== 95   ||
		      s.charCodeAt(length - 2) !== 95   ||
		      s.charCodeAt(length - 3) !== 111  ||
		      s.charCodeAt(length - 4) !== 116  ||
		      s.charCodeAt(length - 5) !== 111  ||
		      s.charCodeAt(length - 6) !== 114  ||
		      s.charCodeAt(length - 7) !== 112  ||
		      s.charCodeAt(length - 8) !== 95   ||
		      s.charCodeAt(length - 9) !== 95  ) {
		    return false;
		  }
		  for (var i = length - 10; i >= 0; i--) {
		    if (s.charCodeAt(i) !== 36 ) {
		      return false;
		    }
		  }
		  return true;
		}
		function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
		  var cmp = strcmp(mappingA.source, mappingB.source);
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0 || onlyCompareOriginal) {
		    return cmp;
		  }
		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByOriginalPositions = compareByOriginalPositions;
		function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
		  var cmp;
		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0 || onlyCompareOriginal) {
		    return cmp;
		  }
		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;
		function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
		  var cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0 || onlyCompareGenerated) {
		    return cmp;
		  }
		  cmp = strcmp(mappingA.source, mappingB.source);
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
		function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
		  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0 || onlyCompareGenerated) {
		    return cmp;
		  }
		  cmp = strcmp(mappingA.source, mappingB.source);
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;
		function strcmp(aStr1, aStr2) {
		  if (aStr1 === aStr2) {
		    return 0;
		  }
		  if (aStr1 === null) {
		    return 1;
		  }
		  if (aStr2 === null) {
		    return -1;
		  }
		  if (aStr1 > aStr2) {
		    return 1;
		  }
		  return -1;
		}
		function compareByGeneratedPositionsInflated(mappingA, mappingB) {
		  var cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = strcmp(mappingA.source, mappingB.source);
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }
		  return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
		function parseSourceMapInput(str) {
		  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
		}
		exports.parseSourceMapInput = parseSourceMapInput;
		function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
		  sourceURL = sourceURL || '';
		  if (sourceRoot) {
		    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
		      sourceRoot += '/';
		    }
		    sourceURL = sourceRoot + sourceURL;
		  }
		  if (sourceMapURL) {
		    var parsed = urlParse(sourceMapURL);
		    if (!parsed) {
		      throw new Error("sourceMapURL could not be parsed");
		    }
		    if (parsed.path) {
		      var index = parsed.path.lastIndexOf('/');
		      if (index >= 0) {
		        parsed.path = parsed.path.substring(0, index + 1);
		      }
		    }
		    sourceURL = join(urlGenerate(parsed), sourceURL);
		  }
		  return normalize(sourceURL);
		}
		exports.computeSourceURL = computeSourceURL;
	} (util));
	return util;
}

var arraySet = {};

var hasRequiredArraySet;
function requireArraySet () {
	if (hasRequiredArraySet) return arraySet;
	hasRequiredArraySet = 1;
	var util = requireUtil();
	var has = Object.prototype.hasOwnProperty;
	var hasNativeMap = typeof Map !== "undefined";
	function ArraySet() {
	  this._array = [];
	  this._set = hasNativeMap ? new Map() : Object.create(null);
	}
	ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};
	ArraySet.prototype.size = function ArraySet_size() {
	  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};
	ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
	  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};
	ArraySet.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util.toSetString(aStr);
	    return has.call(this._set, sStr);
	  }
	};
	ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util.toSetString(aStr);
	    if (has.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }
	  throw new Error('"' + aStr + '" is not in the set.');
	};
	ArraySet.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};
	ArraySet.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};
	arraySet.ArraySet = ArraySet;
	return arraySet;
}

var mappingList = {};

var hasRequiredMappingList;
function requireMappingList () {
	if (hasRequiredMappingList) return mappingList;
	hasRequiredMappingList = 1;
	var util = requireUtil();
	function generatedPositionAfter(mappingA, mappingB) {
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}
	function MappingList() {
	  this._array = [];
	  this._sorted = true;
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}
	MappingList.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };
	MappingList.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};
	MappingList.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};
	mappingList.MappingList = MappingList;
	return mappingList;
}

var hasRequiredSourceMapGenerator;
function requireSourceMapGenerator () {
	if (hasRequiredSourceMapGenerator) return sourceMapGenerator;
	hasRequiredSourceMapGenerator = 1;
	var base64VLQ = requireBase64Vlq();
	var util = requireUtil();
	var ArraySet = requireArraySet().ArraySet;
	var MappingList = requireMappingList().MappingList;
	function SourceMapGenerator(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util.getArg(aArgs, 'file', null);
	  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	  this._ignoreInvalidMapping = util.getArg(aArgs, 'ignoreInvalidMapping', false);
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}
	SourceMapGenerator.prototype._version = 3;
	SourceMapGenerator.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator(Object.assign(generatorOps || {}, {
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    }));
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };
	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util.relative(sourceRoot, newMapping.source);
	        }
	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };
	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }
	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var sourceRelative = sourceFile;
	      if (sourceRoot !== null) {
	        sourceRelative = util.relative(sourceRoot, sourceFile);
	      }
	      if (!generator._sources.has(sourceRelative)) {
	        generator._sources.add(sourceRelative);
	      }
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };
	SourceMapGenerator.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util.getArg(aArgs, 'generated');
	    var original = util.getArg(aArgs, 'original', null);
	    var source = util.getArg(aArgs, 'source', null);
	    var name = util.getArg(aArgs, 'name', null);
	    if (!this._skipValidation) {
	      if (this._validateMapping(generated, original, source, name) === false) {
	        return;
	      }
	    }
	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }
	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }
	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };
	SourceMapGenerator.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util.relative(this._sourceRoot, source);
	    }
	    if (aSourceContent != null) {
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      delete this._sourcesContents[util.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };
	SourceMapGenerator.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    if (sourceRoot != null) {
	      sourceFile = util.relative(sourceRoot, sourceFile);
	    }
	    var newSources = new ArraySet();
	    var newNames = new ArraySet();
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }
	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }
	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }
	    }, this);
	    this._sources = newSources;
	    this._names = newNames;
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };
	SourceMapGenerator.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	      var message = 'original.line and original.column are not numbers -- you probably meant to omit ' +
	      'the original mapping entirely and only map the generated position. If so, pass ' +
	      'null for the original mapping instead of an object with empty or null values.';
	      if (this._ignoreInvalidMapping) {
	        if (typeof console !== 'undefined' && console.warn) {
	          console.warn(message);
	        }
	        return false;
	      } else {
	        throw new Error(message);
	      }
	    }
	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      return;
	    }
	    else {
	      var message = 'Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      });
	      if (this._ignoreInvalidMapping) {
	        if (typeof console !== 'undefined' && console.warn) {
	          console.warn(message);
	        }
	        return false;
	      } else {
	        throw new Error(message)
	      }
	    }
	  };
	SourceMapGenerator.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;
	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = '';
	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }
	      next += base64VLQ.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;
	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;
	        next += base64VLQ.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;
	        next += base64VLQ.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;
	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }
	      result += next;
	    }
	    return result;
	  };
	SourceMapGenerator.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util.relative(aSourceRoot, source);
	      }
	      var key = util.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };
	SourceMapGenerator.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }
	    return map;
	  };
	SourceMapGenerator.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };
	sourceMapGenerator.SourceMapGenerator = SourceMapGenerator;
	return sourceMapGenerator;
}

var sourceMapConsumer = {};

var binarySearch = {};

var hasRequiredBinarySearch;
function requireBinarySearch () {
	if (hasRequiredBinarySearch) return binarySearch;
	hasRequiredBinarySearch = 1;
	(function (exports) {
		exports.GREATEST_LOWER_BOUND = 1;
		exports.LEAST_UPPER_BOUND = 2;
		function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
		  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
		  var cmp = aCompare(aNeedle, aHaystack[mid], true);
		  if (cmp === 0) {
		    return mid;
		  }
		  else if (cmp > 0) {
		    if (aHigh - mid > 1) {
		      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
		    }
		    if (aBias == exports.LEAST_UPPER_BOUND) {
		      return aHigh < aHaystack.length ? aHigh : -1;
		    } else {
		      return mid;
		    }
		  }
		  else {
		    if (mid - aLow > 1) {
		      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
		    }
		    if (aBias == exports.LEAST_UPPER_BOUND) {
		      return mid;
		    } else {
		      return aLow < 0 ? -1 : aLow;
		    }
		  }
		}
		exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
		  if (aHaystack.length === 0) {
		    return -1;
		  }
		  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
		                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
		  if (index < 0) {
		    return -1;
		  }
		  while (index - 1 >= 0) {
		    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
		      break;
		    }
		    --index;
		  }
		  return index;
		};
	} (binarySearch));
	return binarySearch;
}

var quickSort = {};

var hasRequiredQuickSort;
function requireQuickSort () {
	if (hasRequiredQuickSort) return quickSort;
	hasRequiredQuickSort = 1;
	function SortTemplate(comparator) {
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}
	function doQuickSort(ary, comparator, p, r) {
	  if (p < r) {
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;
	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot, false) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }
	    swap(ary, i + 1, j);
	    var q = i + 1;
	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}
	  return doQuickSort;
	}
	function cloneSort(comparator) {
	  let template = SortTemplate.toString();
	  let templateFn = new Function(`return ${template}`)();
	  return templateFn(comparator);
	}
	let sortCache = new WeakMap();
	quickSort.quickSort = function (ary, comparator, start = 0) {
	  let doQuickSort = sortCache.get(comparator);
	  if (doQuickSort === void 0) {
	    doQuickSort = cloneSort(comparator);
	    sortCache.set(comparator, doQuickSort);
	  }
	  doQuickSort(ary, comparator, start, ary.length - 1);
	};
	return quickSort;
}

var hasRequiredSourceMapConsumer;
function requireSourceMapConsumer () {
	if (hasRequiredSourceMapConsumer) return sourceMapConsumer;
	hasRequiredSourceMapConsumer = 1;
	var util = requireUtil();
	var binarySearch = requireBinarySearch();
	var ArraySet = requireArraySet().ArraySet;
	var base64VLQ = requireBase64Vlq();
	var quickSort = requireQuickSort().quickSort;
	function SourceMapConsumer(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util.parseSourceMapInput(aSourceMap);
	  }
	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
	    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
	}
	SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
	};
	SourceMapConsumer.prototype._version = 3;
	SourceMapConsumer.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	    return this.__generatedMappings;
	  }
	});
	SourceMapConsumer.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	    return this.__originalMappings;
	  }
	});
	SourceMapConsumer.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };
	SourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };
	SourceMapConsumer.GENERATED_ORDER = 1;
	SourceMapConsumer.ORIGINAL_ORDER = 2;
	SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer.LEAST_UPPER_BOUND = 2;
	SourceMapConsumer.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	    var mappings;
	    switch (order) {
	    case SourceMapConsumer.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }
	    var sourceRoot = this.sourceRoot;
	    var boundCallback = aCallback.bind(context);
	    var names = this._names;
	    var sources = this._sources;
	    var sourceMapURL = this._sourceMapURL;
	    for (var i = 0, n = mappings.length; i < n; i++) {
	      var mapping = mappings[i];
	      var source = mapping.source === null ? null : sources.at(mapping.source);
	      source = util.computeSourceURL(sourceRoot, source, sourceMapURL);
	      boundCallback({
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : names.at(mapping.name)
	      });
	    }
	  };
	SourceMapConsumer.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util.getArg(aArgs, 'line');
	    var needle = {
	      source: util.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util.getArg(aArgs, 'column', 0)
	    };
	    needle.source = this._findSourceIndex(needle.source);
	    if (needle.source < 0) {
	      return [];
	    }
	    var mappings = [];
	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	          mapping = this._originalMappings[++index];
	        }
	      }
	    }
	    return mappings;
	  };
	sourceMapConsumer.SourceMapConsumer = SourceMapConsumer;
	function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util.parseSourceMapInput(aSourceMap);
	  }
	  var version = util.getArg(sourceMap, 'version');
	  var sources = util.getArg(sourceMap, 'sources');
	  var names = util.getArg(sourceMap, 'names', []);
	  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util.getArg(sourceMap, 'mappings');
	  var file = util.getArg(sourceMap, 'file', null);
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	  if (sourceRoot) {
	    sourceRoot = util.normalize(sourceRoot);
	  }
	  sources = sources
	    .map(String)
	    .map(util.normalize)
	    .map(function (source) {
	      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	        ? util.relative(sourceRoot, source)
	        : source;
	    });
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);
	  this._absoluteSources = this._sources.toArray().map(function (s) {
	    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
	  });
	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this._sourceMapURL = aSourceMapURL;
	  this.file = file;
	}
	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
	BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
	  var relativeSource = aSource;
	  if (this.sourceRoot != null) {
	    relativeSource = util.relative(this.sourceRoot, relativeSource);
	  }
	  if (this._sources.has(relativeSource)) {
	    return this._sources.indexOf(relativeSource);
	  }
	  var i;
	  for (i = 0; i < this._absoluteSources.length; ++i) {
	    if (this._absoluteSources[i] == aSource) {
	      return i;
	    }
	  }
	  return -1;
	};
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);
	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	    smc._sourceMapURL = aSourceMapURL;
	    smc._absoluteSources = smc._sources.toArray().map(function (s) {
	      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
	    });
	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];
	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;
	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;
	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }
	        destOriginalMappings.push(destMapping);
	      }
	      destGeneratedMappings.push(destMapping);
	    }
	    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
	    return smc;
	  };
	BasicSourceMapConsumer.prototype._version = 3;
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._absoluteSources.slice();
	  }
	});
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}
	const compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;
	function sortGenerated(array, start) {
	  let l = array.length;
	  let n = array.length - start;
	  if (n <= 1) {
	    return;
	  } else if (n == 2) {
	    let a = array[start];
	    let b = array[start + 1];
	    if (compareGenerated(a, b) > 0) {
	      array[start] = b;
	      array[start + 1] = a;
	    }
	  } else if (n < 20) {
	    for (let i = start; i < l; i++) {
	      for (let j = i; j > start; j--) {
	        let a = array[j - 1];
	        let b = array[j];
	        if (compareGenerated(a, b) <= 0) {
	          break;
	        }
	        array[j - 1] = b;
	        array[j] = a;
	      }
	    }
	  } else {
	    quickSort(array, compareGenerated, start);
	  }
	}
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, segment, end, value;
	    let subarrayStart = 0;
	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	        sortGenerated(generatedMappings, subarrayStart);
	        subarrayStart = generatedMappings.length;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        aStr.slice(index, end);
	        segment = [];
	        while (index < end) {
	          base64VLQ.decode(aStr, index, temp);
	          value = temp.value;
	          index = temp.rest;
	          segment.push(value);
	        }
	        if (segment.length === 2) {
	          throw new Error('Found a source, but no line and column');
	        }
	        if (segment.length === 3) {
	          throw new Error('Found a source and line, but no column');
	        }
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;
	        if (segment.length > 1) {
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          mapping.originalLine += 1;
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;
	          if (segment.length > 4) {
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }
	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          let currentSource = mapping.source;
	          while (originalMappings.length <= currentSource) {
	            originalMappings.push(null);
	          }
	          if (originalMappings[currentSource] === null) {
	            originalMappings[currentSource] = [];
	          }
	          originalMappings[currentSource].push(mapping);
	        }
	      }
	    }
	    sortGenerated(generatedMappings, subarrayStart);
	    this.__generatedMappings = generatedMappings;
	    for (var i = 0; i < originalMappings.length; i++) {
	      if (originalMappings[i] != null) {
	        quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);
	      }
	    }
	    this.__originalMappings = [].concat(...originalMappings);
	  };
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }
	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];
	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util.compareByGeneratedPositionsDeflated,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];
	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
	        }
	        var name = util.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util.getArg(mapping, 'originalLine', null),
	          column: util.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }
	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }
	    var index = this._findSourceIndex(aSource);
	    if (index >= 0) {
	      return this.sourcesContent[index];
	    }
	    var relativeSource = aSource;
	    if (this.sourceRoot != null) {
	      relativeSource = util.relative(this.sourceRoot, relativeSource);
	    }
	    var url;
	    if (this.sourceRoot != null
	        && (url = util.urlParse(this.sourceRoot))) {
	      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }
	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + relativeSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
	    }
	  };
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util.getArg(aArgs, 'source');
	    source = this._findSourceIndex(source);
	    if (source < 0) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    var needle = {
	      source: source,
	      originalLine: util.getArg(aArgs, 'line'),
	      originalColumn: util.getArg(aArgs, 'column')
	    };
	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util.compareByOriginalPositions,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	      if (mapping.source === needle.source) {
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }
	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };
	sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;
	function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util.parseSourceMapInput(aSourceMap);
	  }
	  var version = util.getArg(sourceMap, 'version');
	  var sections = util.getArg(sourceMap, 'sections');
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util.getArg(s, 'offset');
	    var offsetLine = util.getArg(offset, 'line');
	    var offsetColumn = util.getArg(offset, 'column');
	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;
	    return {
	      generatedOffset: {
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
	    }
	  });
	}
	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
	IndexedSourceMapConsumer.prototype._version = 3;
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }
	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];
	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }
	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content || content === '') {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }
	    return {
	      line: null,
	      column: null
	    };
	  };
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];
	        var source = section.consumer._sources.at(mapping.source);
	        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
	        this._sources.add(source);
	        source = this._sources.indexOf(source);
	        var name = null;
	        if (mapping.name) {
	          name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);
	        }
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };
	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }
	    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util.compareByOriginalPositions);
	  };
	sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	return sourceMapConsumer;
}

var sourceNode = {};

var hasRequiredSourceNode;
function requireSourceNode () {
	if (hasRequiredSourceNode) return sourceNode;
	hasRequiredSourceNode = 1;
	var SourceMapGenerator = requireSourceMapGenerator().SourceMapGenerator;
	var util = requireUtil();
	var REGEX_NEWLINE = /(\r?\n)/;
	var NEWLINE_CODE = 10;
	var isSourceNode = "$$$isSourceNode$$$";
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    var node = new SourceNode();
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;
	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
	    var lastMapping = null;
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        if (lastGeneratedLine < mapping.generatedLine) {
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	        } else {
	          var nextLine = remainingLines[remainingLinesIndex] || '';
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          lastMapping = mapping;
	          return;
	        }
	      }
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex] || '';
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });
	    return node;
	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	  };
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }
	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });
	  return { code: generated.code, map: map };
	};
	sourceNode.SourceNode = SourceNode;
	return sourceNode;
}

var hasRequiredSourceMap;
function requireSourceMap () {
	if (hasRequiredSourceMap) return sourceMap;
	hasRequiredSourceMap = 1;
	sourceMap.SourceMapGenerator = requireSourceMapGenerator().SourceMapGenerator;
	sourceMap.SourceMapConsumer = requireSourceMapConsumer().SourceMapConsumer;
	sourceMap.SourceNode = requireSourceNode().SourceNode;
	return sourceMap;
}

var compilerCore_cjs = {};

/**
* @vue/compiler-core v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredCompilerCore_cjs;
function requireCompilerCore_cjs () {
	if (hasRequiredCompilerCore_cjs) return compilerCore_cjs;
	hasRequiredCompilerCore_cjs = 1;
	Object.defineProperty(compilerCore_cjs, '__esModule', { value: true });
	var shared = requireShared();
	var decode_js = requireDecode();
	var parser = requireLib();
	var estreeWalker = requireEstreeWalker();
	var sourceMapJs = requireSourceMap();
	const FRAGMENT = Symbol(`Fragment` );
	const TELEPORT = Symbol(`Teleport` );
	const SUSPENSE = Symbol(`Suspense` );
	const KEEP_ALIVE = Symbol(`KeepAlive` );
	const BASE_TRANSITION = Symbol(`BaseTransition` );
	const OPEN_BLOCK = Symbol(`openBlock` );
	const CREATE_BLOCK = Symbol(`createBlock` );
	const CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock` );
	const CREATE_VNODE = Symbol(`createVNode` );
	const CREATE_ELEMENT_VNODE = Symbol(`createElementVNode` );
	const CREATE_COMMENT = Symbol(`createCommentVNode` );
	const CREATE_TEXT = Symbol(`createTextVNode` );
	const CREATE_STATIC = Symbol(`createStaticVNode` );
	const RESOLVE_COMPONENT = Symbol(`resolveComponent` );
	const RESOLVE_DYNAMIC_COMPONENT = Symbol(
	  `resolveDynamicComponent`
	);
	const RESOLVE_DIRECTIVE = Symbol(`resolveDirective` );
	const RESOLVE_FILTER = Symbol(`resolveFilter` );
	const WITH_DIRECTIVES = Symbol(`withDirectives` );
	const RENDER_LIST = Symbol(`renderList` );
	const RENDER_SLOT = Symbol(`renderSlot` );
	const CREATE_SLOTS = Symbol(`createSlots` );
	const TO_DISPLAY_STRING = Symbol(`toDisplayString` );
	const MERGE_PROPS = Symbol(`mergeProps` );
	const NORMALIZE_CLASS = Symbol(`normalizeClass` );
	const NORMALIZE_STYLE = Symbol(`normalizeStyle` );
	const NORMALIZE_PROPS = Symbol(`normalizeProps` );
	const GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps` );
	const TO_HANDLERS = Symbol(`toHandlers` );
	const CAMELIZE = Symbol(`camelize` );
	const CAPITALIZE = Symbol(`capitalize` );
	const TO_HANDLER_KEY = Symbol(`toHandlerKey` );
	const SET_BLOCK_TRACKING = Symbol(`setBlockTracking` );
	const PUSH_SCOPE_ID = Symbol(`pushScopeId` );
	const POP_SCOPE_ID = Symbol(`popScopeId` );
	const WITH_CTX = Symbol(`withCtx` );
	const UNREF = Symbol(`unref` );
	const IS_REF = Symbol(`isRef` );
	const WITH_MEMO = Symbol(`withMemo` );
	const IS_MEMO_SAME = Symbol(`isMemoSame` );
	const helperNameMap = {
	  [FRAGMENT]: `Fragment`,
	  [TELEPORT]: `Teleport`,
	  [SUSPENSE]: `Suspense`,
	  [KEEP_ALIVE]: `KeepAlive`,
	  [BASE_TRANSITION]: `BaseTransition`,
	  [OPEN_BLOCK]: `openBlock`,
	  [CREATE_BLOCK]: `createBlock`,
	  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
	  [CREATE_VNODE]: `createVNode`,
	  [CREATE_ELEMENT_VNODE]: `createElementVNode`,
	  [CREATE_COMMENT]: `createCommentVNode`,
	  [CREATE_TEXT]: `createTextVNode`,
	  [CREATE_STATIC]: `createStaticVNode`,
	  [RESOLVE_COMPONENT]: `resolveComponent`,
	  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
	  [RESOLVE_DIRECTIVE]: `resolveDirective`,
	  [RESOLVE_FILTER]: `resolveFilter`,
	  [WITH_DIRECTIVES]: `withDirectives`,
	  [RENDER_LIST]: `renderList`,
	  [RENDER_SLOT]: `renderSlot`,
	  [CREATE_SLOTS]: `createSlots`,
	  [TO_DISPLAY_STRING]: `toDisplayString`,
	  [MERGE_PROPS]: `mergeProps`,
	  [NORMALIZE_CLASS]: `normalizeClass`,
	  [NORMALIZE_STYLE]: `normalizeStyle`,
	  [NORMALIZE_PROPS]: `normalizeProps`,
	  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
	  [TO_HANDLERS]: `toHandlers`,
	  [CAMELIZE]: `camelize`,
	  [CAPITALIZE]: `capitalize`,
	  [TO_HANDLER_KEY]: `toHandlerKey`,
	  [SET_BLOCK_TRACKING]: `setBlockTracking`,
	  [PUSH_SCOPE_ID]: `pushScopeId`,
	  [POP_SCOPE_ID]: `popScopeId`,
	  [WITH_CTX]: `withCtx`,
	  [UNREF]: `unref`,
	  [IS_REF]: `isRef`,
	  [WITH_MEMO]: `withMemo`,
	  [IS_MEMO_SAME]: `isMemoSame`
	};
	function registerRuntimeHelpers(helpers) {
	  Object.getOwnPropertySymbols(helpers).forEach((s) => {
	    helperNameMap[s] = helpers[s];
	  });
	}
	const Namespaces = {
	  "HTML": 0,
	  "0": "HTML",
	  "SVG": 1,
	  "1": "SVG",
	  "MATH_ML": 2,
	  "2": "MATH_ML"
	};
	const NodeTypes = {
	  "ROOT": 0,
	  "0": "ROOT",
	  "ELEMENT": 1,
	  "1": "ELEMENT",
	  "TEXT": 2,
	  "2": "TEXT",
	  "COMMENT": 3,
	  "3": "COMMENT",
	  "SIMPLE_EXPRESSION": 4,
	  "4": "SIMPLE_EXPRESSION",
	  "INTERPOLATION": 5,
	  "5": "INTERPOLATION",
	  "ATTRIBUTE": 6,
	  "6": "ATTRIBUTE",
	  "DIRECTIVE": 7,
	  "7": "DIRECTIVE",
	  "COMPOUND_EXPRESSION": 8,
	  "8": "COMPOUND_EXPRESSION",
	  "IF": 9,
	  "9": "IF",
	  "IF_BRANCH": 10,
	  "10": "IF_BRANCH",
	  "FOR": 11,
	  "11": "FOR",
	  "TEXT_CALL": 12,
	  "12": "TEXT_CALL",
	  "VNODE_CALL": 13,
	  "13": "VNODE_CALL",
	  "JS_CALL_EXPRESSION": 14,
	  "14": "JS_CALL_EXPRESSION",
	  "JS_OBJECT_EXPRESSION": 15,
	  "15": "JS_OBJECT_EXPRESSION",
	  "JS_PROPERTY": 16,
	  "16": "JS_PROPERTY",
	  "JS_ARRAY_EXPRESSION": 17,
	  "17": "JS_ARRAY_EXPRESSION",
	  "JS_FUNCTION_EXPRESSION": 18,
	  "18": "JS_FUNCTION_EXPRESSION",
	  "JS_CONDITIONAL_EXPRESSION": 19,
	  "19": "JS_CONDITIONAL_EXPRESSION",
	  "JS_CACHE_EXPRESSION": 20,
	  "20": "JS_CACHE_EXPRESSION",
	  "JS_BLOCK_STATEMENT": 21,
	  "21": "JS_BLOCK_STATEMENT",
	  "JS_TEMPLATE_LITERAL": 22,
	  "22": "JS_TEMPLATE_LITERAL",
	  "JS_IF_STATEMENT": 23,
	  "23": "JS_IF_STATEMENT",
	  "JS_ASSIGNMENT_EXPRESSION": 24,
	  "24": "JS_ASSIGNMENT_EXPRESSION",
	  "JS_SEQUENCE_EXPRESSION": 25,
	  "25": "JS_SEQUENCE_EXPRESSION",
	  "JS_RETURN_STATEMENT": 26,
	  "26": "JS_RETURN_STATEMENT"
	};
	const ElementTypes = {
	  "ELEMENT": 0,
	  "0": "ELEMENT",
	  "COMPONENT": 1,
	  "1": "COMPONENT",
	  "SLOT": 2,
	  "2": "SLOT",
	  "TEMPLATE": 3,
	  "3": "TEMPLATE"
	};
	const ConstantTypes = {
	  "NOT_CONSTANT": 0,
	  "0": "NOT_CONSTANT",
	  "CAN_SKIP_PATCH": 1,
	  "1": "CAN_SKIP_PATCH",
	  "CAN_HOIST": 2,
	  "2": "CAN_HOIST",
	  "CAN_STRINGIFY": 3,
	  "3": "CAN_STRINGIFY"
	};
	const locStub = {
	  start: { line: 1, column: 1, offset: 0 },
	  end: { line: 1, column: 1, offset: 0 },
	  source: ""
	};
	function createRoot(children, source = "") {
	  return {
	    type: 0,
	    source,
	    children,
	    helpers:  new Set(),
	    components: [],
	    directives: [],
	    hoists: [],
	    imports: [],
	    cached: 0,
	    temps: 0,
	    codegenNode: void 0,
	    loc: locStub
	  };
	}
	function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent = false, loc = locStub) {
	  if (context) {
	    if (isBlock) {
	      context.helper(OPEN_BLOCK);
	      context.helper(getVNodeBlockHelper(context.inSSR, isComponent));
	    } else {
	      context.helper(getVNodeHelper(context.inSSR, isComponent));
	    }
	    if (directives) {
	      context.helper(WITH_DIRECTIVES);
	    }
	  }
	  return {
	    type: 13,
	    tag,
	    props,
	    children,
	    patchFlag,
	    dynamicProps,
	    directives,
	    isBlock,
	    disableTracking,
	    isComponent,
	    loc
	  };
	}
	function createArrayExpression(elements, loc = locStub) {
	  return {
	    type: 17,
	    loc,
	    elements
	  };
	}
	function createObjectExpression(properties, loc = locStub) {
	  return {
	    type: 15,
	    loc,
	    properties
	  };
	}
	function createObjectProperty(key, value) {
	  return {
	    type: 16,
	    loc: locStub,
	    key: shared.isString(key) ? createSimpleExpression(key, true) : key,
	    value
	  };
	}
	function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
	  return {
	    type: 4,
	    loc,
	    content,
	    isStatic,
	    constType: isStatic ? 3 : constType
	  };
	}
	function createInterpolation(content, loc) {
	  return {
	    type: 5,
	    loc,
	    content: shared.isString(content) ? createSimpleExpression(content, false, loc) : content
	  };
	}
	function createCompoundExpression(children, loc = locStub) {
	  return {
	    type: 8,
	    loc,
	    children
	  };
	}
	function createCallExpression(callee, args = [], loc = locStub) {
	  return {
	    type: 14,
	    loc,
	    callee,
	    arguments: args
	  };
	}
	function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
	  return {
	    type: 18,
	    params,
	    returns,
	    newline,
	    isSlot,
	    loc
	  };
	}
	function createConditionalExpression(test, consequent, alternate, newline = true) {
	  return {
	    type: 19,
	    test,
	    consequent,
	    alternate,
	    newline,
	    loc: locStub
	  };
	}
	function createCacheExpression(index, value, isVOnce = false) {
	  return {
	    type: 20,
	    index,
	    value,
	    isVOnce,
	    loc: locStub
	  };
	}
	function createBlockStatement(body) {
	  return {
	    type: 21,
	    body,
	    loc: locStub
	  };
	}
	function createTemplateLiteral(elements) {
	  return {
	    type: 22,
	    elements,
	    loc: locStub
	  };
	}
	function createIfStatement(test, consequent, alternate) {
	  return {
	    type: 23,
	    test,
	    consequent,
	    alternate,
	    loc: locStub
	  };
	}
	function createAssignmentExpression(left, right) {
	  return {
	    type: 24,
	    left,
	    right,
	    loc: locStub
	  };
	}
	function createSequenceExpression(expressions) {
	  return {
	    type: 25,
	    expressions,
	    loc: locStub
	  };
	}
	function createReturnStatement(returns) {
	  return {
	    type: 26,
	    returns,
	    loc: locStub
	  };
	}
	function getVNodeHelper(ssr, isComponent) {
	  return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
	}
	function getVNodeBlockHelper(ssr, isComponent) {
	  return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
	}
	function convertToBlock(node, { helper, removeHelper, inSSR }) {
	  if (!node.isBlock) {
	    node.isBlock = true;
	    removeHelper(getVNodeHelper(inSSR, node.isComponent));
	    helper(OPEN_BLOCK);
	    helper(getVNodeBlockHelper(inSSR, node.isComponent));
	  }
	}
	const defaultDelimitersOpen = new Uint8Array([123, 123]);
	const defaultDelimitersClose = new Uint8Array([125, 125]);
	function isTagStartChar(c) {
	  return c >= 97 && c <= 122 || c >= 65 && c <= 90;
	}
	function isWhitespace(c) {
	  return c === 32 || c === 10 || c === 9 || c === 12 || c === 13;
	}
	function isEndOfTagSection(c) {
	  return c === 47 || c === 62 || isWhitespace(c);
	}
	function toCharCodes(str) {
	  const ret = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    ret[i] = str.charCodeAt(i);
	  }
	  return ret;
	}
	const Sequences = {
	  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
	  CdataEnd: new Uint8Array([93, 93, 62]),
	  CommentEnd: new Uint8Array([45, 45, 62]),
	  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
	  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
	  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
	  TextareaEnd: new Uint8Array([
	    60,
	    47,
	    116,
	    101,
	    120,
	    116,
	    97,
	    114,
	    101,
	    97
	  ])
	};
	class Tokenizer {
	  constructor(stack, cbs) {
	    this.stack = stack;
	    this.cbs = cbs;
	    this.state = 1;
	    this.buffer = "";
	    this.sectionStart = 0;
	    this.index = 0;
	    this.entityStart = 0;
	    this.baseState = 1;
	    this.inRCDATA = false;
	    this.inXML = false;
	    this.inVPre = false;
	    this.newlines = [];
	    this.mode = 0;
	    this.delimiterOpen = defaultDelimitersOpen;
	    this.delimiterClose = defaultDelimitersClose;
	    this.delimiterIndex = -1;
	    this.currentSequence = void 0;
	    this.sequenceIndex = 0;
	    {
	      this.entityDecoder = new decode_js.EntityDecoder(
	        decode_js.htmlDecodeTree,
	        (cp, consumed) => this.emitCodePoint(cp, consumed)
	      );
	    }
	  }
	  get inSFCRoot() {
	    return this.mode === 2 && this.stack.length === 0;
	  }
	  reset() {
	    this.state = 1;
	    this.mode = 0;
	    this.buffer = "";
	    this.sectionStart = 0;
	    this.index = 0;
	    this.baseState = 1;
	    this.inRCDATA = false;
	    this.currentSequence = void 0;
	    this.newlines.length = 0;
	    this.delimiterOpen = defaultDelimitersOpen;
	    this.delimiterClose = defaultDelimitersClose;
	  }
	  getPos(index) {
	    let line = 1;
	    let column = index + 1;
	    for (let i = this.newlines.length - 1; i >= 0; i--) {
	      const newlineIndex = this.newlines[i];
	      if (index > newlineIndex) {
	        line = i + 2;
	        column = index - newlineIndex;
	        break;
	      }
	    }
	    return {
	      column,
	      line,
	      offset: index
	    };
	  }
	  peek() {
	    return this.buffer.charCodeAt(this.index + 1);
	  }
	  stateText(c) {
	    if (c === 60) {
	      if (this.index > this.sectionStart) {
	        this.cbs.ontext(this.sectionStart, this.index);
	      }
	      this.state = 5;
	      this.sectionStart = this.index;
	    } else if (c === 38) {
	      this.startEntity();
	    } else if (!this.inVPre && c === this.delimiterOpen[0]) {
	      this.state = 2;
	      this.delimiterIndex = 0;
	      this.stateInterpolationOpen(c);
	    }
	  }
	  stateInterpolationOpen(c) {
	    if (c === this.delimiterOpen[this.delimiterIndex]) {
	      if (this.delimiterIndex === this.delimiterOpen.length - 1) {
	        const start = this.index + 1 - this.delimiterOpen.length;
	        if (start > this.sectionStart) {
	          this.cbs.ontext(this.sectionStart, start);
	        }
	        this.state = 3;
	        this.sectionStart = start;
	      } else {
	        this.delimiterIndex++;
	      }
	    } else if (this.inRCDATA) {
	      this.state = 32;
	      this.stateInRCDATA(c);
	    } else {
	      this.state = 1;
	      this.stateText(c);
	    }
	  }
	  stateInterpolation(c) {
	    if (c === this.delimiterClose[0]) {
	      this.state = 4;
	      this.delimiterIndex = 0;
	      this.stateInterpolationClose(c);
	    }
	  }
	  stateInterpolationClose(c) {
	    if (c === this.delimiterClose[this.delimiterIndex]) {
	      if (this.delimiterIndex === this.delimiterClose.length - 1) {
	        this.cbs.oninterpolation(this.sectionStart, this.index + 1);
	        if (this.inRCDATA) {
	          this.state = 32;
	        } else {
	          this.state = 1;
	        }
	        this.sectionStart = this.index + 1;
	      } else {
	        this.delimiterIndex++;
	      }
	    } else {
	      this.state = 3;
	      this.stateInterpolation(c);
	    }
	  }
	  stateSpecialStartSequence(c) {
	    const isEnd = this.sequenceIndex === this.currentSequence.length;
	    const isMatch = isEnd ? (
	      isEndOfTagSection(c)
	    ) : (
	      (c | 32) === this.currentSequence[this.sequenceIndex]
	    );
	    if (!isMatch) {
	      this.inRCDATA = false;
	    } else if (!isEnd) {
	      this.sequenceIndex++;
	      return;
	    }
	    this.sequenceIndex = 0;
	    this.state = 6;
	    this.stateInTagName(c);
	  }
	  stateInRCDATA(c) {
	    if (this.sequenceIndex === this.currentSequence.length) {
	      if (c === 62 || isWhitespace(c)) {
	        const endOfText = this.index - this.currentSequence.length;
	        if (this.sectionStart < endOfText) {
	          const actualIndex = this.index;
	          this.index = endOfText;
	          this.cbs.ontext(this.sectionStart, endOfText);
	          this.index = actualIndex;
	        }
	        this.sectionStart = endOfText + 2;
	        this.stateInClosingTagName(c);
	        this.inRCDATA = false;
	        return;
	      }
	      this.sequenceIndex = 0;
	    }
	    if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
	      this.sequenceIndex += 1;
	    } else if (this.sequenceIndex === 0) {
	      if (this.currentSequence === Sequences.TitleEnd || this.currentSequence === Sequences.TextareaEnd && !this.inSFCRoot) {
	        if (c === 38) {
	          this.startEntity();
	        } else if (c === this.delimiterOpen[0]) {
	          this.state = 2;
	          this.delimiterIndex = 0;
	          this.stateInterpolationOpen(c);
	        }
	      } else if (this.fastForwardTo(60)) {
	        this.sequenceIndex = 1;
	      }
	    } else {
	      this.sequenceIndex = Number(c === 60);
	    }
	  }
	  stateCDATASequence(c) {
	    if (c === Sequences.Cdata[this.sequenceIndex]) {
	      if (++this.sequenceIndex === Sequences.Cdata.length) {
	        this.state = 28;
	        this.currentSequence = Sequences.CdataEnd;
	        this.sequenceIndex = 0;
	        this.sectionStart = this.index + 1;
	      }
	    } else {
	      this.sequenceIndex = 0;
	      this.state = 23;
	      this.stateInDeclaration(c);
	    }
	  }
	  fastForwardTo(c) {
	    while (++this.index < this.buffer.length) {
	      const cc = this.buffer.charCodeAt(this.index);
	      if (cc === 10) {
	        this.newlines.push(this.index);
	      }
	      if (cc === c) {
	        return true;
	      }
	    }
	    this.index = this.buffer.length - 1;
	    return false;
	  }
	  stateInCommentLike(c) {
	    if (c === this.currentSequence[this.sequenceIndex]) {
	      if (++this.sequenceIndex === this.currentSequence.length) {
	        if (this.currentSequence === Sequences.CdataEnd) {
	          this.cbs.oncdata(this.sectionStart, this.index - 2);
	        } else {
	          this.cbs.oncomment(this.sectionStart, this.index - 2);
	        }
	        this.sequenceIndex = 0;
	        this.sectionStart = this.index + 1;
	        this.state = 1;
	      }
	    } else if (this.sequenceIndex === 0) {
	      if (this.fastForwardTo(this.currentSequence[0])) {
	        this.sequenceIndex = 1;
	      }
	    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
	      this.sequenceIndex = 0;
	    }
	  }
	  startSpecial(sequence, offset) {
	    this.enterRCDATA(sequence, offset);
	    this.state = 31;
	  }
	  enterRCDATA(sequence, offset) {
	    this.inRCDATA = true;
	    this.currentSequence = sequence;
	    this.sequenceIndex = offset;
	  }
	  stateBeforeTagName(c) {
	    if (c === 33) {
	      this.state = 22;
	      this.sectionStart = this.index + 1;
	    } else if (c === 63) {
	      this.state = 24;
	      this.sectionStart = this.index + 1;
	    } else if (isTagStartChar(c)) {
	      this.sectionStart = this.index;
	      if (this.mode === 0) {
	        this.state = 6;
	      } else if (this.inSFCRoot) {
	        this.state = 34;
	      } else if (!this.inXML) {
	        if (c === 116) {
	          this.state = 30;
	        } else {
	          this.state = c === 115 ? 29 : 6;
	        }
	      } else {
	        this.state = 6;
	      }
	    } else if (c === 47) {
	      this.state = 8;
	    } else {
	      this.state = 1;
	      this.stateText(c);
	    }
	  }
	  stateInTagName(c) {
	    if (isEndOfTagSection(c)) {
	      this.handleTagName(c);
	    }
	  }
	  stateInSFCRootTagName(c) {
	    if (isEndOfTagSection(c)) {
	      const tag = this.buffer.slice(this.sectionStart, this.index);
	      if (tag !== "template") {
	        this.enterRCDATA(toCharCodes(`</` + tag), 0);
	      }
	      this.handleTagName(c);
	    }
	  }
	  handleTagName(c) {
	    this.cbs.onopentagname(this.sectionStart, this.index);
	    this.sectionStart = -1;
	    this.state = 11;
	    this.stateBeforeAttrName(c);
	  }
	  stateBeforeClosingTagName(c) {
	    if (isWhitespace(c)) ; else if (c === 62) {
	      {
	        this.cbs.onerr(14, this.index);
	      }
	      this.state = 1;
	      this.sectionStart = this.index + 1;
	    } else {
	      this.state = isTagStartChar(c) ? 9 : 27;
	      this.sectionStart = this.index;
	    }
	  }
	  stateInClosingTagName(c) {
	    if (c === 62 || isWhitespace(c)) {
	      this.cbs.onclosetag(this.sectionStart, this.index);
	      this.sectionStart = -1;
	      this.state = 10;
	      this.stateAfterClosingTagName(c);
	    }
	  }
	  stateAfterClosingTagName(c) {
	    if (c === 62) {
	      this.state = 1;
	      this.sectionStart = this.index + 1;
	    }
	  }
	  stateBeforeAttrName(c) {
	    if (c === 62) {
	      this.cbs.onopentagend(this.index);
	      if (this.inRCDATA) {
	        this.state = 32;
	      } else {
	        this.state = 1;
	      }
	      this.sectionStart = this.index + 1;
	    } else if (c === 47) {
	      this.state = 7;
	      if (this.peek() !== 62) {
	        this.cbs.onerr(22, this.index);
	      }
	    } else if (c === 60 && this.peek() === 47) {
	      this.cbs.onopentagend(this.index);
	      this.state = 5;
	      this.sectionStart = this.index;
	    } else if (!isWhitespace(c)) {
	      if (c === 61) {
	        this.cbs.onerr(
	          19,
	          this.index
	        );
	      }
	      this.handleAttrStart(c);
	    }
	  }
	  handleAttrStart(c) {
	    if (c === 118 && this.peek() === 45) {
	      this.state = 13;
	      this.sectionStart = this.index;
	    } else if (c === 46 || c === 58 || c === 64 || c === 35) {
	      this.cbs.ondirname(this.index, this.index + 1);
	      this.state = 14;
	      this.sectionStart = this.index + 1;
	    } else {
	      this.state = 12;
	      this.sectionStart = this.index;
	    }
	  }
	  stateInSelfClosingTag(c) {
	    if (c === 62) {
	      this.cbs.onselfclosingtag(this.index);
	      this.state = 1;
	      this.sectionStart = this.index + 1;
	      this.inRCDATA = false;
	    } else if (!isWhitespace(c)) {
	      this.state = 11;
	      this.stateBeforeAttrName(c);
	    }
	  }
	  stateInAttrName(c) {
	    if (c === 61 || isEndOfTagSection(c)) {
	      this.cbs.onattribname(this.sectionStart, this.index);
	      this.handleAttrNameEnd(c);
	    } else if (c === 34 || c === 39 || c === 60) {
	      this.cbs.onerr(
	        17,
	        this.index
	      );
	    }
	  }
	  stateInDirName(c) {
	    if (c === 61 || isEndOfTagSection(c)) {
	      this.cbs.ondirname(this.sectionStart, this.index);
	      this.handleAttrNameEnd(c);
	    } else if (c === 58) {
	      this.cbs.ondirname(this.sectionStart, this.index);
	      this.state = 14;
	      this.sectionStart = this.index + 1;
	    } else if (c === 46) {
	      this.cbs.ondirname(this.sectionStart, this.index);
	      this.state = 16;
	      this.sectionStart = this.index + 1;
	    }
	  }
	  stateInDirArg(c) {
	    if (c === 61 || isEndOfTagSection(c)) {
	      this.cbs.ondirarg(this.sectionStart, this.index);
	      this.handleAttrNameEnd(c);
	    } else if (c === 91) {
	      this.state = 15;
	    } else if (c === 46) {
	      this.cbs.ondirarg(this.sectionStart, this.index);
	      this.state = 16;
	      this.sectionStart = this.index + 1;
	    }
	  }
	  stateInDynamicDirArg(c) {
	    if (c === 93) {
	      this.state = 14;
	    } else if (c === 61 || isEndOfTagSection(c)) {
	      this.cbs.ondirarg(this.sectionStart, this.index + 1);
	      this.handleAttrNameEnd(c);
	      {
	        this.cbs.onerr(
	          27,
	          this.index
	        );
	      }
	    }
	  }
	  stateInDirModifier(c) {
	    if (c === 61 || isEndOfTagSection(c)) {
	      this.cbs.ondirmodifier(this.sectionStart, this.index);
	      this.handleAttrNameEnd(c);
	    } else if (c === 46) {
	      this.cbs.ondirmodifier(this.sectionStart, this.index);
	      this.sectionStart = this.index + 1;
	    }
	  }
	  handleAttrNameEnd(c) {
	    this.sectionStart = this.index;
	    this.state = 17;
	    this.cbs.onattribnameend(this.index);
	    this.stateAfterAttrName(c);
	  }
	  stateAfterAttrName(c) {
	    if (c === 61) {
	      this.state = 18;
	    } else if (c === 47 || c === 62) {
	      this.cbs.onattribend(0, this.sectionStart);
	      this.sectionStart = -1;
	      this.state = 11;
	      this.stateBeforeAttrName(c);
	    } else if (!isWhitespace(c)) {
	      this.cbs.onattribend(0, this.sectionStart);
	      this.handleAttrStart(c);
	    }
	  }
	  stateBeforeAttrValue(c) {
	    if (c === 34) {
	      this.state = 19;
	      this.sectionStart = this.index + 1;
	    } else if (c === 39) {
	      this.state = 20;
	      this.sectionStart = this.index + 1;
	    } else if (!isWhitespace(c)) {
	      this.sectionStart = this.index;
	      this.state = 21;
	      this.stateInAttrValueNoQuotes(c);
	    }
	  }
	  handleInAttrValue(c, quote) {
	    if (c === quote || false) {
	      this.cbs.onattribdata(this.sectionStart, this.index);
	      this.sectionStart = -1;
	      this.cbs.onattribend(
	        quote === 34 ? 3 : 2,
	        this.index + 1
	      );
	      this.state = 11;
	    } else if (c === 38) {
	      this.startEntity();
	    }
	  }
	  stateInAttrValueDoubleQuotes(c) {
	    this.handleInAttrValue(c, 34);
	  }
	  stateInAttrValueSingleQuotes(c) {
	    this.handleInAttrValue(c, 39);
	  }
	  stateInAttrValueNoQuotes(c) {
	    if (isWhitespace(c) || c === 62) {
	      this.cbs.onattribdata(this.sectionStart, this.index);
	      this.sectionStart = -1;
	      this.cbs.onattribend(1, this.index);
	      this.state = 11;
	      this.stateBeforeAttrName(c);
	    } else if (c === 34 || c === 39 || c === 60 || c === 61 || c === 96) {
	      this.cbs.onerr(
	        18,
	        this.index
	      );
	    } else if (c === 38) {
	      this.startEntity();
	    }
	  }
	  stateBeforeDeclaration(c) {
	    if (c === 91) {
	      this.state = 26;
	      this.sequenceIndex = 0;
	    } else {
	      this.state = c === 45 ? 25 : 23;
	    }
	  }
	  stateInDeclaration(c) {
	    if (c === 62 || this.fastForwardTo(62)) {
	      this.state = 1;
	      this.sectionStart = this.index + 1;
	    }
	  }
	  stateInProcessingInstruction(c) {
	    if (c === 62 || this.fastForwardTo(62)) {
	      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
	      this.state = 1;
	      this.sectionStart = this.index + 1;
	    }
	  }
	  stateBeforeComment(c) {
	    if (c === 45) {
	      this.state = 28;
	      this.currentSequence = Sequences.CommentEnd;
	      this.sequenceIndex = 2;
	      this.sectionStart = this.index + 1;
	    } else {
	      this.state = 23;
	    }
	  }
	  stateInSpecialComment(c) {
	    if (c === 62 || this.fastForwardTo(62)) {
	      this.cbs.oncomment(this.sectionStart, this.index);
	      this.state = 1;
	      this.sectionStart = this.index + 1;
	    }
	  }
	  stateBeforeSpecialS(c) {
	    if (c === Sequences.ScriptEnd[3]) {
	      this.startSpecial(Sequences.ScriptEnd, 4);
	    } else if (c === Sequences.StyleEnd[3]) {
	      this.startSpecial(Sequences.StyleEnd, 4);
	    } else {
	      this.state = 6;
	      this.stateInTagName(c);
	    }
	  }
	  stateBeforeSpecialT(c) {
	    if (c === Sequences.TitleEnd[3]) {
	      this.startSpecial(Sequences.TitleEnd, 4);
	    } else if (c === Sequences.TextareaEnd[3]) {
	      this.startSpecial(Sequences.TextareaEnd, 4);
	    } else {
	      this.state = 6;
	      this.stateInTagName(c);
	    }
	  }
	  startEntity() {
	    {
	      this.baseState = this.state;
	      this.state = 33;
	      this.entityStart = this.index;
	      this.entityDecoder.startEntity(
	        this.baseState === 1 || this.baseState === 32 ? decode_js.DecodingMode.Legacy : decode_js.DecodingMode.Attribute
	      );
	    }
	  }
	  stateInEntity() {
	    {
	      const length = this.entityDecoder.write(this.buffer, this.index);
	      if (length >= 0) {
	        this.state = this.baseState;
	        if (length === 0) {
	          this.index = this.entityStart;
	        }
	      } else {
	        this.index = this.buffer.length - 1;
	      }
	    }
	  }
	  parse(input) {
	    this.buffer = input;
	    while (this.index < this.buffer.length) {
	      const c = this.buffer.charCodeAt(this.index);
	      if (c === 10) {
	        this.newlines.push(this.index);
	      }
	      switch (this.state) {
	        case 1: {
	          this.stateText(c);
	          break;
	        }
	        case 2: {
	          this.stateInterpolationOpen(c);
	          break;
	        }
	        case 3: {
	          this.stateInterpolation(c);
	          break;
	        }
	        case 4: {
	          this.stateInterpolationClose(c);
	          break;
	        }
	        case 31: {
	          this.stateSpecialStartSequence(c);
	          break;
	        }
	        case 32: {
	          this.stateInRCDATA(c);
	          break;
	        }
	        case 26: {
	          this.stateCDATASequence(c);
	          break;
	        }
	        case 19: {
	          this.stateInAttrValueDoubleQuotes(c);
	          break;
	        }
	        case 12: {
	          this.stateInAttrName(c);
	          break;
	        }
	        case 13: {
	          this.stateInDirName(c);
	          break;
	        }
	        case 14: {
	          this.stateInDirArg(c);
	          break;
	        }
	        case 15: {
	          this.stateInDynamicDirArg(c);
	          break;
	        }
	        case 16: {
	          this.stateInDirModifier(c);
	          break;
	        }
	        case 28: {
	          this.stateInCommentLike(c);
	          break;
	        }
	        case 27: {
	          this.stateInSpecialComment(c);
	          break;
	        }
	        case 11: {
	          this.stateBeforeAttrName(c);
	          break;
	        }
	        case 6: {
	          this.stateInTagName(c);
	          break;
	        }
	        case 34: {
	          this.stateInSFCRootTagName(c);
	          break;
	        }
	        case 9: {
	          this.stateInClosingTagName(c);
	          break;
	        }
	        case 5: {
	          this.stateBeforeTagName(c);
	          break;
	        }
	        case 17: {
	          this.stateAfterAttrName(c);
	          break;
	        }
	        case 20: {
	          this.stateInAttrValueSingleQuotes(c);
	          break;
	        }
	        case 18: {
	          this.stateBeforeAttrValue(c);
	          break;
	        }
	        case 8: {
	          this.stateBeforeClosingTagName(c);
	          break;
	        }
	        case 10: {
	          this.stateAfterClosingTagName(c);
	          break;
	        }
	        case 29: {
	          this.stateBeforeSpecialS(c);
	          break;
	        }
	        case 30: {
	          this.stateBeforeSpecialT(c);
	          break;
	        }
	        case 21: {
	          this.stateInAttrValueNoQuotes(c);
	          break;
	        }
	        case 7: {
	          this.stateInSelfClosingTag(c);
	          break;
	        }
	        case 23: {
	          this.stateInDeclaration(c);
	          break;
	        }
	        case 22: {
	          this.stateBeforeDeclaration(c);
	          break;
	        }
	        case 25: {
	          this.stateBeforeComment(c);
	          break;
	        }
	        case 24: {
	          this.stateInProcessingInstruction(c);
	          break;
	        }
	        case 33: {
	          this.stateInEntity();
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.cleanup();
	    this.finish();
	  }
	  cleanup() {
	    if (this.sectionStart !== this.index) {
	      if (this.state === 1 || this.state === 32 && this.sequenceIndex === 0) {
	        this.cbs.ontext(this.sectionStart, this.index);
	        this.sectionStart = this.index;
	      } else if (this.state === 19 || this.state === 20 || this.state === 21) {
	        this.cbs.onattribdata(this.sectionStart, this.index);
	        this.sectionStart = this.index;
	      }
	    }
	  }
	  finish() {
	    if (this.state === 33) {
	      this.entityDecoder.end();
	      this.state = this.baseState;
	    }
	    this.handleTrailingData();
	    this.cbs.onend();
	  }
	  handleTrailingData() {
	    const endIndex = this.buffer.length;
	    if (this.sectionStart >= endIndex) {
	      return;
	    }
	    if (this.state === 28) {
	      if (this.currentSequence === Sequences.CdataEnd) {
	        this.cbs.oncdata(this.sectionStart, endIndex);
	      } else {
	        this.cbs.oncomment(this.sectionStart, endIndex);
	      }
	    } else if (this.state === 6 || this.state === 11 || this.state === 18 || this.state === 17 || this.state === 12 || this.state === 13 || this.state === 14 || this.state === 15 || this.state === 16 || this.state === 20 || this.state === 19 || this.state === 21 || this.state === 9) ; else {
	      this.cbs.ontext(this.sectionStart, endIndex);
	    }
	  }
	  emitCodePoint(cp, consumed) {
	    {
	      if (this.baseState !== 1 && this.baseState !== 32) {
	        if (this.sectionStart < this.entityStart) {
	          this.cbs.onattribdata(this.sectionStart, this.entityStart);
	        }
	        this.sectionStart = this.entityStart + consumed;
	        this.index = this.sectionStart - 1;
	        this.cbs.onattribentity(
	          decode_js.fromCodePoint(cp),
	          this.entityStart,
	          this.sectionStart
	        );
	      } else {
	        if (this.sectionStart < this.entityStart) {
	          this.cbs.ontext(this.sectionStart, this.entityStart);
	        }
	        this.sectionStart = this.entityStart + consumed;
	        this.index = this.sectionStart - 1;
	        this.cbs.ontextentity(
	          decode_js.fromCodePoint(cp),
	          this.entityStart,
	          this.sectionStart
	        );
	      }
	    }
	  }
	}
	const CompilerDeprecationTypes = {
	  "COMPILER_IS_ON_ELEMENT": "COMPILER_IS_ON_ELEMENT",
	  "COMPILER_V_BIND_SYNC": "COMPILER_V_BIND_SYNC",
	  "COMPILER_V_BIND_OBJECT_ORDER": "COMPILER_V_BIND_OBJECT_ORDER",
	  "COMPILER_V_ON_NATIVE": "COMPILER_V_ON_NATIVE",
	  "COMPILER_V_IF_V_FOR_PRECEDENCE": "COMPILER_V_IF_V_FOR_PRECEDENCE",
	  "COMPILER_NATIVE_TEMPLATE": "COMPILER_NATIVE_TEMPLATE",
	  "COMPILER_INLINE_TEMPLATE": "COMPILER_INLINE_TEMPLATE",
	  "COMPILER_FILTERS": "COMPILER_FILTERS"
	};
	const deprecationData = {
	  ["COMPILER_IS_ON_ELEMENT"]: {
	    message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
	  },
	  ["COMPILER_V_BIND_SYNC"]: {
	    message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
	  },
	  ["COMPILER_V_BIND_OBJECT_ORDER"]: {
	    message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
	  },
	  ["COMPILER_V_ON_NATIVE"]: {
	    message: `.native modifier for v-on has been removed as is no longer necessary.`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
	  },
	  ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
	    message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
	  },
	  ["COMPILER_NATIVE_TEMPLATE"]: {
	    message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
	  },
	  ["COMPILER_INLINE_TEMPLATE"]: {
	    message: `"inline-template" has been removed in Vue 3.`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
	  },
	  ["COMPILER_FILTERS"]: {
	    message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
	    link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
	  }
	};
	function getCompatValue(key, { compatConfig }) {
	  const value = compatConfig && compatConfig[key];
	  if (key === "MODE") {
	    return value || 3;
	  } else {
	    return value;
	  }
	}
	function isCompatEnabled(key, context) {
	  const mode = getCompatValue("MODE", context);
	  const value = getCompatValue(key, context);
	  return mode === 3 ? value === true : value !== false;
	}
	function checkCompatEnabled(key, context, loc, ...args) {
	  const enabled = isCompatEnabled(key, context);
	  if (enabled) {
	    warnDeprecation(key, context, loc, ...args);
	  }
	  return enabled;
	}
	function warnDeprecation(key, context, loc, ...args) {
	  const val = getCompatValue(key, context);
	  if (val === "suppress-warning") {
	    return;
	  }
	  const { message, link } = deprecationData[key];
	  const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
	  const err = new SyntaxError(msg);
	  err.code = key;
	  if (loc) err.loc = loc;
	  context.onWarn(err);
	}
	function defaultOnError(error) {
	  throw error;
	}
	function defaultOnWarn(msg) {
	  console.warn(`[Vue warn] ${msg.message}`);
	}
	function createCompilerError(code, loc, messages, additionalMessage) {
	  const msg = (messages || errorMessages)[code] + (additionalMessage || ``) ;
	  const error = new SyntaxError(String(msg));
	  error.code = code;
	  error.loc = loc;
	  return error;
	}
	const ErrorCodes = {
	  "ABRUPT_CLOSING_OF_EMPTY_COMMENT": 0,
	  "0": "ABRUPT_CLOSING_OF_EMPTY_COMMENT",
	  "CDATA_IN_HTML_CONTENT": 1,
	  "1": "CDATA_IN_HTML_CONTENT",
	  "DUPLICATE_ATTRIBUTE": 2,
	  "2": "DUPLICATE_ATTRIBUTE",
	  "END_TAG_WITH_ATTRIBUTES": 3,
	  "3": "END_TAG_WITH_ATTRIBUTES",
	  "END_TAG_WITH_TRAILING_SOLIDUS": 4,
	  "4": "END_TAG_WITH_TRAILING_SOLIDUS",
	  "EOF_BEFORE_TAG_NAME": 5,
	  "5": "EOF_BEFORE_TAG_NAME",
	  "EOF_IN_CDATA": 6,
	  "6": "EOF_IN_CDATA",
	  "EOF_IN_COMMENT": 7,
	  "7": "EOF_IN_COMMENT",
	  "EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT": 8,
	  "8": "EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT",
	  "EOF_IN_TAG": 9,
	  "9": "EOF_IN_TAG",
	  "INCORRECTLY_CLOSED_COMMENT": 10,
	  "10": "INCORRECTLY_CLOSED_COMMENT",
	  "INCORRECTLY_OPENED_COMMENT": 11,
	  "11": "INCORRECTLY_OPENED_COMMENT",
	  "INVALID_FIRST_CHARACTER_OF_TAG_NAME": 12,
	  "12": "INVALID_FIRST_CHARACTER_OF_TAG_NAME",
	  "MISSING_ATTRIBUTE_VALUE": 13,
	  "13": "MISSING_ATTRIBUTE_VALUE",
	  "MISSING_END_TAG_NAME": 14,
	  "14": "MISSING_END_TAG_NAME",
	  "MISSING_WHITESPACE_BETWEEN_ATTRIBUTES": 15,
	  "15": "MISSING_WHITESPACE_BETWEEN_ATTRIBUTES",
	  "NESTED_COMMENT": 16,
	  "16": "NESTED_COMMENT",
	  "UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME": 17,
	  "17": "UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME",
	  "UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE": 18,
	  "18": "UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE",
	  "UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME": 19,
	  "19": "UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME",
	  "UNEXPECTED_NULL_CHARACTER": 20,
	  "20": "UNEXPECTED_NULL_CHARACTER",
	  "UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME": 21,
	  "21": "UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME",
	  "UNEXPECTED_SOLIDUS_IN_TAG": 22,
	  "22": "UNEXPECTED_SOLIDUS_IN_TAG",
	  "X_INVALID_END_TAG": 23,
	  "23": "X_INVALID_END_TAG",
	  "X_MISSING_END_TAG": 24,
	  "24": "X_MISSING_END_TAG",
	  "X_MISSING_INTERPOLATION_END": 25,
	  "25": "X_MISSING_INTERPOLATION_END",
	  "X_MISSING_DIRECTIVE_NAME": 26,
	  "26": "X_MISSING_DIRECTIVE_NAME",
	  "X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END": 27,
	  "27": "X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END",
	  "X_V_IF_NO_EXPRESSION": 28,
	  "28": "X_V_IF_NO_EXPRESSION",
	  "X_V_IF_SAME_KEY": 29,
	  "29": "X_V_IF_SAME_KEY",
	  "X_V_ELSE_NO_ADJACENT_IF": 30,
	  "30": "X_V_ELSE_NO_ADJACENT_IF",
	  "X_V_FOR_NO_EXPRESSION": 31,
	  "31": "X_V_FOR_NO_EXPRESSION",
	  "X_V_FOR_MALFORMED_EXPRESSION": 32,
	  "32": "X_V_FOR_MALFORMED_EXPRESSION",
	  "X_V_FOR_TEMPLATE_KEY_PLACEMENT": 33,
	  "33": "X_V_FOR_TEMPLATE_KEY_PLACEMENT",
	  "X_V_BIND_NO_EXPRESSION": 34,
	  "34": "X_V_BIND_NO_EXPRESSION",
	  "X_V_ON_NO_EXPRESSION": 35,
	  "35": "X_V_ON_NO_EXPRESSION",
	  "X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET": 36,
	  "36": "X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET",
	  "X_V_SLOT_MIXED_SLOT_USAGE": 37,
	  "37": "X_V_SLOT_MIXED_SLOT_USAGE",
	  "X_V_SLOT_DUPLICATE_SLOT_NAMES": 38,
	  "38": "X_V_SLOT_DUPLICATE_SLOT_NAMES",
	  "X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN": 39,
	  "39": "X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN",
	  "X_V_SLOT_MISPLACED": 40,
	  "40": "X_V_SLOT_MISPLACED",
	  "X_V_MODEL_NO_EXPRESSION": 41,
	  "41": "X_V_MODEL_NO_EXPRESSION",
	  "X_V_MODEL_MALFORMED_EXPRESSION": 42,
	  "42": "X_V_MODEL_MALFORMED_EXPRESSION",
	  "X_V_MODEL_ON_SCOPE_VARIABLE": 43,
	  "43": "X_V_MODEL_ON_SCOPE_VARIABLE",
	  "X_V_MODEL_ON_PROPS": 44,
	  "44": "X_V_MODEL_ON_PROPS",
	  "X_INVALID_EXPRESSION": 45,
	  "45": "X_INVALID_EXPRESSION",
	  "X_KEEP_ALIVE_INVALID_CHILDREN": 46,
	  "46": "X_KEEP_ALIVE_INVALID_CHILDREN",
	  "X_PREFIX_ID_NOT_SUPPORTED": 47,
	  "47": "X_PREFIX_ID_NOT_SUPPORTED",
	  "X_MODULE_MODE_NOT_SUPPORTED": 48,
	  "48": "X_MODULE_MODE_NOT_SUPPORTED",
	  "X_CACHE_HANDLER_NOT_SUPPORTED": 49,
	  "49": "X_CACHE_HANDLER_NOT_SUPPORTED",
	  "X_SCOPE_ID_NOT_SUPPORTED": 50,
	  "50": "X_SCOPE_ID_NOT_SUPPORTED",
	  "X_VNODE_HOOKS": 51,
	  "51": "X_VNODE_HOOKS",
	  "X_V_BIND_INVALID_SAME_NAME_ARGUMENT": 52,
	  "52": "X_V_BIND_INVALID_SAME_NAME_ARGUMENT",
	  "__EXTEND_POINT__": 53,
	  "53": "__EXTEND_POINT__"
	};
	const errorMessages = {
	  [0]: "Illegal comment.",
	  [1]: "CDATA section is allowed only in XML context.",
	  [2]: "Duplicate attribute.",
	  [3]: "End tag cannot have attributes.",
	  [4]: "Illegal '/' in tags.",
	  [5]: "Unexpected EOF in tag.",
	  [6]: "Unexpected EOF in CDATA section.",
	  [7]: "Unexpected EOF in comment.",
	  [8]: "Unexpected EOF in script.",
	  [9]: "Unexpected EOF in tag.",
	  [10]: "Incorrectly closed comment.",
	  [11]: "Incorrectly opened comment.",
	  [12]: "Illegal tag name. Use '&lt;' to print '<'.",
	  [13]: "Attribute value was expected.",
	  [14]: "End tag name was expected.",
	  [15]: "Whitespace was expected.",
	  [16]: "Unexpected '<!--' in comment.",
	  [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
	  [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
	  [19]: "Attribute name cannot start with '='.",
	  [21]: "'<?' is allowed only in XML context.",
	  [20]: `Unexpected null character.`,
	  [22]: "Illegal '/' in tags.",
	  [23]: "Invalid end tag.",
	  [24]: "Element is missing end tag.",
	  [25]: "Interpolation end sign was not found.",
	  [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
	  [26]: "Legal directive name was expected.",
	  [28]: `v-if/v-else-if is missing expression.`,
	  [29]: `v-if/else branches must use unique keys.`,
	  [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
	  [31]: `v-for is missing expression.`,
	  [32]: `v-for has invalid expression.`,
	  [33]: `<template v-for> key should be placed on the <template> tag.`,
	  [34]: `v-bind is missing expression.`,
	  [52]: `v-bind with same-name shorthand only allows static argument.`,
	  [35]: `v-on is missing expression.`,
	  [36]: `Unexpected custom directive on <slot> outlet.`,
	  [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
	  [38]: `Duplicate slot names found. `,
	  [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
	  [40]: `v-slot can only be used on components or <template> tags.`,
	  [41]: `v-model is missing expression.`,
	  [42]: `v-model value must be a valid JavaScript member expression.`,
	  [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
	  [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
	  [45]: `Error parsing JavaScript expression: `,
	  [46]: `<KeepAlive> expects exactly one child component.`,
	  [51]: `@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.`,
	  [47]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
	  [48]: `ES module mode is not supported in this build of compiler.`,
	  [49]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
	  [50]: `"scopeId" option is only supported in module mode.`,
	  [53]: ``
	};
	function walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds =  Object.create(null)) {
	  const rootExp = root.type === "Program" ? root.body[0].type === "ExpressionStatement" && root.body[0].expression : root;
	  estreeWalker.walk(root, {
	    enter(node, parent) {
	      parent && parentStack.push(parent);
	      if (parent && parent.type.startsWith("TS") && !TS_NODE_TYPES.includes(parent.type)) {
	        return this.skip();
	      }
	      if (node.type === "Identifier") {
	        const isLocal = !!knownIds[node.name];
	        const isRefed = isReferencedIdentifier(node, parent, parentStack);
	        if (includeAll || isRefed && !isLocal) {
	          onIdentifier(node, parent, parentStack, isRefed, isLocal);
	        }
	      } else if (node.type === "ObjectProperty" &&
	      (parent == null ? void 0 : parent.type) === "ObjectPattern") {
	        node.inPattern = true;
	      } else if (isFunctionType(node)) {
	        if (node.scopeIds) {
	          node.scopeIds.forEach((id) => markKnownIds(id, knownIds));
	        } else {
	          walkFunctionParams(
	            node,
	            (id) => markScopeIdentifier(node, id, knownIds)
	          );
	        }
	      } else if (node.type === "BlockStatement") {
	        if (node.scopeIds) {
	          node.scopeIds.forEach((id) => markKnownIds(id, knownIds));
	        } else {
	          walkBlockDeclarations(
	            node,
	            (id) => markScopeIdentifier(node, id, knownIds)
	          );
	        }
	      }
	    },
	    leave(node, parent) {
	      parent && parentStack.pop();
	      if (node !== rootExp && node.scopeIds) {
	        for (const id of node.scopeIds) {
	          knownIds[id]--;
	          if (knownIds[id] === 0) {
	            delete knownIds[id];
	          }
	        }
	      }
	    }
	  });
	}
	function isReferencedIdentifier(id, parent, parentStack) {
	  if (!parent) {
	    return true;
	  }
	  if (id.name === "arguments") {
	    return false;
	  }
	  if (isReferenced(id, parent)) {
	    return true;
	  }
	  switch (parent.type) {
	    case "AssignmentExpression":
	    case "AssignmentPattern":
	      return true;
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return isInDestructureAssignment(parent, parentStack);
	  }
	  return false;
	}
	function isInDestructureAssignment(parent, parentStack) {
	  if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
	    let i = parentStack.length;
	    while (i--) {
	      const p = parentStack[i];
	      if (p.type === "AssignmentExpression") {
	        return true;
	      } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
	        break;
	      }
	    }
	  }
	  return false;
	}
	function isInNewExpression(parentStack) {
	  let i = parentStack.length;
	  while (i--) {
	    const p = parentStack[i];
	    if (p.type === "NewExpression") {
	      return true;
	    } else if (p.type !== "MemberExpression") {
	      break;
	    }
	  }
	  return false;
	}
	function walkFunctionParams(node, onIdent) {
	  for (const p of node.params) {
	    for (const id of extractIdentifiers(p)) {
	      onIdent(id);
	    }
	  }
	}
	function walkBlockDeclarations(block, onIdent) {
	  for (const stmt of block.body) {
	    if (stmt.type === "VariableDeclaration") {
	      if (stmt.declare) continue;
	      for (const decl of stmt.declarations) {
	        for (const id of extractIdentifiers(decl.id)) {
	          onIdent(id);
	        }
	      }
	    } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
	      if (stmt.declare || !stmt.id) continue;
	      onIdent(stmt.id);
	    } else if (stmt.type === "ForOfStatement" || stmt.type === "ForInStatement" || stmt.type === "ForStatement") {
	      const variable = stmt.type === "ForStatement" ? stmt.init : stmt.left;
	      if (variable && variable.type === "VariableDeclaration") {
	        for (const decl of variable.declarations) {
	          for (const id of extractIdentifiers(decl.id)) {
	            onIdent(id);
	          }
	        }
	      }
	    }
	  }
	}
	function extractIdentifiers(param, nodes = []) {
	  switch (param.type) {
	    case "Identifier":
	      nodes.push(param);
	      break;
	    case "MemberExpression":
	      let object = param;
	      while (object.type === "MemberExpression") {
	        object = object.object;
	      }
	      nodes.push(object);
	      break;
	    case "ObjectPattern":
	      for (const prop of param.properties) {
	        if (prop.type === "RestElement") {
	          extractIdentifiers(prop.argument, nodes);
	        } else {
	          extractIdentifiers(prop.value, nodes);
	        }
	      }
	      break;
	    case "ArrayPattern":
	      param.elements.forEach((element) => {
	        if (element) extractIdentifiers(element, nodes);
	      });
	      break;
	    case "RestElement":
	      extractIdentifiers(param.argument, nodes);
	      break;
	    case "AssignmentPattern":
	      extractIdentifiers(param.left, nodes);
	      break;
	  }
	  return nodes;
	}
	function markKnownIds(name, knownIds) {
	  if (name in knownIds) {
	    knownIds[name]++;
	  } else {
	    knownIds[name] = 1;
	  }
	}
	function markScopeIdentifier(node, child, knownIds) {
	  const { name } = child;
	  if (node.scopeIds && node.scopeIds.has(name)) {
	    return;
	  }
	  markKnownIds(name, knownIds);
	  (node.scopeIds || (node.scopeIds =  new Set())).add(name);
	}
	const isFunctionType = (node) => {
	  return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
	};
	const isStaticProperty = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
	const isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
	function isReferenced(node, parent, grandparent) {
	  switch (parent.type) {
	    case "MemberExpression":
	    case "OptionalMemberExpression":
	      if (parent.property === node) {
	        return !!parent.computed;
	      }
	      return parent.object === node;
	    case "JSXMemberExpression":
	      return parent.object === node;
	    case "VariableDeclarator":
	      return parent.init === node;
	    case "ArrowFunctionExpression":
	      return parent.body === node;
	    case "PrivateName":
	      return false;
	    case "ClassMethod":
	    case "ClassPrivateMethod":
	    case "ObjectMethod":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }
	      return false;
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }
	      return !grandparent ;
	    case "ClassProperty":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }
	      return true;
	    case "ClassPrivateProperty":
	      return parent.key !== node;
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.superClass === node;
	    case "AssignmentExpression":
	      return parent.right === node;
	    case "AssignmentPattern":
	      return parent.right === node;
	    case "LabeledStatement":
	      return false;
	    case "CatchClause":
	      return false;
	    case "RestElement":
	      return false;
	    case "BreakStatement":
	    case "ContinueStatement":
	      return false;
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      return false;
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;
	    case "ExportSpecifier":
	      return parent.local === node;
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;
	    case "ImportAttribute":
	      return false;
	    case "JSXAttribute":
	      return false;
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	    case "MetaProperty":
	      return false;
	    case "ObjectTypeProperty":
	      return parent.key !== node;
	    case "TSEnumMember":
	      return parent.id !== node;
	    case "TSPropertySignature":
	      if (parent.key === node) {
	        return !!parent.computed;
	      }
	      return true;
	  }
	  return true;
	}
	const TS_NODE_TYPES = [
	  "TSAsExpression",
	  "TSTypeAssertion",
	  "TSNonNullExpression",
	  "TSInstantiationExpression",
	  "TSSatisfiesExpression"
	];
	function unwrapTSNode(node) {
	  if (TS_NODE_TYPES.includes(node.type)) {
	    return unwrapTSNode(node.expression);
	  } else {
	    return node;
	  }
	}
	const isStaticExp = (p) => p.type === 4 && p.isStatic;
	function isCoreComponent(tag) {
	  switch (tag) {
	    case "Teleport":
	    case "teleport":
	      return TELEPORT;
	    case "Suspense":
	    case "suspense":
	      return SUSPENSE;
	    case "KeepAlive":
	    case "keep-alive":
	      return KEEP_ALIVE;
	    case "BaseTransition":
	    case "base-transition":
	      return BASE_TRANSITION;
	  }
	}
	const nonIdentifierRE = /^\d|[^\$\w\xA0-\uFFFF]/;
	const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
	const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
	const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
	const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
	const isMemberExpressionBrowser = (path) => {
	  path = path.trim().replace(whitespaceRE, (s) => s.trim());
	  let state = 0 ;
	  let stateStack = [];
	  let currentOpenBracketCount = 0;
	  let currentOpenParensCount = 0;
	  let currentStringType = null;
	  for (let i = 0; i < path.length; i++) {
	    const char = path.charAt(i);
	    switch (state) {
	      case 0 :
	        if (char === "[") {
	          stateStack.push(state);
	          state = 1 ;
	          currentOpenBracketCount++;
	        } else if (char === "(") {
	          stateStack.push(state);
	          state = 2 ;
	          currentOpenParensCount++;
	        } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
	          return false;
	        }
	        break;
	      case 1 :
	        if (char === `'` || char === `"` || char === "`") {
	          stateStack.push(state);
	          state = 3 ;
	          currentStringType = char;
	        } else if (char === `[`) {
	          currentOpenBracketCount++;
	        } else if (char === `]`) {
	          if (!--currentOpenBracketCount) {
	            state = stateStack.pop();
	          }
	        }
	        break;
	      case 2 :
	        if (char === `'` || char === `"` || char === "`") {
	          stateStack.push(state);
	          state = 3 ;
	          currentStringType = char;
	        } else if (char === `(`) {
	          currentOpenParensCount++;
	        } else if (char === `)`) {
	          if (i === path.length - 1) {
	            return false;
	          }
	          if (!--currentOpenParensCount) {
	            state = stateStack.pop();
	          }
	        }
	        break;
	      case 3 :
	        if (char === currentStringType) {
	          state = stateStack.pop();
	          currentStringType = null;
	        }
	        break;
	    }
	  }
	  return !currentOpenBracketCount && !currentOpenParensCount;
	};
	const isMemberExpressionNode = (path, context) => {
	  try {
	    let ret = parser.parseExpression(path, {
	      plugins: context.expressionPlugins
	    });
	    ret = unwrapTSNode(ret);
	    return ret.type === "MemberExpression" || ret.type === "OptionalMemberExpression" || ret.type === "Identifier" && ret.name !== "undefined";
	  } catch (e) {
	    return false;
	  }
	};
	const isMemberExpression = isMemberExpressionNode;
	function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
	  return advancePositionWithMutation(
	    {
	      offset: pos.offset,
	      line: pos.line,
	      column: pos.column
	    },
	    source,
	    numberOfCharacters
	  );
	}
	function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
	  let linesCount = 0;
	  let lastNewLinePos = -1;
	  for (let i = 0; i < numberOfCharacters; i++) {
	    if (source.charCodeAt(i) === 10) {
	      linesCount++;
	      lastNewLinePos = i;
	    }
	  }
	  pos.offset += numberOfCharacters;
	  pos.line += linesCount;
	  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
	  return pos;
	}
	function assert(condition, msg) {
	  if (!condition) {
	    throw new Error(msg || `unexpected compiler condition`);
	  }
	}
	function findDir(node, name, allowEmpty = false) {
	  for (let i = 0; i < node.props.length; i++) {
	    const p = node.props[i];
	    if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) {
	      return p;
	    }
	  }
	}
	function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
	  for (let i = 0; i < node.props.length; i++) {
	    const p = node.props[i];
	    if (p.type === 6) {
	      if (dynamicOnly) continue;
	      if (p.name === name && (p.value || allowEmpty)) {
	        return p;
	      }
	    } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {
	      return p;
	    }
	  }
	}
	function isStaticArgOf(arg, name) {
	  return !!(arg && isStaticExp(arg) && arg.content === name);
	}
	function hasDynamicKeyVBind(node) {
	  return node.props.some(
	    (p) => p.type === 7 && p.name === "bind" && (!p.arg ||
	    p.arg.type !== 4 ||
	    !p.arg.isStatic)
	  );
	}
	function isText$1(node) {
	  return node.type === 5 || node.type === 2;
	}
	function isVSlot(p) {
	  return p.type === 7 && p.name === "slot";
	}
	function isTemplateNode(node) {
	  return node.type === 1 && node.tagType === 3;
	}
	function isSlotOutlet(node) {
	  return node.type === 1 && node.tagType === 2;
	}
	const propsHelperSet =  new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
	function getUnnormalizedProps(props, callPath = []) {
	  if (props && !shared.isString(props) && props.type === 14) {
	    const callee = props.callee;
	    if (!shared.isString(callee) && propsHelperSet.has(callee)) {
	      return getUnnormalizedProps(
	        props.arguments[0],
	        callPath.concat(props)
	      );
	    }
	  }
	  return [props, callPath];
	}
	function injectProp(node, prop, context) {
	  let propsWithInjection;
	  let props = node.type === 13 ? node.props : node.arguments[2];
	  let callPath = [];
	  let parentCall;
	  if (props && !shared.isString(props) && props.type === 14) {
	    const ret = getUnnormalizedProps(props);
	    props = ret[0];
	    callPath = ret[1];
	    parentCall = callPath[callPath.length - 1];
	  }
	  if (props == null || shared.isString(props)) {
	    propsWithInjection = createObjectExpression([prop]);
	  } else if (props.type === 14) {
	    const first = props.arguments[0];
	    if (!shared.isString(first) && first.type === 15) {
	      if (!hasProp(prop, first)) {
	        first.properties.unshift(prop);
	      }
	    } else {
	      if (props.callee === TO_HANDLERS) {
	        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
	          createObjectExpression([prop]),
	          props
	        ]);
	      } else {
	        props.arguments.unshift(createObjectExpression([prop]));
	      }
	    }
	    !propsWithInjection && (propsWithInjection = props);
	  } else if (props.type === 15) {
	    if (!hasProp(prop, props)) {
	      props.properties.unshift(prop);
	    }
	    propsWithInjection = props;
	  } else {
	    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
	      createObjectExpression([prop]),
	      props
	    ]);
	    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
	      parentCall = callPath[callPath.length - 2];
	    }
	  }
	  if (node.type === 13) {
	    if (parentCall) {
	      parentCall.arguments[0] = propsWithInjection;
	    } else {
	      node.props = propsWithInjection;
	    }
	  } else {
	    if (parentCall) {
	      parentCall.arguments[0] = propsWithInjection;
	    } else {
	      node.arguments[2] = propsWithInjection;
	    }
	  }
	}
	function hasProp(prop, props) {
	  let result = false;
	  if (prop.key.type === 4) {
	    const propKeyName = prop.key.content;
	    result = props.properties.some(
	      (p) => p.key.type === 4 && p.key.content === propKeyName
	    );
	  }
	  return result;
	}
	function toValidAssetId(name, type) {
	  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
	    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
	  })}`;
	}
	function hasScopeRef(node, ids) {
	  if (!node || Object.keys(ids).length === 0) {
	    return false;
	  }
	  switch (node.type) {
	    case 1:
	      for (let i = 0; i < node.props.length; i++) {
	        const p = node.props[i];
	        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
	          return true;
	        }
	      }
	      return node.children.some((c) => hasScopeRef(c, ids));
	    case 11:
	      if (hasScopeRef(node.source, ids)) {
	        return true;
	      }
	      return node.children.some((c) => hasScopeRef(c, ids));
	    case 9:
	      return node.branches.some((b) => hasScopeRef(b, ids));
	    case 10:
	      if (hasScopeRef(node.condition, ids)) {
	        return true;
	      }
	      return node.children.some((c) => hasScopeRef(c, ids));
	    case 4:
	      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
	    case 8:
	      return node.children.some((c) => shared.isObject(c) && hasScopeRef(c, ids));
	    case 5:
	    case 12:
	      return hasScopeRef(node.content, ids);
	    case 2:
	    case 3:
	      return false;
	    default:
	      return false;
	  }
	}
	function getMemoedVNodeCall(node) {
	  if (node.type === 14 && node.callee === WITH_MEMO) {
	    return node.arguments[1].returns;
	  } else {
	    return node;
	  }
	}
	const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+(\S[\s\S]*)/;
	const defaultParserOptions = {
	  parseMode: "base",
	  ns: 0,
	  delimiters: [`{{`, `}}`],
	  getNamespace: () => 0,
	  isVoidTag: shared.NO,
	  isPreTag: shared.NO,
	  isCustomElement: shared.NO,
	  onError: defaultOnError,
	  onWarn: defaultOnWarn,
	  comments: true,
	  prefixIdentifiers: false
	};
	let currentOptions = defaultParserOptions;
	let currentRoot = null;
	let currentInput = "";
	let currentOpenTag = null;
	let currentProp = null;
	let currentAttrValue = "";
	let currentAttrStartIndex = -1;
	let currentAttrEndIndex = -1;
	let inPre = 0;
	let inVPre = false;
	let currentVPreBoundary = null;
	const stack = [];
	const tokenizer = new Tokenizer(stack, {
	  onerr: emitError,
	  ontext(start, end) {
	    onText(getSlice(start, end), start, end);
	  },
	  ontextentity(char, start, end) {
	    onText(char, start, end);
	  },
	  oninterpolation(start, end) {
	    if (inVPre) {
	      return onText(getSlice(start, end), start, end);
	    }
	    let innerStart = start + tokenizer.delimiterOpen.length;
	    let innerEnd = end - tokenizer.delimiterClose.length;
	    while (isWhitespace(currentInput.charCodeAt(innerStart))) {
	      innerStart++;
	    }
	    while (isWhitespace(currentInput.charCodeAt(innerEnd - 1))) {
	      innerEnd--;
	    }
	    let exp = getSlice(innerStart, innerEnd);
	    if (exp.includes("&")) {
	      {
	        exp = decode_js.decodeHTML(exp);
	      }
	    }
	    addNode({
	      type: 5,
	      content: createExp(exp, false, getLoc(innerStart, innerEnd)),
	      loc: getLoc(start, end)
	    });
	  },
	  onopentagname(start, end) {
	    const name = getSlice(start, end);
	    currentOpenTag = {
	      type: 1,
	      tag: name,
	      ns: currentOptions.getNamespace(name, stack[0], currentOptions.ns),
	      tagType: 0,
	      props: [],
	      children: [],
	      loc: getLoc(start - 1, end),
	      codegenNode: void 0
	    };
	  },
	  onopentagend(end) {
	    endOpenTag(end);
	  },
	  onclosetag(start, end) {
	    const name = getSlice(start, end);
	    if (!currentOptions.isVoidTag(name)) {
	      let found = false;
	      for (let i = 0; i < stack.length; i++) {
	        const e = stack[i];
	        if (e.tag.toLowerCase() === name.toLowerCase()) {
	          found = true;
	          if (i > 0) {
	            emitError(24, stack[0].loc.start.offset);
	          }
	          for (let j = 0; j <= i; j++) {
	            const el = stack.shift();
	            onCloseTag(el, end, j < i);
	          }
	          break;
	        }
	      }
	      if (!found) {
	        emitError(23, backTrack(start, 60));
	      }
	    }
	  },
	  onselfclosingtag(end) {
	    const name = currentOpenTag.tag;
	    currentOpenTag.isSelfClosing = true;
	    endOpenTag(end);
	    if (stack[0] && stack[0].tag === name) {
	      onCloseTag(stack.shift(), end);
	    }
	  },
	  onattribname(start, end) {
	    currentProp = {
	      type: 6,
	      name: getSlice(start, end),
	      nameLoc: getLoc(start, end),
	      value: void 0,
	      loc: getLoc(start)
	    };
	  },
	  ondirname(start, end) {
	    const raw = getSlice(start, end);
	    const name = raw === "." || raw === ":" ? "bind" : raw === "@" ? "on" : raw === "#" ? "slot" : raw.slice(2);
	    if (!inVPre && name === "") {
	      emitError(26, start);
	    }
	    if (inVPre || name === "") {
	      currentProp = {
	        type: 6,
	        name: raw,
	        nameLoc: getLoc(start, end),
	        value: void 0,
	        loc: getLoc(start)
	      };
	    } else {
	      currentProp = {
	        type: 7,
	        name,
	        rawName: raw,
	        exp: void 0,
	        arg: void 0,
	        modifiers: raw === "." ? ["prop"] : [],
	        loc: getLoc(start)
	      };
	      if (name === "pre") {
	        inVPre = tokenizer.inVPre = true;
	        currentVPreBoundary = currentOpenTag;
	        const props = currentOpenTag.props;
	        for (let i = 0; i < props.length; i++) {
	          if (props[i].type === 7) {
	            props[i] = dirToAttr(props[i]);
	          }
	        }
	      }
	    }
	  },
	  ondirarg(start, end) {
	    if (start === end) return;
	    const arg = getSlice(start, end);
	    if (inVPre) {
	      currentProp.name += arg;
	      setLocEnd(currentProp.nameLoc, end);
	    } else {
	      const isStatic = arg[0] !== `[`;
	      currentProp.arg = createExp(
	        isStatic ? arg : arg.slice(1, -1),
	        isStatic,
	        getLoc(start, end),
	        isStatic ? 3 : 0
	      );
	    }
	  },
	  ondirmodifier(start, end) {
	    const mod = getSlice(start, end);
	    if (inVPre) {
	      currentProp.name += "." + mod;
	      setLocEnd(currentProp.nameLoc, end);
	    } else if (currentProp.name === "slot") {
	      const arg = currentProp.arg;
	      if (arg) {
	        arg.content += "." + mod;
	        setLocEnd(arg.loc, end);
	      }
	    } else {
	      currentProp.modifiers.push(mod);
	    }
	  },
	  onattribdata(start, end) {
	    currentAttrValue += getSlice(start, end);
	    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;
	    currentAttrEndIndex = end;
	  },
	  onattribentity(char, start, end) {
	    currentAttrValue += char;
	    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;
	    currentAttrEndIndex = end;
	  },
	  onattribnameend(end) {
	    const start = currentProp.loc.start.offset;
	    const name = getSlice(start, end);
	    if (currentProp.type === 7) {
	      currentProp.rawName = name;
	    }
	    if (currentOpenTag.props.some(
	      (p) => (p.type === 7 ? p.rawName : p.name) === name
	    )) {
	      emitError(2, start);
	    }
	  },
	  onattribend(quote, end) {
	    if (currentOpenTag && currentProp) {
	      setLocEnd(currentProp.loc, end);
	      if (quote !== 0) {
	        if (currentProp.type === 6) {
	          if (currentProp.name === "class") {
	            currentAttrValue = condense(currentAttrValue).trim();
	          }
	          if (quote === 1 && !currentAttrValue) {
	            emitError(13, end);
	          }
	          currentProp.value = {
	            type: 2,
	            content: currentAttrValue,
	            loc: quote === 1 ? getLoc(currentAttrStartIndex, currentAttrEndIndex) : getLoc(currentAttrStartIndex - 1, currentAttrEndIndex + 1)
	          };
	          if (tokenizer.inSFCRoot && currentOpenTag.tag === "template" && currentProp.name === "lang" && currentAttrValue && currentAttrValue !== "html") {
	            tokenizer.enterRCDATA(toCharCodes(`</template`), 0);
	          }
	        } else {
	          let expParseMode = 0 ;
	          {
	            if (currentProp.name === "for") {
	              expParseMode = 3 ;
	            } else if (currentProp.name === "slot") {
	              expParseMode = 1 ;
	            } else if (currentProp.name === "on" && currentAttrValue.includes(";")) {
	              expParseMode = 2 ;
	            }
	          }
	          currentProp.exp = createExp(
	            currentAttrValue,
	            false,
	            getLoc(currentAttrStartIndex, currentAttrEndIndex),
	            0,
	            expParseMode
	          );
	          if (currentProp.name === "for") {
	            currentProp.forParseResult = parseForExpression(currentProp.exp);
	          }
	          let syncIndex = -1;
	          if (currentProp.name === "bind" && (syncIndex = currentProp.modifiers.indexOf("sync")) > -1 && checkCompatEnabled(
	            "COMPILER_V_BIND_SYNC",
	            currentOptions,
	            currentProp.loc,
	            currentProp.rawName
	          )) {
	            currentProp.name = "model";
	            currentProp.modifiers.splice(syncIndex, 1);
	          }
	        }
	      }
	      if (currentProp.type !== 7 || currentProp.name !== "pre") {
	        currentOpenTag.props.push(currentProp);
	      }
	    }
	    currentAttrValue = "";
	    currentAttrStartIndex = currentAttrEndIndex = -1;
	  },
	  oncomment(start, end) {
	    if (currentOptions.comments) {
	      addNode({
	        type: 3,
	        content: getSlice(start, end),
	        loc: getLoc(start - 4, end + 3)
	      });
	    }
	  },
	  onend() {
	    const end = currentInput.length;
	    if (tokenizer.state !== 1) {
	      switch (tokenizer.state) {
	        case 5:
	        case 8:
	          emitError(5, end);
	          break;
	        case 3:
	        case 4:
	          emitError(
	            25,
	            tokenizer.sectionStart
	          );
	          break;
	        case 28:
	          if (tokenizer.currentSequence === Sequences.CdataEnd) {
	            emitError(6, end);
	          } else {
	            emitError(7, end);
	          }
	          break;
	        case 6:
	        case 7:
	        case 9:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	          emitError(9, end);
	          break;
	      }
	    }
	    for (let index = 0; index < stack.length; index++) {
	      onCloseTag(stack[index], end - 1);
	      emitError(24, stack[index].loc.start.offset);
	    }
	  },
	  oncdata(start, end) {
	    if (stack[0].ns !== 0) {
	      onText(getSlice(start, end), start, end);
	    } else {
	      emitError(1, start - 9);
	    }
	  },
	  onprocessinginstruction(start) {
	    if ((stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
	      emitError(
	        21,
	        start - 1
	      );
	    }
	  }
	});
	const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
	const stripParensRE = /^\(|\)$/g;
	function parseForExpression(input) {
	  const loc = input.loc;
	  const exp = input.content;
	  const inMatch = exp.match(forAliasRE);
	  if (!inMatch) return;
	  const [, LHS, RHS] = inMatch;
	  const createAliasExpression = (content, offset, asParam = false) => {
	    const start = loc.start.offset + offset;
	    const end = start + content.length;
	    return createExp(
	      content,
	      false,
	      getLoc(start, end),
	      0,
	      asParam ? 1  : 0
	    );
	  };
	  const result = {
	    source: createAliasExpression(RHS.trim(), exp.indexOf(RHS, LHS.length)),
	    value: void 0,
	    key: void 0,
	    index: void 0,
	    finalized: false
	  };
	  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
	  const trimmedOffset = LHS.indexOf(valueContent);
	  const iteratorMatch = valueContent.match(forIteratorRE);
	  if (iteratorMatch) {
	    valueContent = valueContent.replace(forIteratorRE, "").trim();
	    const keyContent = iteratorMatch[1].trim();
	    let keyOffset;
	    if (keyContent) {
	      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
	      result.key = createAliasExpression(keyContent, keyOffset, true);
	    }
	    if (iteratorMatch[2]) {
	      const indexContent = iteratorMatch[2].trim();
	      if (indexContent) {
	        result.index = createAliasExpression(
	          indexContent,
	          exp.indexOf(
	            indexContent,
	            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
	          ),
	          true
	        );
	      }
	    }
	  }
	  if (valueContent) {
	    result.value = createAliasExpression(valueContent, trimmedOffset, true);
	  }
	  return result;
	}
	function getSlice(start, end) {
	  return currentInput.slice(start, end);
	}
	function endOpenTag(end) {
	  if (tokenizer.inSFCRoot) {
	    currentOpenTag.innerLoc = getLoc(end + 1, end + 1);
	  }
	  addNode(currentOpenTag);
	  const { tag, ns } = currentOpenTag;
	  if (ns === 0 && currentOptions.isPreTag(tag)) {
	    inPre++;
	  }
	  if (currentOptions.isVoidTag(tag)) {
	    onCloseTag(currentOpenTag, end);
	  } else {
	    stack.unshift(currentOpenTag);
	    if (ns === 1 || ns === 2) {
	      tokenizer.inXML = true;
	    }
	  }
	  currentOpenTag = null;
	}
	function onText(content, start, end) {
	  const parent = stack[0] || currentRoot;
	  const lastNode = parent.children[parent.children.length - 1];
	  if (lastNode && lastNode.type === 2) {
	    lastNode.content += content;
	    setLocEnd(lastNode.loc, end);
	  } else {
	    parent.children.push({
	      type: 2,
	      content,
	      loc: getLoc(start, end)
	    });
	  }
	}
	function onCloseTag(el, end, isImplied = false) {
	  if (isImplied) {
	    setLocEnd(el.loc, backTrack(end, 60));
	  } else {
	    setLocEnd(el.loc, lookAhead(end, 62) + 1);
	  }
	  if (tokenizer.inSFCRoot) {
	    if (el.children.length) {
	      el.innerLoc.end = shared.extend({}, el.children[el.children.length - 1].loc.end);
	    } else {
	      el.innerLoc.end = shared.extend({}, el.innerLoc.start);
	    }
	    el.innerLoc.source = getSlice(
	      el.innerLoc.start.offset,
	      el.innerLoc.end.offset
	    );
	  }
	  const { tag, ns } = el;
	  if (!inVPre) {
	    if (tag === "slot") {
	      el.tagType = 2;
	    } else if (isFragmentTemplate(el)) {
	      el.tagType = 3;
	    } else if (isComponent(el)) {
	      el.tagType = 1;
	    }
	  }
	  if (!tokenizer.inRCDATA) {
	    el.children = condenseWhitespace(el.children, el.tag);
	  }
	  if (ns === 0 && currentOptions.isPreTag(tag)) {
	    inPre--;
	  }
	  if (currentVPreBoundary === el) {
	    inVPre = tokenizer.inVPre = false;
	    currentVPreBoundary = null;
	  }
	  if (tokenizer.inXML && (stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
	    tokenizer.inXML = false;
	  }
	  {
	    const props = el.props;
	    if (isCompatEnabled(
	      "COMPILER_V_IF_V_FOR_PRECEDENCE",
	      currentOptions
	    )) {
	      let hasIf = false;
	      let hasFor = false;
	      for (let i = 0; i < props.length; i++) {
	        const p = props[i];
	        if (p.type === 7) {
	          if (p.name === "if") {
	            hasIf = true;
	          } else if (p.name === "for") {
	            hasFor = true;
	          }
	        }
	        if (hasIf && hasFor) {
	          warnDeprecation(
	            "COMPILER_V_IF_V_FOR_PRECEDENCE",
	            currentOptions,
	            el.loc
	          );
	          break;
	        }
	      }
	    }
	    if (!tokenizer.inSFCRoot && isCompatEnabled(
	      "COMPILER_NATIVE_TEMPLATE",
	      currentOptions
	    ) && el.tag === "template" && !isFragmentTemplate(el)) {
	      warnDeprecation(
	        "COMPILER_NATIVE_TEMPLATE",
	        currentOptions,
	        el.loc
	      );
	      const parent = stack[0] || currentRoot;
	      const index = parent.children.indexOf(el);
	      parent.children.splice(index, 1, ...el.children);
	    }
	    const inlineTemplateProp = props.find(
	      (p) => p.type === 6 && p.name === "inline-template"
	    );
	    if (inlineTemplateProp && checkCompatEnabled(
	      "COMPILER_INLINE_TEMPLATE",
	      currentOptions,
	      inlineTemplateProp.loc
	    ) && el.children.length) {
	      inlineTemplateProp.value = {
	        type: 2,
	        content: getSlice(
	          el.children[0].loc.start.offset,
	          el.children[el.children.length - 1].loc.end.offset
	        ),
	        loc: inlineTemplateProp.loc
	      };
	    }
	  }
	}
	function lookAhead(index, c) {
	  let i = index;
	  while (currentInput.charCodeAt(i) !== c && i < currentInput.length - 1) i++;
	  return i;
	}
	function backTrack(index, c) {
	  let i = index;
	  while (currentInput.charCodeAt(i) !== c && i >= 0) i--;
	  return i;
	}
	const specialTemplateDir =  new Set(["if", "else", "else-if", "for", "slot"]);
	function isFragmentTemplate({ tag, props }) {
	  if (tag === "template") {
	    for (let i = 0; i < props.length; i++) {
	      if (props[i].type === 7 && specialTemplateDir.has(props[i].name)) {
	        return true;
	      }
	    }
	  }
	  return false;
	}
	function isComponent({ tag, props }) {
	  if (currentOptions.isCustomElement(tag)) {
	    return false;
	  }
	  if (tag === "component" || isUpperCase(tag.charCodeAt(0)) || isCoreComponent(tag) || currentOptions.isBuiltInComponent && currentOptions.isBuiltInComponent(tag) || currentOptions.isNativeTag && !currentOptions.isNativeTag(tag)) {
	    return true;
	  }
	  for (let i = 0; i < props.length; i++) {
	    const p = props[i];
	    if (p.type === 6) {
	      if (p.name === "is" && p.value) {
	        if (p.value.content.startsWith("vue:")) {
	          return true;
	        } else if (checkCompatEnabled(
	          "COMPILER_IS_ON_ELEMENT",
	          currentOptions,
	          p.loc
	        )) {
	          return true;
	        }
	      }
	    } else if (
	    p.name === "bind" && isStaticArgOf(p.arg, "is") && checkCompatEnabled(
	      "COMPILER_IS_ON_ELEMENT",
	      currentOptions,
	      p.loc
	    )) {
	      return true;
	    }
	  }
	  return false;
	}
	function isUpperCase(c) {
	  return c > 64 && c < 91;
	}
	const windowsNewlineRE = /\r\n/g;
	function condenseWhitespace(nodes, tag) {
	  const shouldCondense = currentOptions.whitespace !== "preserve";
	  let removedWhitespace = false;
	  for (let i = 0; i < nodes.length; i++) {
	    const node = nodes[i];
	    if (node.type === 2) {
	      if (!inPre) {
	        if (isAllWhitespace(node.content)) {
	          const prev = nodes[i - 1] && nodes[i - 1].type;
	          const next = nodes[i + 1] && nodes[i + 1].type;
	          if (!prev || !next || shouldCondense && (prev === 3 && (next === 3 || next === 1) || prev === 1 && (next === 3 || next === 1 && hasNewlineChar(node.content)))) {
	            removedWhitespace = true;
	            nodes[i] = null;
	          } else {
	            node.content = " ";
	          }
	        } else if (shouldCondense) {
	          node.content = condense(node.content);
	        }
	      } else {
	        node.content = node.content.replace(windowsNewlineRE, "\n");
	      }
	    }
	  }
	  if (inPre && tag && currentOptions.isPreTag(tag)) {
	    const first = nodes[0];
	    if (first && first.type === 2) {
	      first.content = first.content.replace(/^\r?\n/, "");
	    }
	  }
	  return removedWhitespace ? nodes.filter(Boolean) : nodes;
	}
	function isAllWhitespace(str) {
	  for (let i = 0; i < str.length; i++) {
	    if (!isWhitespace(str.charCodeAt(i))) {
	      return false;
	    }
	  }
	  return true;
	}
	function hasNewlineChar(str) {
	  for (let i = 0; i < str.length; i++) {
	    const c = str.charCodeAt(i);
	    if (c === 10 || c === 13) {
	      return true;
	    }
	  }
	  return false;
	}
	function condense(str) {
	  let ret = "";
	  let prevCharIsWhitespace = false;
	  for (let i = 0; i < str.length; i++) {
	    if (isWhitespace(str.charCodeAt(i))) {
	      if (!prevCharIsWhitespace) {
	        ret += " ";
	        prevCharIsWhitespace = true;
	      }
	    } else {
	      ret += str[i];
	      prevCharIsWhitespace = false;
	    }
	  }
	  return ret;
	}
	function addNode(node) {
	  (stack[0] || currentRoot).children.push(node);
	}
	function getLoc(start, end) {
	  return {
	    start: tokenizer.getPos(start),
	    end: end == null ? end : tokenizer.getPos(end),
	    source: end == null ? end : getSlice(start, end)
	  };
	}
	function setLocEnd(loc, end) {
	  loc.end = tokenizer.getPos(end);
	  loc.source = getSlice(loc.start.offset, end);
	}
	function dirToAttr(dir) {
	  const attr = {
	    type: 6,
	    name: dir.rawName,
	    nameLoc: getLoc(
	      dir.loc.start.offset,
	      dir.loc.start.offset + dir.rawName.length
	    ),
	    value: void 0,
	    loc: dir.loc
	  };
	  if (dir.exp) {
	    const loc = dir.exp.loc;
	    if (loc.end.offset < dir.loc.end.offset) {
	      loc.start.offset--;
	      loc.start.column--;
	      loc.end.offset++;
	      loc.end.column++;
	    }
	    attr.value = {
	      type: 2,
	      content: dir.exp.content,
	      loc
	    };
	  }
	  return attr;
	}
	function createExp(content, isStatic = false, loc, constType = 0, parseMode = 0 ) {
	  const exp = createSimpleExpression(content, isStatic, loc, constType);
	  if (!isStatic && currentOptions.prefixIdentifiers && parseMode !== 3  && content.trim()) {
	    if (isSimpleIdentifier(content)) {
	      exp.ast = null;
	      return exp;
	    }
	    try {
	      const plugins = currentOptions.expressionPlugins;
	      const options = {
	        plugins: plugins ? [...plugins, "typescript"] : ["typescript"]
	      };
	      if (parseMode === 2 ) {
	        exp.ast = parser.parse(` ${content} `, options).program;
	      } else if (parseMode === 1 ) {
	        exp.ast = parser.parseExpression(`(${content})=>{}`, options);
	      } else {
	        exp.ast = parser.parseExpression(`(${content})`, options);
	      }
	    } catch (e) {
	      exp.ast = false;
	      emitError(45, loc.start.offset, e.message);
	    }
	  }
	  return exp;
	}
	function emitError(code, index, message) {
	  currentOptions.onError(
	    createCompilerError(code, getLoc(index, index), void 0, message)
	  );
	}
	function reset() {
	  tokenizer.reset();
	  currentOpenTag = null;
	  currentProp = null;
	  currentAttrValue = "";
	  currentAttrStartIndex = -1;
	  currentAttrEndIndex = -1;
	  stack.length = 0;
	}
	function baseParse(input, options) {
	  reset();
	  currentInput = input;
	  currentOptions = shared.extend({}, defaultParserOptions);
	  if (options) {
	    let key;
	    for (key in options) {
	      if (options[key] != null) {
	        currentOptions[key] = options[key];
	      }
	    }
	  }
	  {
	    if (currentOptions.decodeEntities) {
	      console.warn(
	        `[@vue/compiler-core] decodeEntities option is passed but will be ignored in non-browser builds.`
	      );
	    }
	  }
	  tokenizer.mode = currentOptions.parseMode === "html" ? 1 : currentOptions.parseMode === "sfc" ? 2 : 0;
	  tokenizer.inXML = currentOptions.ns === 1 || currentOptions.ns === 2;
	  const delimiters = options && options.delimiters;
	  if (delimiters) {
	    tokenizer.delimiterOpen = toCharCodes(delimiters[0]);
	    tokenizer.delimiterClose = toCharCodes(delimiters[1]);
	  }
	  const root = currentRoot = createRoot([], input);
	  tokenizer.parse(currentInput);
	  root.loc = getLoc(0, input.length);
	  root.children = condenseWhitespace(root.children);
	  currentRoot = null;
	  return root;
	}
	function hoistStatic(root, context) {
	  walk(
	    root,
	    context,
	    isSingleElementRoot(root, root.children[0])
	  );
	}
	function isSingleElementRoot(root, child) {
	  const { children } = root;
	  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
	}
	function walk(node, context, doNotHoistNode = false) {
	  const { children } = node;
	  const originalCount = children.length;
	  let hoistedCount = 0;
	  for (let i = 0; i < children.length; i++) {
	    const child = children[i];
	    if (child.type === 1 && child.tagType === 0) {
	      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
	      if (constantType > 0) {
	        if (constantType >= 2) {
	          child.codegenNode.patchFlag = -1;
	          child.codegenNode = context.hoist(child.codegenNode);
	          hoistedCount++;
	          continue;
	        }
	      } else {
	        const codegenNode = child.codegenNode;
	        if (codegenNode.type === 13) {
	          const flag = codegenNode.patchFlag;
	          if ((flag === void 0 || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
	            const props = getNodeProps(child);
	            if (props) {
	              codegenNode.props = context.hoist(props);
	            }
	          }
	          if (codegenNode.dynamicProps) {
	            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
	          }
	        }
	      }
	    }
	    if (child.type === 1) {
	      const isComponent = child.tagType === 1;
	      if (isComponent) {
	        context.scopes.vSlot++;
	      }
	      walk(child, context);
	      if (isComponent) {
	        context.scopes.vSlot--;
	      }
	    } else if (child.type === 11) {
	      walk(child, context, child.children.length === 1);
	    } else if (child.type === 9) {
	      for (let i2 = 0; i2 < child.branches.length; i2++) {
	        walk(
	          child.branches[i2],
	          context,
	          child.branches[i2].children.length === 1
	        );
	      }
	    }
	  }
	  if (hoistedCount && context.transformHoist) {
	    context.transformHoist(children, context, node);
	  }
	  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && shared.isArray(node.codegenNode.children)) {
	    const hoisted = context.hoist(
	      createArrayExpression(node.codegenNode.children)
	    );
	    if (context.hmr) {
	      hoisted.content = `[...${hoisted.content}]`;
	    }
	    node.codegenNode.children = hoisted;
	  }
	}
	function getConstantType(node, context) {
	  const { constantCache } = context;
	  switch (node.type) {
	    case 1:
	      if (node.tagType !== 0) {
	        return 0;
	      }
	      const cached = constantCache.get(node);
	      if (cached !== void 0) {
	        return cached;
	      }
	      const codegenNode = node.codegenNode;
	      if (codegenNode.type !== 13) {
	        return 0;
	      }
	      if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject" && node.tag !== "math") {
	        return 0;
	      }
	      if (codegenNode.patchFlag === void 0) {
	        let returnType2 = 3;
	        const generatedPropsType = getGeneratedPropsConstantType(node, context);
	        if (generatedPropsType === 0) {
	          constantCache.set(node, 0);
	          return 0;
	        }
	        if (generatedPropsType < returnType2) {
	          returnType2 = generatedPropsType;
	        }
	        for (let i = 0; i < node.children.length; i++) {
	          const childType = getConstantType(node.children[i], context);
	          if (childType === 0) {
	            constantCache.set(node, 0);
	            return 0;
	          }
	          if (childType < returnType2) {
	            returnType2 = childType;
	          }
	        }
	        if (returnType2 > 1) {
	          for (let i = 0; i < node.props.length; i++) {
	            const p = node.props[i];
	            if (p.type === 7 && p.name === "bind" && p.exp) {
	              const expType = getConstantType(p.exp, context);
	              if (expType === 0) {
	                constantCache.set(node, 0);
	                return 0;
	              }
	              if (expType < returnType2) {
	                returnType2 = expType;
	              }
	            }
	          }
	        }
	        if (codegenNode.isBlock) {
	          for (let i = 0; i < node.props.length; i++) {
	            const p = node.props[i];
	            if (p.type === 7) {
	              constantCache.set(node, 0);
	              return 0;
	            }
	          }
	          context.removeHelper(OPEN_BLOCK);
	          context.removeHelper(
	            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
	          );
	          codegenNode.isBlock = false;
	          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
	        }
	        constantCache.set(node, returnType2);
	        return returnType2;
	      } else {
	        constantCache.set(node, 0);
	        return 0;
	      }
	    case 2:
	    case 3:
	      return 3;
	    case 9:
	    case 11:
	    case 10:
	      return 0;
	    case 5:
	    case 12:
	      return getConstantType(node.content, context);
	    case 4:
	      return node.constType;
	    case 8:
	      let returnType = 3;
	      for (let i = 0; i < node.children.length; i++) {
	        const child = node.children[i];
	        if (shared.isString(child) || shared.isSymbol(child)) {
	          continue;
	        }
	        const childType = getConstantType(child, context);
	        if (childType === 0) {
	          return 0;
	        } else if (childType < returnType) {
	          returnType = childType;
	        }
	      }
	      return returnType;
	    default:
	      return 0;
	  }
	}
	const allowHoistedHelperSet =  new Set([
	  NORMALIZE_CLASS,
	  NORMALIZE_STYLE,
	  NORMALIZE_PROPS,
	  GUARD_REACTIVE_PROPS
	]);
	function getConstantTypeOfHelperCall(value, context) {
	  if (value.type === 14 && !shared.isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
	    const arg = value.arguments[0];
	    if (arg.type === 4) {
	      return getConstantType(arg, context);
	    } else if (arg.type === 14) {
	      return getConstantTypeOfHelperCall(arg, context);
	    }
	  }
	  return 0;
	}
	function getGeneratedPropsConstantType(node, context) {
	  let returnType = 3;
	  const props = getNodeProps(node);
	  if (props && props.type === 15) {
	    const { properties } = props;
	    for (let i = 0; i < properties.length; i++) {
	      const { key, value } = properties[i];
	      const keyType = getConstantType(key, context);
	      if (keyType === 0) {
	        return keyType;
	      }
	      if (keyType < returnType) {
	        returnType = keyType;
	      }
	      let valueType;
	      if (value.type === 4) {
	        valueType = getConstantType(value, context);
	      } else if (value.type === 14) {
	        valueType = getConstantTypeOfHelperCall(value, context);
	      } else {
	        valueType = 0;
	      }
	      if (valueType === 0) {
	        return valueType;
	      }
	      if (valueType < returnType) {
	        returnType = valueType;
	      }
	    }
	  }
	  return returnType;
	}
	function getNodeProps(node) {
	  const codegenNode = node.codegenNode;
	  if (codegenNode.type === 13) {
	    return codegenNode.props;
	  }
	}
	function createTransformContext(root, {
	  filename = "",
	  prefixIdentifiers = false,
	  hoistStatic: hoistStatic2 = false,
	  hmr = false,
	  cacheHandlers = false,
	  nodeTransforms = [],
	  directiveTransforms = {},
	  transformHoist = null,
	  isBuiltInComponent = shared.NOOP,
	  isCustomElement = shared.NOOP,
	  expressionPlugins = [],
	  scopeId = null,
	  slotted = true,
	  ssr = false,
	  inSSR = false,
	  ssrCssVars = ``,
	  bindingMetadata = shared.EMPTY_OBJ,
	  inline = false,
	  isTS = false,
	  onError = defaultOnError,
	  onWarn = defaultOnWarn,
	  compatConfig
	}) {
	  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
	  const context = {
	    filename,
	    selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),
	    prefixIdentifiers,
	    hoistStatic: hoistStatic2,
	    hmr,
	    cacheHandlers,
	    nodeTransforms,
	    directiveTransforms,
	    transformHoist,
	    isBuiltInComponent,
	    isCustomElement,
	    expressionPlugins,
	    scopeId,
	    slotted,
	    ssr,
	    inSSR,
	    ssrCssVars,
	    bindingMetadata,
	    inline,
	    isTS,
	    onError,
	    onWarn,
	    compatConfig,
	    root,
	    helpers:  new Map(),
	    components:  new Set(),
	    directives:  new Set(),
	    hoists: [],
	    imports: [],
	    constantCache:  new WeakMap(),
	    temps: 0,
	    cached: 0,
	    identifiers:  Object.create(null),
	    scopes: {
	      vFor: 0,
	      vSlot: 0,
	      vPre: 0,
	      vOnce: 0
	    },
	    parent: null,
	    grandParent: null,
	    currentNode: root,
	    childIndex: 0,
	    inVOnce: false,
	    helper(name) {
	      const count = context.helpers.get(name) || 0;
	      context.helpers.set(name, count + 1);
	      return name;
	    },
	    removeHelper(name) {
	      const count = context.helpers.get(name);
	      if (count) {
	        const currentCount = count - 1;
	        if (!currentCount) {
	          context.helpers.delete(name);
	        } else {
	          context.helpers.set(name, currentCount);
	        }
	      }
	    },
	    helperString(name) {
	      return `_${helperNameMap[context.helper(name)]}`;
	    },
	    replaceNode(node) {
	      {
	        if (!context.currentNode) {
	          throw new Error(`Node being replaced is already removed.`);
	        }
	        if (!context.parent) {
	          throw new Error(`Cannot replace root node.`);
	        }
	      }
	      context.parent.children[context.childIndex] = context.currentNode = node;
	    },
	    removeNode(node) {
	      if (!context.parent) {
	        throw new Error(`Cannot remove root node.`);
	      }
	      const list = context.parent.children;
	      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
	      if (removalIndex < 0) {
	        throw new Error(`node being removed is not a child of current parent`);
	      }
	      if (!node || node === context.currentNode) {
	        context.currentNode = null;
	        context.onNodeRemoved();
	      } else {
	        if (context.childIndex > removalIndex) {
	          context.childIndex--;
	          context.onNodeRemoved();
	        }
	      }
	      context.parent.children.splice(removalIndex, 1);
	    },
	    onNodeRemoved: shared.NOOP,
	    addIdentifiers(exp) {
	      {
	        if (shared.isString(exp)) {
	          addId(exp);
	        } else if (exp.identifiers) {
	          exp.identifiers.forEach(addId);
	        } else if (exp.type === 4) {
	          addId(exp.content);
	        }
	      }
	    },
	    removeIdentifiers(exp) {
	      {
	        if (shared.isString(exp)) {
	          removeId(exp);
	        } else if (exp.identifiers) {
	          exp.identifiers.forEach(removeId);
	        } else if (exp.type === 4) {
	          removeId(exp.content);
	        }
	      }
	    },
	    hoist(exp) {
	      if (shared.isString(exp)) exp = createSimpleExpression(exp);
	      context.hoists.push(exp);
	      const identifier = createSimpleExpression(
	        `_hoisted_${context.hoists.length}`,
	        false,
	        exp.loc,
	        2
	      );
	      identifier.hoisted = exp;
	      return identifier;
	    },
	    cache(exp, isVNode = false) {
	      return createCacheExpression(context.cached++, exp, isVNode);
	    }
	  };
	  {
	    context.filters =  new Set();
	  }
	  function addId(id) {
	    const { identifiers } = context;
	    if (identifiers[id] === void 0) {
	      identifiers[id] = 0;
	    }
	    identifiers[id]++;
	  }
	  function removeId(id) {
	    context.identifiers[id]--;
	  }
	  return context;
	}
	function transform(root, options) {
	  const context = createTransformContext(root, options);
	  traverseNode(root, context);
	  if (options.hoistStatic) {
	    hoistStatic(root, context);
	  }
	  if (!options.ssr) {
	    createRootCodegen(root, context);
	  }
	  root.helpers =  new Set([...context.helpers.keys()]);
	  root.components = [...context.components];
	  root.directives = [...context.directives];
	  root.imports = context.imports;
	  root.hoists = context.hoists;
	  root.temps = context.temps;
	  root.cached = context.cached;
	  root.transformed = true;
	  {
	    root.filters = [...context.filters];
	  }
	}
	function createRootCodegen(root, context) {
	  const { helper } = context;
	  const { children } = root;
	  if (children.length === 1) {
	    const child = children[0];
	    if (isSingleElementRoot(root, child) && child.codegenNode) {
	      const codegenNode = child.codegenNode;
	      if (codegenNode.type === 13) {
	        convertToBlock(codegenNode, context);
	      }
	      root.codegenNode = codegenNode;
	    } else {
	      root.codegenNode = child;
	    }
	  } else if (children.length > 1) {
	    let patchFlag = 64;
	    let patchFlagText = shared.PatchFlagNames[64];
	    if (children.filter((c) => c.type !== 3).length === 1) {
	      patchFlag |= 2048;
	      patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
	    }
	    root.codegenNode = createVNodeCall(
	      context,
	      helper(FRAGMENT),
	      void 0,
	      root.children,
	      patchFlag,
	      void 0,
	      void 0,
	      true,
	      void 0,
	      false
	    );
	  } else ;
	}
	function traverseChildren(parent, context) {
	  let i = 0;
	  const nodeRemoved = () => {
	    i--;
	  };
	  for (; i < parent.children.length; i++) {
	    const child = parent.children[i];
	    if (shared.isString(child)) continue;
	    context.grandParent = context.parent;
	    context.parent = parent;
	    context.childIndex = i;
	    context.onNodeRemoved = nodeRemoved;
	    traverseNode(child, context);
	  }
	}
	function traverseNode(node, context) {
	  context.currentNode = node;
	  const { nodeTransforms } = context;
	  const exitFns = [];
	  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
	    const onExit = nodeTransforms[i2](node, context);
	    if (onExit) {
	      if (shared.isArray(onExit)) {
	        exitFns.push(...onExit);
	      } else {
	        exitFns.push(onExit);
	      }
	    }
	    if (!context.currentNode) {
	      return;
	    } else {
	      node = context.currentNode;
	    }
	  }
	  switch (node.type) {
	    case 3:
	      if (!context.ssr) {
	        context.helper(CREATE_COMMENT);
	      }
	      break;
	    case 5:
	      if (!context.ssr) {
	        context.helper(TO_DISPLAY_STRING);
	      }
	      break;
	    case 9:
	      for (let i2 = 0; i2 < node.branches.length; i2++) {
	        traverseNode(node.branches[i2], context);
	      }
	      break;
	    case 10:
	    case 11:
	    case 1:
	    case 0:
	      traverseChildren(node, context);
	      break;
	  }
	  context.currentNode = node;
	  let i = exitFns.length;
	  while (i--) {
	    exitFns[i]();
	  }
	}
	function createStructuralDirectiveTransform(name, fn) {
	  const matches = shared.isString(name) ? (n) => n === name : (n) => name.test(n);
	  return (node, context) => {
	    if (node.type === 1) {
	      const { props } = node;
	      if (node.tagType === 3 && props.some(isVSlot)) {
	        return;
	      }
	      const exitFns = [];
	      for (let i = 0; i < props.length; i++) {
	        const prop = props[i];
	        if (prop.type === 7 && matches(prop.name)) {
	          props.splice(i, 1);
	          i--;
	          const onExit = fn(node, prop, context);
	          if (onExit) exitFns.push(onExit);
	        }
	      }
	      return exitFns;
	    }
	  };
	}
	const PURE_ANNOTATION = `/*#__PURE__*/`;
	const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
	function createCodegenContext(ast, {
	  mode = "function",
	  prefixIdentifiers = mode === "module",
	  sourceMap = false,
	  filename = `template.vue.html`,
	  scopeId = null,
	  optimizeImports = false,
	  runtimeGlobalName = `Vue`,
	  runtimeModuleName = `vue`,
	  ssrRuntimeModuleName = "vue/server-renderer",
	  ssr = false,
	  isTS = false,
	  inSSR = false
	}) {
	  const context = {
	    mode,
	    prefixIdentifiers,
	    sourceMap,
	    filename,
	    scopeId,
	    optimizeImports,
	    runtimeGlobalName,
	    runtimeModuleName,
	    ssrRuntimeModuleName,
	    ssr,
	    isTS,
	    inSSR,
	    source: ast.source,
	    code: ``,
	    column: 1,
	    line: 1,
	    offset: 0,
	    indentLevel: 0,
	    pure: false,
	    map: void 0,
	    helper(key) {
	      return `_${helperNameMap[key]}`;
	    },
	    push(code, newlineIndex = -2 , node) {
	      context.code += code;
	      if (context.map) {
	        if (node) {
	          let name;
	          if (node.type === 4 && !node.isStatic) {
	            const content = node.content.replace(/^_ctx\./, "");
	            if (content !== node.content && isSimpleIdentifier(content)) {
	              name = content;
	            }
	          }
	          addMapping(node.loc.start, name);
	        }
	        if (newlineIndex === -3 ) {
	          advancePositionWithMutation(context, code);
	        } else {
	          context.offset += code.length;
	          if (newlineIndex === -2 ) {
	            context.column += code.length;
	          } else {
	            if (newlineIndex === -1 ) {
	              newlineIndex = code.length - 1;
	            }
	            context.line++;
	            context.column = code.length - newlineIndex;
	          }
	        }
	        if (node && node.loc !== locStub) {
	          addMapping(node.loc.end);
	        }
	      }
	    },
	    indent() {
	      newline(++context.indentLevel);
	    },
	    deindent(withoutNewLine = false) {
	      if (withoutNewLine) {
	        --context.indentLevel;
	      } else {
	        newline(--context.indentLevel);
	      }
	    },
	    newline() {
	      newline(context.indentLevel);
	    }
	  };
	  function newline(n) {
	    context.push("\n" + `  `.repeat(n), 0 );
	  }
	  function addMapping(loc, name = null) {
	    const { _names, _mappings } = context.map;
	    if (name !== null && !_names.has(name)) _names.add(name);
	    _mappings.add({
	      originalLine: loc.line,
	      originalColumn: loc.column - 1,
	      generatedLine: context.line,
	      generatedColumn: context.column - 1,
	      source: filename,
	      name
	    });
	  }
	  if (sourceMap) {
	    context.map = new sourceMapJs.SourceMapGenerator();
	    context.map.setSourceContent(filename, context.source);
	    context.map._sources.add(filename);
	  }
	  return context;
	}
	function generate(ast, options = {}) {
	  const context = createCodegenContext(ast, options);
	  if (options.onContextCreated) options.onContextCreated(context);
	  const {
	    mode,
	    push,
	    prefixIdentifiers,
	    indent,
	    deindent,
	    newline,
	    scopeId,
	    ssr
	  } = context;
	  const helpers = Array.from(ast.helpers);
	  const hasHelpers = helpers.length > 0;
	  const useWithBlock = !prefixIdentifiers && mode !== "module";
	  const genScopeId = scopeId != null && mode === "module";
	  const isSetupInlined = !!options.inline;
	  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
	  if (mode === "module") {
	    genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);
	  } else {
	    genFunctionPreamble(ast, preambleContext);
	  }
	  const functionName = ssr ? `ssrRender` : `render`;
	  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
	  if (options.bindingMetadata && !options.inline) {
	    args.push("$props", "$setup", "$data", "$options");
	  }
	  const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(",") : args.join(", ");
	  if (isSetupInlined) {
	    push(`(${signature}) => {`);
	  } else {
	    push(`function ${functionName}(${signature}) {`);
	  }
	  indent();
	  if (useWithBlock) {
	    push(`with (_ctx) {`);
	    indent();
	    if (hasHelpers) {
	      push(
	        `const { ${helpers.map(aliasHelper).join(", ")} } = _Vue
`,
	        -1
	      );
	      newline();
	    }
	  }
	  if (ast.components.length) {
	    genAssets(ast.components, "component", context);
	    if (ast.directives.length || ast.temps > 0) {
	      newline();
	    }
	  }
	  if (ast.directives.length) {
	    genAssets(ast.directives, "directive", context);
	    if (ast.temps > 0) {
	      newline();
	    }
	  }
	  if (ast.filters && ast.filters.length) {
	    newline();
	    genAssets(ast.filters, "filter", context);
	    newline();
	  }
	  if (ast.temps > 0) {
	    push(`let `);
	    for (let i = 0; i < ast.temps; i++) {
	      push(`${i > 0 ? `, ` : ``}_temp${i}`);
	    }
	  }
	  if (ast.components.length || ast.directives.length || ast.temps) {
	    push(`
`, 0 );
	    newline();
	  }
	  if (!ssr) {
	    push(`return `);
	  }
	  if (ast.codegenNode) {
	    genNode(ast.codegenNode, context);
	  } else {
	    push(`null`);
	  }
	  if (useWithBlock) {
	    deindent();
	    push(`}`);
	  }
	  deindent();
	  push(`}`);
	  return {
	    ast,
	    code: context.code,
	    preamble: isSetupInlined ? preambleContext.code : ``,
	    map: context.map ? context.map.toJSON() : void 0
	  };
	}
	function genFunctionPreamble(ast, context) {
	  const {
	    ssr,
	    prefixIdentifiers,
	    push,
	    newline,
	    runtimeModuleName,
	    runtimeGlobalName,
	    ssrRuntimeModuleName
	  } = context;
	  const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
	  const helpers = Array.from(ast.helpers);
	  if (helpers.length > 0) {
	    if (prefixIdentifiers) {
	      push(
	        `const { ${helpers.map(aliasHelper).join(", ")} } = ${VueBinding}
`,
	        -1
	      );
	    } else {
	      push(`const _Vue = ${VueBinding}
`, -1 );
	      if (ast.hoists.length) {
	        const staticHelpers = [
	          CREATE_VNODE,
	          CREATE_ELEMENT_VNODE,
	          CREATE_COMMENT,
	          CREATE_TEXT,
	          CREATE_STATIC
	        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
	        push(`const { ${staticHelpers} } = _Vue
`, -1 );
	      }
	    }
	  }
	  if (ast.ssrHelpers && ast.ssrHelpers.length) {
	    push(
	      `const { ${ast.ssrHelpers.map(aliasHelper).join(", ")} } = require("${ssrRuntimeModuleName}")
`,
	      -1
	    );
	  }
	  genHoists(ast.hoists, context);
	  newline();
	  push(`return `);
	}
	function genModulePreamble(ast, context, genScopeId, inline) {
	  const {
	    push,
	    newline,
	    optimizeImports,
	    runtimeModuleName,
	    ssrRuntimeModuleName
	  } = context;
	  if (genScopeId && ast.hoists.length) {
	    ast.helpers.add(PUSH_SCOPE_ID);
	    ast.helpers.add(POP_SCOPE_ID);
	  }
	  if (ast.helpers.size) {
	    const helpers = Array.from(ast.helpers);
	    if (optimizeImports) {
	      push(
	        `import { ${helpers.map((s) => helperNameMap[s]).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`,
	        -1
	      );
	      push(
	        `
// Binding optimization for webpack code-split
const ${helpers.map((s) => `_${helperNameMap[s]} = ${helperNameMap[s]}`).join(", ")}
`,
	        -1
	      );
	    } else {
	      push(
	        `import { ${helpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`,
	        -1
	      );
	    }
	  }
	  if (ast.ssrHelpers && ast.ssrHelpers.length) {
	    push(
	      `import { ${ast.ssrHelpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(", ")} } from "${ssrRuntimeModuleName}"
`,
	      -1
	    );
	  }
	  if (ast.imports.length) {
	    genImports(ast.imports, context);
	    newline();
	  }
	  genHoists(ast.hoists, context);
	  newline();
	  if (!inline) {
	    push(`export `);
	  }
	}
	function genAssets(assets, type, { helper, push, newline, isTS }) {
	  const resolver = helper(
	    type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
	  );
	  for (let i = 0; i < assets.length; i++) {
	    let id = assets[i];
	    const maybeSelfReference = id.endsWith("__self");
	    if (maybeSelfReference) {
	      id = id.slice(0, -6);
	    }
	    push(
	      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
	    );
	    if (i < assets.length - 1) {
	      newline();
	    }
	  }
	}
	function genHoists(hoists, context) {
	  if (!hoists.length) {
	    return;
	  }
	  context.pure = true;
	  const { push, newline, helper, scopeId, mode } = context;
	  const genScopeId = scopeId != null && mode !== "function";
	  newline();
	  if (genScopeId) {
	    const param = context.isTS ? "(n: any)" : "n";
	    push(
	      `const _withScopeId = ${param} => (${helper(
	        PUSH_SCOPE_ID
	      )}("${scopeId}"),n=n(),${helper(POP_SCOPE_ID)}(),n)`
	    );
	    newline();
	  }
	  for (let i = 0; i < hoists.length; i++) {
	    const exp = hoists[i];
	    if (exp) {
	      const needScopeIdWrapper = genScopeId && exp.type === 13;
	      push(
	        `const _hoisted_${i + 1} = ${needScopeIdWrapper ? `${PURE_ANNOTATION} _withScopeId(() => ` : ``}`
	      );
	      genNode(exp, context);
	      if (needScopeIdWrapper) {
	        push(`)`);
	      }
	      newline();
	    }
	  }
	  context.pure = false;
	}
	function genImports(importsOptions, context) {
	  if (!importsOptions.length) {
	    return;
	  }
	  importsOptions.forEach((imports) => {
	    context.push(`import `);
	    genNode(imports.exp, context);
	    context.push(` from '${imports.path}'`);
	    context.newline();
	  });
	}
	function isText(n) {
	  return shared.isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
	}
	function genNodeListAsArray(nodes, context) {
	  const multilines = nodes.length > 3 || nodes.some((n) => shared.isArray(n) || !isText(n));
	  context.push(`[`);
	  multilines && context.indent();
	  genNodeList(nodes, context, multilines);
	  multilines && context.deindent();
	  context.push(`]`);
	}
	function genNodeList(nodes, context, multilines = false, comma = true) {
	  const { push, newline } = context;
	  for (let i = 0; i < nodes.length; i++) {
	    const node = nodes[i];
	    if (shared.isString(node)) {
	      push(node, -3 );
	    } else if (shared.isArray(node)) {
	      genNodeListAsArray(node, context);
	    } else {
	      genNode(node, context);
	    }
	    if (i < nodes.length - 1) {
	      if (multilines) {
	        comma && push(",");
	        newline();
	      } else {
	        comma && push(", ");
	      }
	    }
	  }
	}
	function genNode(node, context) {
	  if (shared.isString(node)) {
	    context.push(node, -3 );
	    return;
	  }
	  if (shared.isSymbol(node)) {
	    context.push(context.helper(node));
	    return;
	  }
	  switch (node.type) {
	    case 1:
	    case 9:
	    case 11:
	      assert(
	        node.codegenNode != null,
	        `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`
	      );
	      genNode(node.codegenNode, context);
	      break;
	    case 2:
	      genText(node, context);
	      break;
	    case 4:
	      genExpression(node, context);
	      break;
	    case 5:
	      genInterpolation(node, context);
	      break;
	    case 12:
	      genNode(node.codegenNode, context);
	      break;
	    case 8:
	      genCompoundExpression(node, context);
	      break;
	    case 3:
	      genComment(node, context);
	      break;
	    case 13:
	      genVNodeCall(node, context);
	      break;
	    case 14:
	      genCallExpression(node, context);
	      break;
	    case 15:
	      genObjectExpression(node, context);
	      break;
	    case 17:
	      genArrayExpression(node, context);
	      break;
	    case 18:
	      genFunctionExpression(node, context);
	      break;
	    case 19:
	      genConditionalExpression(node, context);
	      break;
	    case 20:
	      genCacheExpression(node, context);
	      break;
	    case 21:
	      genNodeList(node.body, context, true, false);
	      break;
	    case 22:
	      genTemplateLiteral(node, context);
	      break;
	    case 23:
	      genIfStatement(node, context);
	      break;
	    case 24:
	      genAssignmentExpression(node, context);
	      break;
	    case 25:
	      genSequenceExpression(node, context);
	      break;
	    case 26:
	      genReturnStatement(node, context);
	      break;
	    case 10:
	      break;
	    default:
	      {
	        assert(false, `unhandled codegen node type: ${node.type}`);
	        const exhaustiveCheck = node;
	        return exhaustiveCheck;
	      }
	  }
	}
	function genText(node, context) {
	  context.push(JSON.stringify(node.content), -3 , node);
	}
	function genExpression(node, context) {
	  const { content, isStatic } = node;
	  context.push(
	    isStatic ? JSON.stringify(content) : content,
	    -3 ,
	    node
	  );
	}
	function genInterpolation(node, context) {
	  const { push, helper, pure } = context;
	  if (pure) push(PURE_ANNOTATION);
	  push(`${helper(TO_DISPLAY_STRING)}(`);
	  genNode(node.content, context);
	  push(`)`);
	}
	function genCompoundExpression(node, context) {
	  for (let i = 0; i < node.children.length; i++) {
	    const child = node.children[i];
	    if (shared.isString(child)) {
	      context.push(child, -3 );
	    } else {
	      genNode(child, context);
	    }
	  }
	}
	function genExpressionAsPropertyKey(node, context) {
	  const { push } = context;
	  if (node.type === 8) {
	    push(`[`);
	    genCompoundExpression(node, context);
	    push(`]`);
	  } else if (node.isStatic) {
	    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
	    push(text, -2 , node);
	  } else {
	    push(`[${node.content}]`, -3 , node);
	  }
	}
	function genComment(node, context) {
	  const { push, helper, pure } = context;
	  if (pure) {
	    push(PURE_ANNOTATION);
	  }
	  push(
	    `${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`,
	    -3 ,
	    node
	  );
	}
	function genVNodeCall(node, context) {
	  const { push, helper, pure } = context;
	  const {
	    tag,
	    props,
	    children,
	    patchFlag,
	    dynamicProps,
	    directives,
	    isBlock,
	    disableTracking,
	    isComponent
	  } = node;
	  let patchFlagString;
	  if (patchFlag) {
	    {
	      if (patchFlag < 0) {
	        patchFlagString = patchFlag + ` /* ${shared.PatchFlagNames[patchFlag]} */`;
	      } else {
	        const flagNames = Object.keys(shared.PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => shared.PatchFlagNames[n]).join(`, `);
	        patchFlagString = patchFlag + ` /* ${flagNames} */`;
	      }
	    }
	  }
	  if (directives) {
	    push(helper(WITH_DIRECTIVES) + `(`);
	  }
	  if (isBlock) {
	    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
	  }
	  if (pure) {
	    push(PURE_ANNOTATION);
	  }
	  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent) : getVNodeHelper(context.inSSR, isComponent);
	  push(helper(callHelper) + `(`, -2 , node);
	  genNodeList(
	    genNullableArgs([tag, props, children, patchFlagString, dynamicProps]),
	    context
	  );
	  push(`)`);
	  if (isBlock) {
	    push(`)`);
	  }
	  if (directives) {
	    push(`, `);
	    genNode(directives, context);
	    push(`)`);
	  }
	}
	function genNullableArgs(args) {
	  let i = args.length;
	  while (i--) {
	    if (args[i] != null) break;
	  }
	  return args.slice(0, i + 1).map((arg) => arg || `null`);
	}
	function genCallExpression(node, context) {
	  const { push, helper, pure } = context;
	  const callee = shared.isString(node.callee) ? node.callee : helper(node.callee);
	  if (pure) {
	    push(PURE_ANNOTATION);
	  }
	  push(callee + `(`, -2 , node);
	  genNodeList(node.arguments, context);
	  push(`)`);
	}
	function genObjectExpression(node, context) {
	  const { push, indent, deindent, newline } = context;
	  const { properties } = node;
	  if (!properties.length) {
	    push(`{}`, -2 , node);
	    return;
	  }
	  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
	  push(multilines ? `{` : `{ `);
	  multilines && indent();
	  for (let i = 0; i < properties.length; i++) {
	    const { key, value } = properties[i];
	    genExpressionAsPropertyKey(key, context);
	    push(`: `);
	    genNode(value, context);
	    if (i < properties.length - 1) {
	      push(`,`);
	      newline();
	    }
	  }
	  multilines && deindent();
	  push(multilines ? `}` : ` }`);
	}
	function genArrayExpression(node, context) {
	  genNodeListAsArray(node.elements, context);
	}
	function genFunctionExpression(node, context) {
	  const { push, indent, deindent } = context;
	  const { params, returns, body, newline, isSlot } = node;
	  if (isSlot) {
	    push(`_${helperNameMap[WITH_CTX]}(`);
	  }
	  push(`(`, -2 , node);
	  if (shared.isArray(params)) {
	    genNodeList(params, context);
	  } else if (params) {
	    genNode(params, context);
	  }
	  push(`) => `);
	  if (newline || body) {
	    push(`{`);
	    indent();
	  }
	  if (returns) {
	    if (newline) {
	      push(`return `);
	    }
	    if (shared.isArray(returns)) {
	      genNodeListAsArray(returns, context);
	    } else {
	      genNode(returns, context);
	    }
	  } else if (body) {
	    genNode(body, context);
	  }
	  if (newline || body) {
	    deindent();
	    push(`}`);
	  }
	  if (isSlot) {
	    if (node.isNonScopedSlot) {
	      push(`, undefined, true`);
	    }
	    push(`)`);
	  }
	}
	function genConditionalExpression(node, context) {
	  const { test, consequent, alternate, newline: needNewline } = node;
	  const { push, indent, deindent, newline } = context;
	  if (test.type === 4) {
	    const needsParens = !isSimpleIdentifier(test.content);
	    needsParens && push(`(`);
	    genExpression(test, context);
	    needsParens && push(`)`);
	  } else {
	    push(`(`);
	    genNode(test, context);
	    push(`)`);
	  }
	  needNewline && indent();
	  context.indentLevel++;
	  needNewline || push(` `);
	  push(`? `);
	  genNode(consequent, context);
	  context.indentLevel--;
	  needNewline && newline();
	  needNewline || push(` `);
	  push(`: `);
	  const isNested = alternate.type === 19;
	  if (!isNested) {
	    context.indentLevel++;
	  }
	  genNode(alternate, context);
	  if (!isNested) {
	    context.indentLevel--;
	  }
	  needNewline && deindent(
	    true
	  );
	}
	function genCacheExpression(node, context) {
	  const { push, helper, indent, deindent, newline } = context;
	  push(`_cache[${node.index}] || (`);
	  if (node.isVOnce) {
	    indent();
	    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
	    newline();
	    push(`(`);
	  }
	  push(`_cache[${node.index}] = `);
	  genNode(node.value, context);
	  if (node.isVOnce) {
	    push(`).cacheIndex = ${node.index},`);
	    newline();
	    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
	    newline();
	    push(`_cache[${node.index}]`);
	    deindent();
	  }
	  push(`)`);
	}
	function genTemplateLiteral(node, context) {
	  const { push, indent, deindent } = context;
	  push("`");
	  const l = node.elements.length;
	  const multilines = l > 3;
	  for (let i = 0; i < l; i++) {
	    const e = node.elements[i];
	    if (shared.isString(e)) {
	      push(e.replace(/(`|\$|\\)/g, "\\$1"), -3 );
	    } else {
	      push("${");
	      if (multilines) indent();
	      genNode(e, context);
	      if (multilines) deindent();
	      push("}");
	    }
	  }
	  push("`");
	}
	function genIfStatement(node, context) {
	  const { push, indent, deindent } = context;
	  const { test, consequent, alternate } = node;
	  push(`if (`);
	  genNode(test, context);
	  push(`) {`);
	  indent();
	  genNode(consequent, context);
	  deindent();
	  push(`}`);
	  if (alternate) {
	    push(` else `);
	    if (alternate.type === 23) {
	      genIfStatement(alternate, context);
	    } else {
	      push(`{`);
	      indent();
	      genNode(alternate, context);
	      deindent();
	      push(`}`);
	    }
	  }
	}
	function genAssignmentExpression(node, context) {
	  genNode(node.left, context);
	  context.push(` = `);
	  genNode(node.right, context);
	}
	function genSequenceExpression(node, context) {
	  context.push(`(`);
	  genNodeList(node.expressions, context);
	  context.push(`)`);
	}
	function genReturnStatement({ returns }, context) {
	  context.push(`return `);
	  if (shared.isArray(returns)) {
	    genNodeListAsArray(returns, context);
	  } else {
	    genNode(returns, context);
	  }
	}
	const isLiteralWhitelisted =  shared.makeMap("true,false,null,this");
	const transformExpression = (node, context) => {
	  if (node.type === 5) {
	    node.content = processExpression(
	      node.content,
	      context
	    );
	  } else if (node.type === 1) {
	    for (let i = 0; i < node.props.length; i++) {
	      const dir = node.props[i];
	      if (dir.type === 7 && dir.name !== "for") {
	        const exp = dir.exp;
	        const arg = dir.arg;
	        if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
	          dir.exp = processExpression(
	            exp,
	            context,
	            dir.name === "slot"
	          );
	        }
	        if (arg && arg.type === 4 && !arg.isStatic) {
	          dir.arg = processExpression(arg, context);
	        }
	      }
	    }
	  }
	};
	function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
	  if (!context.prefixIdentifiers || !node.content.trim()) {
	    return node;
	  }
	  const { inline, bindingMetadata } = context;
	  const rewriteIdentifier = (raw, parent, id) => {
	    const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
	    if (inline) {
	      const isAssignmentLVal = parent && parent.type === "AssignmentExpression" && parent.left === id;
	      const isUpdateArg = parent && parent.type === "UpdateExpression" && parent.argument === id;
	      const isDestructureAssignment = parent && isInDestructureAssignment(parent, parentStack);
	      const isNewExpression = parent && isInNewExpression(parentStack);
	      const wrapWithUnref = (raw2) => {
	        const wrapped = `${context.helperString(UNREF)}(${raw2})`;
	        return isNewExpression ? `(${wrapped})` : wrapped;
	      };
	      if (isConst(type) || type === "setup-reactive-const" || localVars[raw]) {
	        return raw;
	      } else if (type === "setup-ref") {
	        return `${raw}.value`;
	      } else if (type === "setup-maybe-ref") {
	        return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : wrapWithUnref(raw);
	      } else if (type === "setup-let") {
	        if (isAssignmentLVal) {
	          const { right: rVal, operator } = parent;
	          const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
	          const rExpString = stringifyExpression(
	            processExpression(
	              createSimpleExpression(rExp, false),
	              context,
	              false,
	              false,
	              knownIds
	            )
	          );
	          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;
	        } else if (isUpdateArg) {
	          id.start = parent.start;
	          id.end = parent.end;
	          const { prefix: isPrefix, operator } = parent;
	          const prefix = isPrefix ? operator : ``;
	          const postfix = isPrefix ? `` : operator;
	          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${prefix}${raw}.value${postfix} : ${prefix}${raw}${postfix}`;
	        } else if (isDestructureAssignment) {
	          return raw;
	        } else {
	          return wrapWithUnref(raw);
	        }
	      } else if (type === "props") {
	        return shared.genPropsAccessExp(raw);
	      } else if (type === "props-aliased") {
	        return shared.genPropsAccessExp(bindingMetadata.__propsAliases[raw]);
	      }
	    } else {
	      if (type && type.startsWith("setup") || type === "literal-const") {
	        return `$setup.${raw}`;
	      } else if (type === "props-aliased") {
	        return `$props['${bindingMetadata.__propsAliases[raw]}']`;
	      } else if (type) {
	        return `$${type}.${raw}`;
	      }
	    }
	    return `_ctx.${raw}`;
	  };
	  const rawExp = node.content;
	  let ast = node.ast;
	  if (ast === false) {
	    return node;
	  }
	  if (ast === null || !ast && isSimpleIdentifier(rawExp)) {
	    const isScopeVarReference = context.identifiers[rawExp];
	    const isAllowedGlobal = shared.isGloballyAllowed(rawExp);
	    const isLiteral = isLiteralWhitelisted(rawExp);
	    if (!asParams && !isScopeVarReference && !isLiteral && (!isAllowedGlobal || bindingMetadata[rawExp])) {
	      if (isConst(bindingMetadata[rawExp])) {
	        node.constType = 1;
	      }
	      node.content = rewriteIdentifier(rawExp);
	    } else if (!isScopeVarReference) {
	      if (isLiteral) {
	        node.constType = 3;
	      } else {
	        node.constType = 2;
	      }
	    }
	    return node;
	  }
	  if (!ast) {
	    const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
	    try {
	      ast = parser.parseExpression(source, {
	        sourceType: "module",
	        plugins: context.expressionPlugins
	      });
	    } catch (e) {
	      context.onError(
	        createCompilerError(
	          45,
	          node.loc,
	          void 0,
	          e.message
	        )
	      );
	      return node;
	    }
	  }
	  const ids = [];
	  const parentStack = [];
	  const knownIds = Object.create(context.identifiers);
	  walkIdentifiers(
	    ast,
	    (node2, parent, _, isReferenced, isLocal) => {
	      if (isStaticPropertyKey(node2, parent)) {
	        return;
	      }
	      if (node2.name.startsWith("_filter_")) {
	        return;
	      }
	      const needPrefix = isReferenced && canPrefix(node2);
	      if (needPrefix && !isLocal) {
	        if (isStaticProperty(parent) && parent.shorthand) {
	          node2.prefix = `${node2.name}: `;
	        }
	        node2.name = rewriteIdentifier(node2.name, parent, node2);
	        ids.push(node2);
	      } else {
	        if (!(needPrefix && isLocal) && (!parent || parent.type !== "CallExpression" && parent.type !== "NewExpression" && parent.type !== "MemberExpression")) {
	          node2.isConstant = true;
	        }
	        ids.push(node2);
	      }
	    },
	    true,
	    parentStack,
	    knownIds
	  );
	  const children = [];
	  ids.sort((a, b) => a.start - b.start);
	  ids.forEach((id, i) => {
	    const start = id.start - 1;
	    const end = id.end - 1;
	    const last = ids[i - 1];
	    const leadingText = rawExp.slice(last ? last.end - 1 : 0, start);
	    if (leadingText.length || id.prefix) {
	      children.push(leadingText + (id.prefix || ``));
	    }
	    const source = rawExp.slice(start, end);
	    children.push(
	      createSimpleExpression(
	        id.name,
	        false,
	        {
	          start: advancePositionWithClone(node.loc.start, source, start),
	          end: advancePositionWithClone(node.loc.start, source, end),
	          source
	        },
	        id.isConstant ? 3 : 0
	      )
	    );
	    if (i === ids.length - 1 && end < rawExp.length) {
	      children.push(rawExp.slice(end));
	    }
	  });
	  let ret;
	  if (children.length) {
	    ret = createCompoundExpression(children, node.loc);
	    ret.ast = ast;
	  } else {
	    ret = node;
	    ret.constType = 3;
	  }
	  ret.identifiers = Object.keys(knownIds);
	  return ret;
	}
	function canPrefix(id) {
	  if (shared.isGloballyAllowed(id.name)) {
	    return false;
	  }
	  if (id.name === "require") {
	    return false;
	  }
	  return true;
	}
	function stringifyExpression(exp) {
	  if (shared.isString(exp)) {
	    return exp;
	  } else if (exp.type === 4) {
	    return exp.content;
	  } else {
	    return exp.children.map(stringifyExpression).join("");
	  }
	}
	function isConst(type) {
	  return type === "setup-const" || type === "literal-const";
	}
	const transformIf = createStructuralDirectiveTransform(
	  /^(if|else|else-if)$/,
	  (node, dir, context) => {
	    return processIf(node, dir, context, (ifNode, branch, isRoot) => {
	      const siblings = context.parent.children;
	      let i = siblings.indexOf(ifNode);
	      let key = 0;
	      while (i-- >= 0) {
	        const sibling = siblings[i];
	        if (sibling && sibling.type === 9) {
	          key += sibling.branches.length;
	        }
	      }
	      return () => {
	        if (isRoot) {
	          ifNode.codegenNode = createCodegenNodeForBranch(
	            branch,
	            key,
	            context
	          );
	        } else {
	          const parentCondition = getParentCondition(ifNode.codegenNode);
	          parentCondition.alternate = createCodegenNodeForBranch(
	            branch,
	            key + ifNode.branches.length - 1,
	            context
	          );
	        }
	      };
	    });
	  }
	);
	function processIf(node, dir, context, processCodegen) {
	  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
	    const loc = dir.exp ? dir.exp.loc : node.loc;
	    context.onError(
	      createCompilerError(28, dir.loc)
	    );
	    dir.exp = createSimpleExpression(`true`, false, loc);
	  }
	  if (context.prefixIdentifiers && dir.exp) {
	    dir.exp = processExpression(dir.exp, context);
	  }
	  if (dir.name === "if") {
	    const branch = createIfBranch(node, dir);
	    const ifNode = {
	      type: 9,
	      loc: node.loc,
	      branches: [branch]
	    };
	    context.replaceNode(ifNode);
	    if (processCodegen) {
	      return processCodegen(ifNode, branch, true);
	    }
	  } else {
	    const siblings = context.parent.children;
	    const comments = [];
	    let i = siblings.indexOf(node);
	    while (i-- >= -1) {
	      const sibling = siblings[i];
	      if (sibling && sibling.type === 3) {
	        context.removeNode(sibling);
	        comments.unshift(sibling);
	        continue;
	      }
	      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
	        context.removeNode(sibling);
	        continue;
	      }
	      if (sibling && sibling.type === 9) {
	        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
	          context.onError(
	            createCompilerError(30, node.loc)
	          );
	        }
	        context.removeNode();
	        const branch = createIfBranch(node, dir);
	        if (comments.length &&
	        !(context.parent && context.parent.type === 1 && (context.parent.tag === "transition" || context.parent.tag === "Transition"))) {
	          branch.children = [...comments, ...branch.children];
	        }
	        {
	          const key = branch.userKey;
	          if (key) {
	            sibling.branches.forEach(({ userKey }) => {
	              if (isSameKey(userKey, key)) {
	                context.onError(
	                  createCompilerError(
	                    29,
	                    branch.userKey.loc
	                  )
	                );
	              }
	            });
	          }
	        }
	        sibling.branches.push(branch);
	        const onExit = processCodegen && processCodegen(sibling, branch, false);
	        traverseNode(branch, context);
	        if (onExit) onExit();
	        context.currentNode = null;
	      } else {
	        context.onError(
	          createCompilerError(30, node.loc)
	        );
	      }
	      break;
	    }
	  }
	}
	function createIfBranch(node, dir) {
	  const isTemplateIf = node.tagType === 3;
	  return {
	    type: 10,
	    loc: node.loc,
	    condition: dir.name === "else" ? void 0 : dir.exp,
	    children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
	    userKey: findProp(node, `key`),
	    isTemplateIf
	  };
	}
	function createCodegenNodeForBranch(branch, keyIndex, context) {
	  if (branch.condition) {
	    return createConditionalExpression(
	      branch.condition,
	      createChildrenCodegenNode(branch, keyIndex, context),
	      createCallExpression(context.helper(CREATE_COMMENT), [
	        '"v-if"' ,
	        "true"
	      ])
	    );
	  } else {
	    return createChildrenCodegenNode(branch, keyIndex, context);
	  }
	}
	function createChildrenCodegenNode(branch, keyIndex, context) {
	  const { helper } = context;
	  const keyProperty = createObjectProperty(
	    `key`,
	    createSimpleExpression(
	      `${keyIndex}`,
	      false,
	      locStub,
	      2
	    )
	  );
	  const { children } = branch;
	  const firstChild = children[0];
	  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
	  if (needFragmentWrapper) {
	    if (children.length === 1 && firstChild.type === 11) {
	      const vnodeCall = firstChild.codegenNode;
	      injectProp(vnodeCall, keyProperty, context);
	      return vnodeCall;
	    } else {
	      let patchFlag = 64;
	      let patchFlagText = shared.PatchFlagNames[64];
	      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
	        patchFlag |= 2048;
	        patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
	      }
	      return createVNodeCall(
	        context,
	        helper(FRAGMENT),
	        createObjectExpression([keyProperty]),
	        children,
	        patchFlag,
	        void 0,
	        void 0,
	        true,
	        false,
	        false,
	        branch.loc
	      );
	    }
	  } else {
	    const ret = firstChild.codegenNode;
	    const vnodeCall = getMemoedVNodeCall(ret);
	    if (vnodeCall.type === 13) {
	      convertToBlock(vnodeCall, context);
	    }
	    injectProp(vnodeCall, keyProperty, context);
	    return ret;
	  }
	}
	function isSameKey(a, b) {
	  if (!a || a.type !== b.type) {
	    return false;
	  }
	  if (a.type === 6) {
	    if (a.value.content !== b.value.content) {
	      return false;
	    }
	  } else {
	    const exp = a.exp;
	    const branchExp = b.exp;
	    if (exp.type !== branchExp.type) {
	      return false;
	    }
	    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
	      return false;
	    }
	  }
	  return true;
	}
	function getParentCondition(node) {
	  while (true) {
	    if (node.type === 19) {
	      if (node.alternate.type === 19) {
	        node = node.alternate;
	      } else {
	        return node;
	      }
	    } else if (node.type === 20) {
	      node = node.value;
	    }
	  }
	}
	const transformBind = (dir, _node, context) => {
	  const { modifiers, loc } = dir;
	  const arg = dir.arg;
	  let { exp } = dir;
	  if (exp && exp.type === 4 && !exp.content.trim()) {
	    {
	      context.onError(
	        createCompilerError(34, loc)
	      );
	      return {
	        props: [
	          createObjectProperty(arg, createSimpleExpression("", true, loc))
	        ]
	      };
	    }
	  }
	  if (!exp) {
	    if (arg.type !== 4 || !arg.isStatic) {
	      context.onError(
	        createCompilerError(
	          52,
	          arg.loc
	        )
	      );
	      return {
	        props: [
	          createObjectProperty(arg, createSimpleExpression("", true, loc))
	        ]
	      };
	    }
	    transformBindShorthand(dir, context);
	    exp = dir.exp;
	  }
	  if (arg.type !== 4) {
	    arg.children.unshift(`(`);
	    arg.children.push(`) || ""`);
	  } else if (!arg.isStatic) {
	    arg.content = `${arg.content} || ""`;
	  }
	  if (modifiers.includes("camel")) {
	    if (arg.type === 4) {
	      if (arg.isStatic) {
	        arg.content = shared.camelize(arg.content);
	      } else {
	        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
	      }
	    } else {
	      arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
	      arg.children.push(`)`);
	    }
	  }
	  if (!context.inSSR) {
	    if (modifiers.includes("prop")) {
	      injectPrefix(arg, ".");
	    }
	    if (modifiers.includes("attr")) {
	      injectPrefix(arg, "^");
	    }
	  }
	  return {
	    props: [createObjectProperty(arg, exp)]
	  };
	};
	const transformBindShorthand = (dir, context) => {
	  const arg = dir.arg;
	  const propName = shared.camelize(arg.content);
	  dir.exp = createSimpleExpression(propName, false, arg.loc);
	  {
	    dir.exp = processExpression(dir.exp, context);
	  }
	};
	const injectPrefix = (arg, prefix) => {
	  if (arg.type === 4) {
	    if (arg.isStatic) {
	      arg.content = prefix + arg.content;
	    } else {
	      arg.content = `\`${prefix}\${${arg.content}}\``;
	    }
	  } else {
	    arg.children.unshift(`'${prefix}' + (`);
	    arg.children.push(`)`);
	  }
	};
	const transformFor = createStructuralDirectiveTransform(
	  "for",
	  (node, dir, context) => {
	    const { helper, removeHelper } = context;
	    return processFor(node, dir, context, (forNode) => {
	      const renderExp = createCallExpression(helper(RENDER_LIST), [
	        forNode.source
	      ]);
	      const isTemplate = isTemplateNode(node);
	      const memo = findDir(node, "memo");
	      const keyProp = findProp(node, `key`, false, true);
	      if (keyProp && keyProp.type === 7 && !keyProp.exp) {
	        transformBindShorthand(keyProp, context);
	      }
	      const keyExp = keyProp && (keyProp.type === 6 ? keyProp.value ? createSimpleExpression(keyProp.value.content, true) : void 0 : keyProp.exp);
	      const keyProperty = keyProp && keyExp ? createObjectProperty(`key`, keyExp) : null;
	      if (isTemplate) {
	        if (memo) {
	          memo.exp = processExpression(
	            memo.exp,
	            context
	          );
	        }
	        if (keyProperty && keyProp.type !== 6) {
	          keyProperty.value = processExpression(
	            keyProperty.value,
	            context
	          );
	        }
	      }
	      const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
	      const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
	      forNode.codegenNode = createVNodeCall(
	        context,
	        helper(FRAGMENT),
	        void 0,
	        renderExp,
	        fragmentFlag,
	        void 0,
	        void 0,
	        true,
	        !isStableFragment,
	        false,
	        node.loc
	      );
	      return () => {
	        let childBlock;
	        const { children } = forNode;
	        if (isTemplate) {
	          node.children.some((c) => {
	            if (c.type === 1) {
	              const key = findProp(c, "key");
	              if (key) {
	                context.onError(
	                  createCompilerError(
	                    33,
	                    key.loc
	                  )
	                );
	                return true;
	              }
	            }
	          });
	        }
	        const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
	        const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
	        if (slotOutlet) {
	          childBlock = slotOutlet.codegenNode;
	          if (isTemplate && keyProperty) {
	            injectProp(childBlock, keyProperty, context);
	          }
	        } else if (needFragmentWrapper) {
	          childBlock = createVNodeCall(
	            context,
	            helper(FRAGMENT),
	            keyProperty ? createObjectExpression([keyProperty]) : void 0,
	            node.children,
	            64,
	            void 0,
	            void 0,
	            true,
	            void 0,
	            false
	          );
	        } else {
	          childBlock = children[0].codegenNode;
	          if (isTemplate && keyProperty) {
	            injectProp(childBlock, keyProperty, context);
	          }
	          if (childBlock.isBlock !== !isStableFragment) {
	            if (childBlock.isBlock) {
	              removeHelper(OPEN_BLOCK);
	              removeHelper(
	                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
	              );
	            } else {
	              removeHelper(
	                getVNodeHelper(context.inSSR, childBlock.isComponent)
	              );
	            }
	          }
	          childBlock.isBlock = !isStableFragment;
	          if (childBlock.isBlock) {
	            helper(OPEN_BLOCK);
	            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
	          } else {
	            helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
	          }
	        }
	        if (memo) {
	          const loop = createFunctionExpression(
	            createForLoopParams(forNode.parseResult, [
	              createSimpleExpression(`_cached`)
	            ])
	          );
	          loop.body = createBlockStatement([
	            createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
	            createCompoundExpression([
	              `if (_cached`,
	              ...keyExp ? [` && _cached.key === `, keyExp] : [],
	              ` && ${context.helperString(
	                IS_MEMO_SAME
	              )}(_cached, _memo)) return _cached`
	            ]),
	            createCompoundExpression([`const _item = `, childBlock]),
	            createSimpleExpression(`_item.memo = _memo`),
	            createSimpleExpression(`return _item`)
	          ]);
	          renderExp.arguments.push(
	            loop,
	            createSimpleExpression(`_cache`),
	            createSimpleExpression(String(context.cached++))
	          );
	        } else {
	          renderExp.arguments.push(
	            createFunctionExpression(
	              createForLoopParams(forNode.parseResult),
	              childBlock,
	              true
	            )
	          );
	        }
	      };
	    });
	  }
	);
	function processFor(node, dir, context, processCodegen) {
	  if (!dir.exp) {
	    context.onError(
	      createCompilerError(31, dir.loc)
	    );
	    return;
	  }
	  const parseResult = dir.forParseResult;
	  if (!parseResult) {
	    context.onError(
	      createCompilerError(32, dir.loc)
	    );
	    return;
	  }
	  finalizeForParseResult(parseResult, context);
	  const { addIdentifiers, removeIdentifiers, scopes } = context;
	  const { source, value, key, index } = parseResult;
	  const forNode = {
	    type: 11,
	    loc: dir.loc,
	    source,
	    valueAlias: value,
	    keyAlias: key,
	    objectIndexAlias: index,
	    parseResult,
	    children: isTemplateNode(node) ? node.children : [node]
	  };
	  context.replaceNode(forNode);
	  scopes.vFor++;
	  if (context.prefixIdentifiers) {
	    value && addIdentifiers(value);
	    key && addIdentifiers(key);
	    index && addIdentifiers(index);
	  }
	  const onExit = processCodegen && processCodegen(forNode);
	  return () => {
	    scopes.vFor--;
	    if (context.prefixIdentifiers) {
	      value && removeIdentifiers(value);
	      key && removeIdentifiers(key);
	      index && removeIdentifiers(index);
	    }
	    if (onExit) onExit();
	  };
	}
	function finalizeForParseResult(result, context) {
	  if (result.finalized) return;
	  if (context.prefixIdentifiers) {
	    result.source = processExpression(
	      result.source,
	      context
	    );
	    if (result.key) {
	      result.key = processExpression(
	        result.key,
	        context,
	        true
	      );
	    }
	    if (result.index) {
	      result.index = processExpression(
	        result.index,
	        context,
	        true
	      );
	    }
	    if (result.value) {
	      result.value = processExpression(
	        result.value,
	        context,
	        true
	      );
	    }
	  }
	  result.finalized = true;
	}
	function createForLoopParams({ value, key, index }, memoArgs = []) {
	  return createParamsList([value, key, index, ...memoArgs]);
	}
	function createParamsList(args) {
	  let i = args.length;
	  while (i--) {
	    if (args[i]) break;
	  }
	  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
	}
	const defaultFallback = createSimpleExpression(`undefined`, false);
	const trackSlotScopes = (node, context) => {
	  if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
	    const vSlot = findDir(node, "slot");
	    if (vSlot) {
	      const slotProps = vSlot.exp;
	      if (context.prefixIdentifiers) {
	        slotProps && context.addIdentifiers(slotProps);
	      }
	      context.scopes.vSlot++;
	      return () => {
	        if (context.prefixIdentifiers) {
	          slotProps && context.removeIdentifiers(slotProps);
	        }
	        context.scopes.vSlot--;
	      };
	    }
	  }
	};
	const trackVForSlotScopes = (node, context) => {
	  let vFor;
	  if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
	    const result = vFor.forParseResult;
	    if (result) {
	      finalizeForParseResult(result, context);
	      const { value, key, index } = result;
	      const { addIdentifiers, removeIdentifiers } = context;
	      value && addIdentifiers(value);
	      key && addIdentifiers(key);
	      index && addIdentifiers(index);
	      return () => {
	        value && removeIdentifiers(value);
	        key && removeIdentifiers(key);
	        index && removeIdentifiers(index);
	      };
	    }
	  }
	};
	const buildClientSlotFn = (props, _vForExp, children, loc) => createFunctionExpression(
	  props,
	  children,
	  false,
	  true,
	  children.length ? children[0].loc : loc
	);
	function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
	  context.helper(WITH_CTX);
	  const { children, loc } = node;
	  const slotsProperties = [];
	  const dynamicSlots = [];
	  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
	  if (!context.ssr && context.prefixIdentifiers) {
	    hasDynamicSlots = hasScopeRef(node, context.identifiers);
	  }
	  const onComponentSlot = findDir(node, "slot", true);
	  if (onComponentSlot) {
	    const { arg, exp } = onComponentSlot;
	    if (arg && !isStaticExp(arg)) {
	      hasDynamicSlots = true;
	    }
	    slotsProperties.push(
	      createObjectProperty(
	        arg || createSimpleExpression("default", true),
	        buildSlotFn(exp, void 0, children, loc)
	      )
	    );
	  }
	  let hasTemplateSlots = false;
	  let hasNamedDefaultSlot = false;
	  const implicitDefaultChildren = [];
	  const seenSlotNames =  new Set();
	  let conditionalBranchIndex = 0;
	  for (let i = 0; i < children.length; i++) {
	    const slotElement = children[i];
	    let slotDir;
	    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
	      if (slotElement.type !== 3) {
	        implicitDefaultChildren.push(slotElement);
	      }
	      continue;
	    }
	    if (onComponentSlot) {
	      context.onError(
	        createCompilerError(37, slotDir.loc)
	      );
	      break;
	    }
	    hasTemplateSlots = true;
	    const { children: slotChildren, loc: slotLoc } = slotElement;
	    const {
	      arg: slotName = createSimpleExpression(`default`, true),
	      exp: slotProps,
	      loc: dirLoc
	    } = slotDir;
	    let staticSlotName;
	    if (isStaticExp(slotName)) {
	      staticSlotName = slotName ? slotName.content : `default`;
	    } else {
	      hasDynamicSlots = true;
	    }
	    const vFor = findDir(slotElement, "for");
	    const slotFunction = buildSlotFn(slotProps, vFor, slotChildren, slotLoc);
	    let vIf;
	    let vElse;
	    if (vIf = findDir(slotElement, "if")) {
	      hasDynamicSlots = true;
	      dynamicSlots.push(
	        createConditionalExpression(
	          vIf.exp,
	          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
	          defaultFallback
	        )
	      );
	    } else if (vElse = findDir(
	      slotElement,
	      /^else(-if)?$/,
	      true
	    )) {
	      let j = i;
	      let prev;
	      while (j--) {
	        prev = children[j];
	        if (prev.type !== 3) {
	          break;
	        }
	      }
	      if (prev && isTemplateNode(prev) && findDir(prev, /^(else-)?if$/)) {
	        let conditional = dynamicSlots[dynamicSlots.length - 1];
	        while (conditional.alternate.type === 19) {
	          conditional = conditional.alternate;
	        }
	        conditional.alternate = vElse.exp ? createConditionalExpression(
	          vElse.exp,
	          buildDynamicSlot(
	            slotName,
	            slotFunction,
	            conditionalBranchIndex++
	          ),
	          defaultFallback
	        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
	      } else {
	        context.onError(
	          createCompilerError(30, vElse.loc)
	        );
	      }
	    } else if (vFor) {
	      hasDynamicSlots = true;
	      const parseResult = vFor.forParseResult;
	      if (parseResult) {
	        finalizeForParseResult(parseResult, context);
	        dynamicSlots.push(
	          createCallExpression(context.helper(RENDER_LIST), [
	            parseResult.source,
	            createFunctionExpression(
	              createForLoopParams(parseResult),
	              buildDynamicSlot(slotName, slotFunction),
	              true
	            )
	          ])
	        );
	      } else {
	        context.onError(
	          createCompilerError(
	            32,
	            vFor.loc
	          )
	        );
	      }
	    } else {
	      if (staticSlotName) {
	        if (seenSlotNames.has(staticSlotName)) {
	          context.onError(
	            createCompilerError(
	              38,
	              dirLoc
	            )
	          );
	          continue;
	        }
	        seenSlotNames.add(staticSlotName);
	        if (staticSlotName === "default") {
	          hasNamedDefaultSlot = true;
	        }
	      }
	      slotsProperties.push(createObjectProperty(slotName, slotFunction));
	    }
	  }
	  if (!onComponentSlot) {
	    const buildDefaultSlotProperty = (props, children2) => {
	      const fn = buildSlotFn(props, void 0, children2, loc);
	      if (context.compatConfig) {
	        fn.isNonScopedSlot = true;
	      }
	      return createObjectProperty(`default`, fn);
	    };
	    if (!hasTemplateSlots) {
	      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
	    } else if (implicitDefaultChildren.length &&
	    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
	      if (hasNamedDefaultSlot) {
	        context.onError(
	          createCompilerError(
	            39,
	            implicitDefaultChildren[0].loc
	          )
	        );
	      } else {
	        slotsProperties.push(
	          buildDefaultSlotProperty(void 0, implicitDefaultChildren)
	        );
	      }
	    }
	  }
	  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
	  let slots = createObjectExpression(
	    slotsProperties.concat(
	      createObjectProperty(
	        `_`,
	        createSimpleExpression(
	          slotFlag + (` /* ${shared.slotFlagsText[slotFlag]} */` ),
	          false
	        )
	      )
	    ),
	    loc
	  );
	  if (dynamicSlots.length) {
	    slots = createCallExpression(context.helper(CREATE_SLOTS), [
	      slots,
	      createArrayExpression(dynamicSlots)
	    ]);
	  }
	  return {
	    slots,
	    hasDynamicSlots
	  };
	}
	function buildDynamicSlot(name, fn, index) {
	  const props = [
	    createObjectProperty(`name`, name),
	    createObjectProperty(`fn`, fn)
	  ];
	  if (index != null) {
	    props.push(
	      createObjectProperty(`key`, createSimpleExpression(String(index), true))
	    );
	  }
	  return createObjectExpression(props);
	}
	function hasForwardedSlots(children) {
	  for (let i = 0; i < children.length; i++) {
	    const child = children[i];
	    switch (child.type) {
	      case 1:
	        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
	          return true;
	        }
	        break;
	      case 9:
	        if (hasForwardedSlots(child.branches)) return true;
	        break;
	      case 10:
	      case 11:
	        if (hasForwardedSlots(child.children)) return true;
	        break;
	    }
	  }
	  return false;
	}
	function isNonWhitespaceContent(node) {
	  if (node.type !== 2 && node.type !== 12)
	    return true;
	  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
	}
	const directiveImportMap =  new WeakMap();
	const transformElement = (node, context) => {
	  return function postTransformElement() {
	    node = context.currentNode;
	    if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
	      return;
	    }
	    const { tag, props } = node;
	    const isComponent = node.tagType === 1;
	    let vnodeTag = isComponent ? resolveComponentType(node, context) : `"${tag}"`;
	    const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
	    let vnodeProps;
	    let vnodeChildren;
	    let patchFlag = 0;
	    let vnodeDynamicProps;
	    let dynamicPropNames;
	    let vnodeDirectives;
	    let shouldUseBlock = (
	      isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent &&
	      (tag === "svg" || tag === "foreignObject" || tag === "math")
	    );
	    if (props.length > 0) {
	      const propsBuildResult = buildProps(
	        node,
	        context,
	        void 0,
	        isComponent,
	        isDynamicComponent
	      );
	      vnodeProps = propsBuildResult.props;
	      patchFlag = propsBuildResult.patchFlag;
	      dynamicPropNames = propsBuildResult.dynamicPropNames;
	      const directives = propsBuildResult.directives;
	      vnodeDirectives = directives && directives.length ? createArrayExpression(
	        directives.map((dir) => buildDirectiveArgs(dir, context))
	      ) : void 0;
	      if (propsBuildResult.shouldUseBlock) {
	        shouldUseBlock = true;
	      }
	    }
	    if (node.children.length > 0) {
	      if (vnodeTag === KEEP_ALIVE) {
	        shouldUseBlock = true;
	        patchFlag |= 1024;
	        if (node.children.length > 1) {
	          context.onError(
	            createCompilerError(46, {
	              start: node.children[0].loc.start,
	              end: node.children[node.children.length - 1].loc.end,
	              source: ""
	            })
	          );
	        }
	      }
	      const shouldBuildAsSlots = isComponent &&
	      vnodeTag !== TELEPORT &&
	      vnodeTag !== KEEP_ALIVE;
	      if (shouldBuildAsSlots) {
	        const { slots, hasDynamicSlots } = buildSlots(node, context);
	        vnodeChildren = slots;
	        if (hasDynamicSlots) {
	          patchFlag |= 1024;
	        }
	      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
	        const child = node.children[0];
	        const type = child.type;
	        const hasDynamicTextChild = type === 5 || type === 8;
	        if (hasDynamicTextChild && getConstantType(child, context) === 0) {
	          patchFlag |= 1;
	        }
	        if (hasDynamicTextChild || type === 2) {
	          vnodeChildren = child;
	        } else {
	          vnodeChildren = node.children;
	        }
	      } else {
	        vnodeChildren = node.children;
	      }
	    }
	    if (dynamicPropNames && dynamicPropNames.length) {
	      vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
	    }
	    node.codegenNode = createVNodeCall(
	      context,
	      vnodeTag,
	      vnodeProps,
	      vnodeChildren,
	      patchFlag === 0 ? void 0 : patchFlag,
	      vnodeDynamicProps,
	      vnodeDirectives,
	      !!shouldUseBlock,
	      false,
	      isComponent,
	      node.loc
	    );
	  };
	};
	function resolveComponentType(node, context, ssr = false) {
	  let { tag } = node;
	  const isExplicitDynamic = isComponentTag(tag);
	  const isProp = findProp(
	    node,
	    "is",
	    false,
	    true
	  );
	  if (isProp) {
	    if (isExplicitDynamic || isCompatEnabled(
	      "COMPILER_IS_ON_ELEMENT",
	      context
	    )) {
	      let exp;
	      if (isProp.type === 6) {
	        exp = isProp.value && createSimpleExpression(isProp.value.content, true);
	      } else {
	        exp = isProp.exp;
	        if (!exp) {
	          exp = createSimpleExpression(`is`, false, isProp.loc);
	          {
	            exp = isProp.exp = processExpression(exp, context);
	          }
	        }
	      }
	      if (exp) {
	        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
	          exp
	        ]);
	      }
	    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
	      tag = isProp.value.content.slice(4);
	    }
	  }
	  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
	  if (builtIn) {
	    if (!ssr) context.helper(builtIn);
	    return builtIn;
	  }
	  {
	    const fromSetup = resolveSetupReference(tag, context);
	    if (fromSetup) {
	      return fromSetup;
	    }
	    const dotIndex = tag.indexOf(".");
	    if (dotIndex > 0) {
	      const ns = resolveSetupReference(tag.slice(0, dotIndex), context);
	      if (ns) {
	        return ns + tag.slice(dotIndex);
	      }
	    }
	  }
	  if (context.selfName && shared.capitalize(shared.camelize(tag)) === context.selfName) {
	    context.helper(RESOLVE_COMPONENT);
	    context.components.add(tag + `__self`);
	    return toValidAssetId(tag, `component`);
	  }
	  context.helper(RESOLVE_COMPONENT);
	  context.components.add(tag);
	  return toValidAssetId(tag, `component`);
	}
	function resolveSetupReference(name, context) {
	  const bindings = context.bindingMetadata;
	  if (!bindings || bindings.__isScriptSetup === false) {
	    return;
	  }
	  const camelName = shared.camelize(name);
	  const PascalName = shared.capitalize(camelName);
	  const checkType = (type) => {
	    if (bindings[name] === type) {
	      return name;
	    }
	    if (bindings[camelName] === type) {
	      return camelName;
	    }
	    if (bindings[PascalName] === type) {
	      return PascalName;
	    }
	  };
	  const fromConst = checkType("setup-const") || checkType("setup-reactive-const") || checkType("literal-const");
	  if (fromConst) {
	    return context.inline ? (
	      fromConst
	    ) : `$setup[${JSON.stringify(fromConst)}]`;
	  }
	  const fromMaybeRef = checkType("setup-let") || checkType("setup-ref") || checkType("setup-maybe-ref");
	  if (fromMaybeRef) {
	    return context.inline ? (
	      `${context.helperString(UNREF)}(${fromMaybeRef})`
	    ) : `$setup[${JSON.stringify(fromMaybeRef)}]`;
	  }
	  const fromProps = checkType("props");
	  if (fromProps) {
	    return `${context.helperString(UNREF)}(${context.inline ? "__props" : "$props"}[${JSON.stringify(fromProps)}])`;
	  }
	}
	function buildProps(node, context, props = node.props, isComponent, isDynamicComponent, ssr = false) {
	  const { tag, loc: elementLoc, children } = node;
	  let properties = [];
	  const mergeArgs = [];
	  const runtimeDirectives = [];
	  const hasChildren = children.length > 0;
	  let shouldUseBlock = false;
	  let patchFlag = 0;
	  let hasRef = false;
	  let hasClassBinding = false;
	  let hasStyleBinding = false;
	  let hasHydrationEventBinding = false;
	  let hasDynamicKeys = false;
	  let hasVnodeHook = false;
	  const dynamicPropNames = [];
	  const pushMergeArg = (arg) => {
	    if (properties.length) {
	      mergeArgs.push(
	        createObjectExpression(dedupeProperties(properties), elementLoc)
	      );
	      properties = [];
	    }
	    if (arg) mergeArgs.push(arg);
	  };
	  const pushRefVForMarker = () => {
	    if (context.scopes.vFor > 0) {
	      properties.push(
	        createObjectProperty(
	          createSimpleExpression("ref_for", true),
	          createSimpleExpression("true")
	        )
	      );
	    }
	  };
	  const analyzePatchFlag = ({ key, value }) => {
	    if (isStaticExp(key)) {
	      const name = key.content;
	      const isEventHandler = shared.isOn(name);
	      if (isEventHandler && (!isComponent || isDynamicComponent) &&
	      name.toLowerCase() !== "onclick" &&
	      name !== "onUpdate:modelValue" &&
	      !shared.isReservedProp(name)) {
	        hasHydrationEventBinding = true;
	      }
	      if (isEventHandler && shared.isReservedProp(name)) {
	        hasVnodeHook = true;
	      }
	      if (isEventHandler && value.type === 14) {
	        value = value.arguments[0];
	      }
	      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
	        return;
	      }
	      if (name === "ref") {
	        hasRef = true;
	      } else if (name === "class") {
	        hasClassBinding = true;
	      } else if (name === "style") {
	        hasStyleBinding = true;
	      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
	        dynamicPropNames.push(name);
	      }
	      if (isComponent && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
	        dynamicPropNames.push(name);
	      }
	    } else {
	      hasDynamicKeys = true;
	    }
	  };
	  for (let i = 0; i < props.length; i++) {
	    const prop = props[i];
	    if (prop.type === 6) {
	      const { loc, name, nameLoc, value } = prop;
	      let isStatic = true;
	      if (name === "ref") {
	        hasRef = true;
	        pushRefVForMarker();
	        if (value && context.inline) {
	          const binding = context.bindingMetadata[value.content];
	          if (binding === "setup-let" || binding === "setup-ref" || binding === "setup-maybe-ref") {
	            isStatic = false;
	            properties.push(
	              createObjectProperty(
	                createSimpleExpression("ref_key", true),
	                createSimpleExpression(value.content, true, value.loc)
	              )
	            );
	          }
	        }
	      }
	      if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled(
	        "COMPILER_IS_ON_ELEMENT",
	        context
	      ))) {
	        continue;
	      }
	      properties.push(
	        createObjectProperty(
	          createSimpleExpression(name, true, nameLoc),
	          createSimpleExpression(
	            value ? value.content : "",
	            isStatic,
	            value ? value.loc : loc
	          )
	        )
	      );
	    } else {
	      const { name, arg, exp, loc, modifiers } = prop;
	      const isVBind = name === "bind";
	      const isVOn = name === "on";
	      if (name === "slot") {
	        if (!isComponent) {
	          context.onError(
	            createCompilerError(40, loc)
	          );
	        }
	        continue;
	      }
	      if (name === "once" || name === "memo") {
	        continue;
	      }
	      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled(
	        "COMPILER_IS_ON_ELEMENT",
	        context
	      ))) {
	        continue;
	      }
	      if (isVOn && ssr) {
	        continue;
	      }
	      if (
	        isVBind && isStaticArgOf(arg, "key") ||
	        isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
	      ) {
	        shouldUseBlock = true;
	      }
	      if (isVBind && isStaticArgOf(arg, "ref")) {
	        pushRefVForMarker();
	      }
	      if (!arg && (isVBind || isVOn)) {
	        hasDynamicKeys = true;
	        if (exp) {
	          if (isVBind) {
	            pushRefVForMarker();
	            pushMergeArg();
	            {
	              {
	                const hasOverridableKeys = mergeArgs.some((arg2) => {
	                  if (arg2.type === 15) {
	                    return arg2.properties.some(({ key }) => {
	                      if (key.type !== 4 || !key.isStatic) {
	                        return true;
	                      }
	                      return key.content !== "class" && key.content !== "style" && !shared.isOn(key.content);
	                    });
	                  } else {
	                    return true;
	                  }
	                });
	                if (hasOverridableKeys) {
	                  checkCompatEnabled(
	                    "COMPILER_V_BIND_OBJECT_ORDER",
	                    context,
	                    loc
	                  );
	                }
	              }
	              if (isCompatEnabled(
	                "COMPILER_V_BIND_OBJECT_ORDER",
	                context
	              )) {
	                mergeArgs.unshift(exp);
	                continue;
	              }
	            }
	            mergeArgs.push(exp);
	          } else {
	            pushMergeArg({
	              type: 14,
	              loc,
	              callee: context.helper(TO_HANDLERS),
	              arguments: isComponent ? [exp] : [exp, `true`]
	            });
	          }
	        } else {
	          context.onError(
	            createCompilerError(
	              isVBind ? 34 : 35,
	              loc
	            )
	          );
	        }
	        continue;
	      }
	      if (isVBind && modifiers.includes("prop")) {
	        patchFlag |= 32;
	      }
	      const directiveTransform = context.directiveTransforms[name];
	      if (directiveTransform) {
	        const { props: props2, needRuntime } = directiveTransform(prop, node, context);
	        !ssr && props2.forEach(analyzePatchFlag);
	        if (isVOn && arg && !isStaticExp(arg)) {
	          pushMergeArg(createObjectExpression(props2, elementLoc));
	        } else {
	          properties.push(...props2);
	        }
	        if (needRuntime) {
	          runtimeDirectives.push(prop);
	          if (shared.isSymbol(needRuntime)) {
	            directiveImportMap.set(prop, needRuntime);
	          }
	        }
	      } else if (!shared.isBuiltInDirective(name)) {
	        runtimeDirectives.push(prop);
	        if (hasChildren) {
	          shouldUseBlock = true;
	        }
	      }
	    }
	  }
	  let propsExpression = void 0;
	  if (mergeArgs.length) {
	    pushMergeArg();
	    if (mergeArgs.length > 1) {
	      propsExpression = createCallExpression(
	        context.helper(MERGE_PROPS),
	        mergeArgs,
	        elementLoc
	      );
	    } else {
	      propsExpression = mergeArgs[0];
	    }
	  } else if (properties.length) {
	    propsExpression = createObjectExpression(
	      dedupeProperties(properties),
	      elementLoc
	    );
	  }
	  if (hasDynamicKeys) {
	    patchFlag |= 16;
	  } else {
	    if (hasClassBinding && !isComponent) {
	      patchFlag |= 2;
	    }
	    if (hasStyleBinding && !isComponent) {
	      patchFlag |= 4;
	    }
	    if (dynamicPropNames.length) {
	      patchFlag |= 8;
	    }
	    if (hasHydrationEventBinding) {
	      patchFlag |= 32;
	    }
	  }
	  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
	    patchFlag |= 512;
	  }
	  if (!context.inSSR && propsExpression) {
	    switch (propsExpression.type) {
	      case 15:
	        let classKeyIndex = -1;
	        let styleKeyIndex = -1;
	        let hasDynamicKey = false;
	        for (let i = 0; i < propsExpression.properties.length; i++) {
	          const key = propsExpression.properties[i].key;
	          if (isStaticExp(key)) {
	            if (key.content === "class") {
	              classKeyIndex = i;
	            } else if (key.content === "style") {
	              styleKeyIndex = i;
	            }
	          } else if (!key.isHandlerKey) {
	            hasDynamicKey = true;
	          }
	        }
	        const classProp = propsExpression.properties[classKeyIndex];
	        const styleProp = propsExpression.properties[styleKeyIndex];
	        if (!hasDynamicKey) {
	          if (classProp && !isStaticExp(classProp.value)) {
	            classProp.value = createCallExpression(
	              context.helper(NORMALIZE_CLASS),
	              [classProp.value]
	            );
	          }
	          if (styleProp &&
	          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` ||
	          styleProp.value.type === 17)) {
	            styleProp.value = createCallExpression(
	              context.helper(NORMALIZE_STYLE),
	              [styleProp.value]
	            );
	          }
	        } else {
	          propsExpression = createCallExpression(
	            context.helper(NORMALIZE_PROPS),
	            [propsExpression]
	          );
	        }
	        break;
	      case 14:
	        break;
	      default:
	        propsExpression = createCallExpression(
	          context.helper(NORMALIZE_PROPS),
	          [
	            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
	              propsExpression
	            ])
	          ]
	        );
	        break;
	    }
	  }
	  return {
	    props: propsExpression,
	    directives: runtimeDirectives,
	    patchFlag,
	    dynamicPropNames,
	    shouldUseBlock
	  };
	}
	function dedupeProperties(properties) {
	  const knownProps =  new Map();
	  const deduped = [];
	  for (let i = 0; i < properties.length; i++) {
	    const prop = properties[i];
	    if (prop.key.type === 8 || !prop.key.isStatic) {
	      deduped.push(prop);
	      continue;
	    }
	    const name = prop.key.content;
	    const existing = knownProps.get(name);
	    if (existing) {
	      if (name === "style" || name === "class" || shared.isOn(name)) {
	        mergeAsArray(existing, prop);
	      }
	    } else {
	      knownProps.set(name, prop);
	      deduped.push(prop);
	    }
	  }
	  return deduped;
	}
	function mergeAsArray(existing, incoming) {
	  if (existing.value.type === 17) {
	    existing.value.elements.push(incoming.value);
	  } else {
	    existing.value = createArrayExpression(
	      [existing.value, incoming.value],
	      existing.loc
	    );
	  }
	}
	function buildDirectiveArgs(dir, context) {
	  const dirArgs = [];
	  const runtime = directiveImportMap.get(dir);
	  if (runtime) {
	    dirArgs.push(context.helperString(runtime));
	  } else {
	    const fromSetup = resolveSetupReference("v-" + dir.name, context);
	    if (fromSetup) {
	      dirArgs.push(fromSetup);
	    } else {
	      context.helper(RESOLVE_DIRECTIVE);
	      context.directives.add(dir.name);
	      dirArgs.push(toValidAssetId(dir.name, `directive`));
	    }
	  }
	  const { loc } = dir;
	  if (dir.exp) dirArgs.push(dir.exp);
	  if (dir.arg) {
	    if (!dir.exp) {
	      dirArgs.push(`void 0`);
	    }
	    dirArgs.push(dir.arg);
	  }
	  if (Object.keys(dir.modifiers).length) {
	    if (!dir.arg) {
	      if (!dir.exp) {
	        dirArgs.push(`void 0`);
	      }
	      dirArgs.push(`void 0`);
	    }
	    const trueExpression = createSimpleExpression(`true`, false, loc);
	    dirArgs.push(
	      createObjectExpression(
	        dir.modifiers.map(
	          (modifier) => createObjectProperty(modifier, trueExpression)
	        ),
	        loc
	      )
	    );
	  }
	  return createArrayExpression(dirArgs, dir.loc);
	}
	function stringifyDynamicPropNames(props) {
	  let propsNamesString = `[`;
	  for (let i = 0, l = props.length; i < l; i++) {
	    propsNamesString += JSON.stringify(props[i]);
	    if (i < l - 1) propsNamesString += ", ";
	  }
	  return propsNamesString + `]`;
	}
	function isComponentTag(tag) {
	  return tag === "component" || tag === "Component";
	}
	const transformSlotOutlet = (node, context) => {
	  if (isSlotOutlet(node)) {
	    const { children, loc } = node;
	    const { slotName, slotProps } = processSlotOutlet(node, context);
	    const slotArgs = [
	      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
	      slotName,
	      "{}",
	      "undefined",
	      "true"
	    ];
	    let expectedLen = 2;
	    if (slotProps) {
	      slotArgs[2] = slotProps;
	      expectedLen = 3;
	    }
	    if (children.length) {
	      slotArgs[3] = createFunctionExpression([], children, false, false, loc);
	      expectedLen = 4;
	    }
	    if (context.scopeId && !context.slotted) {
	      expectedLen = 5;
	    }
	    slotArgs.splice(expectedLen);
	    node.codegenNode = createCallExpression(
	      context.helper(RENDER_SLOT),
	      slotArgs,
	      loc
	    );
	  }
	};
	function processSlotOutlet(node, context) {
	  let slotName = `"default"`;
	  let slotProps = void 0;
	  const nonNameProps = [];
	  for (let i = 0; i < node.props.length; i++) {
	    const p = node.props[i];
	    if (p.type === 6) {
	      if (p.value) {
	        if (p.name === "name") {
	          slotName = JSON.stringify(p.value.content);
	        } else {
	          p.name = shared.camelize(p.name);
	          nonNameProps.push(p);
	        }
	      }
	    } else {
	      if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
	        if (p.exp) {
	          slotName = p.exp;
	        } else if (p.arg && p.arg.type === 4) {
	          const name = shared.camelize(p.arg.content);
	          slotName = p.exp = createSimpleExpression(name, false, p.arg.loc);
	          {
	            slotName = p.exp = processExpression(p.exp, context);
	          }
	        }
	      } else {
	        if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
	          p.arg.content = shared.camelize(p.arg.content);
	        }
	        nonNameProps.push(p);
	      }
	    }
	  }
	  if (nonNameProps.length > 0) {
	    const { props, directives } = buildProps(
	      node,
	      context,
	      nonNameProps,
	      false,
	      false
	    );
	    slotProps = props;
	    if (directives.length) {
	      context.onError(
	        createCompilerError(
	          36,
	          directives[0].loc
	        )
	      );
	    }
	  }
	  return {
	    slotName,
	    slotProps
	  };
	}
	const fnExpRE = /^\s*(async\s*)?(\([^)]*?\)|[\w$_]+)\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
	const transformOn = (dir, node, context, augmentor) => {
	  const { loc, modifiers, arg } = dir;
	  if (!dir.exp && !modifiers.length) {
	    context.onError(createCompilerError(35, loc));
	  }
	  let eventName;
	  if (arg.type === 4) {
	    if (arg.isStatic) {
	      let rawName = arg.content;
	      if (rawName.startsWith("vnode")) {
	        context.onError(createCompilerError(51, arg.loc));
	      }
	      if (rawName.startsWith("vue:")) {
	        rawName = `vnode-${rawName.slice(4)}`;
	      }
	      const eventString = node.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
	        shared.toHandlerKey(shared.camelize(rawName))
	      ) : (
	        `on:${rawName}`
	      );
	      eventName = createSimpleExpression(eventString, true, arg.loc);
	    } else {
	      eventName = createCompoundExpression([
	        `${context.helperString(TO_HANDLER_KEY)}(`,
	        arg,
	        `)`
	      ]);
	    }
	  } else {
	    eventName = arg;
	    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
	    eventName.children.push(`)`);
	  }
	  let exp = dir.exp;
	  if (exp && !exp.content.trim()) {
	    exp = void 0;
	  }
	  let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
	  if (exp) {
	    const isMemberExp = isMemberExpression(exp.content, context);
	    const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
	    const hasMultipleStatements = exp.content.includes(`;`);
	    if (context.prefixIdentifiers) {
	      isInlineStatement && context.addIdentifiers(`$event`);
	      exp = dir.exp = processExpression(
	        exp,
	        context,
	        false,
	        hasMultipleStatements
	      );
	      isInlineStatement && context.removeIdentifiers(`$event`);
	      shouldCache = context.cacheHandlers &&
	      !context.inVOnce &&
	      !(exp.type === 4 && exp.constType > 0) &&
	      !(isMemberExp && node.tagType === 1) &&
	      !hasScopeRef(exp, context.identifiers);
	      if (shouldCache && isMemberExp) {
	        if (exp.type === 4) {
	          exp.content = `${exp.content} && ${exp.content}(...args)`;
	        } else {
	          exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];
	        }
	      }
	    }
	    if (isInlineStatement || shouldCache && isMemberExp) {
	      exp = createCompoundExpression([
	        `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `
//@ts-ignore
` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
	        exp,
	        hasMultipleStatements ? `}` : `)`
	      ]);
	    }
	  }
	  let ret = {
	    props: [
	      createObjectProperty(
	        eventName,
	        exp || createSimpleExpression(`() => {}`, false, loc)
	      )
	    ]
	  };
	  if (augmentor) {
	    ret = augmentor(ret);
	  }
	  if (shouldCache) {
	    ret.props[0].value = context.cache(ret.props[0].value);
	  }
	  ret.props.forEach((p) => p.key.isHandlerKey = true);
	  return ret;
	};
	const transformText = (node, context) => {
	  if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
	    return () => {
	      const children = node.children;
	      let currentContainer = void 0;
	      let hasText = false;
	      for (let i = 0; i < children.length; i++) {
	        const child = children[i];
	        if (isText$1(child)) {
	          hasText = true;
	          for (let j = i + 1; j < children.length; j++) {
	            const next = children[j];
	            if (isText$1(next)) {
	              if (!currentContainer) {
	                currentContainer = children[i] = createCompoundExpression(
	                  [child],
	                  child.loc
	                );
	              }
	              currentContainer.children.push(` + `, next);
	              children.splice(j, 1);
	              j--;
	            } else {
	              currentContainer = void 0;
	              break;
	            }
	          }
	        }
	      }
	      if (!hasText ||
	      children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 &&
	      !node.props.find(
	        (p) => p.type === 7 && !context.directiveTransforms[p.name]
	      ) &&
	      !(node.tag === "template"))) {
	        return;
	      }
	      for (let i = 0; i < children.length; i++) {
	        const child = children[i];
	        if (isText$1(child) || child.type === 8) {
	          const callArgs = [];
	          if (child.type !== 2 || child.content !== " ") {
	            callArgs.push(child);
	          }
	          if (!context.ssr && getConstantType(child, context) === 0) {
	            callArgs.push(
	              1 + (` /* ${shared.PatchFlagNames[1]} */` )
	            );
	          }
	          children[i] = {
	            type: 12,
	            content: child,
	            loc: child.loc,
	            codegenNode: createCallExpression(
	              context.helper(CREATE_TEXT),
	              callArgs
	            )
	          };
	        }
	      }
	    };
	  }
	};
	const seen$1 =  new WeakSet();
	const transformOnce = (node, context) => {
	  if (node.type === 1 && findDir(node, "once", true)) {
	    if (seen$1.has(node) || context.inVOnce || context.inSSR) {
	      return;
	    }
	    seen$1.add(node);
	    context.inVOnce = true;
	    context.helper(SET_BLOCK_TRACKING);
	    return () => {
	      context.inVOnce = false;
	      const cur = context.currentNode;
	      if (cur.codegenNode) {
	        cur.codegenNode = context.cache(
	          cur.codegenNode,
	          true
	        );
	      }
	    };
	  }
	};
	const transformModel = (dir, node, context) => {
	  const { exp, arg } = dir;
	  if (!exp) {
	    context.onError(
	      createCompilerError(41, dir.loc)
	    );
	    return createTransformProps();
	  }
	  const rawExp = exp.loc.source;
	  const expString = exp.type === 4 ? exp.content : rawExp;
	  const bindingType = context.bindingMetadata[rawExp];
	  if (bindingType === "props" || bindingType === "props-aliased") {
	    context.onError(createCompilerError(44, exp.loc));
	    return createTransformProps();
	  }
	  const maybeRef = context.inline && (bindingType === "setup-let" || bindingType === "setup-ref" || bindingType === "setup-maybe-ref");
	  if (!expString.trim() || !isMemberExpression(expString, context) && !maybeRef) {
	    context.onError(
	      createCompilerError(42, exp.loc)
	    );
	    return createTransformProps();
	  }
	  if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {
	    context.onError(
	      createCompilerError(43, exp.loc)
	    );
	    return createTransformProps();
	  }
	  const propName = arg ? arg : createSimpleExpression("modelValue", true);
	  const eventName = arg ? isStaticExp(arg) ? `onUpdate:${shared.camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
	  let assignmentExp;
	  const eventArg = context.isTS ? `($event: any)` : `$event`;
	  if (maybeRef) {
	    if (bindingType === "setup-ref") {
	      assignmentExp = createCompoundExpression([
	        `${eventArg} => ((`,
	        createSimpleExpression(rawExp, false, exp.loc),
	        `).value = $event)`
	      ]);
	    } else {
	      const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
	      assignmentExp = createCompoundExpression([
	        `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,
	        createSimpleExpression(rawExp, false, exp.loc),
	        `).value = $event : ${altAssignment})`
	      ]);
	    }
	  } else {
	    assignmentExp = createCompoundExpression([
	      `${eventArg} => ((`,
	      exp,
	      `) = $event)`
	    ]);
	  }
	  const props = [
	    createObjectProperty(propName, dir.exp),
	    createObjectProperty(eventName, assignmentExp)
	  ];
	  if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef(exp, context.identifiers)) {
	    props[1].value = context.cache(props[1].value);
	  }
	  if (dir.modifiers.length && node.tagType === 1) {
	    const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
	    const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
	    props.push(
	      createObjectProperty(
	        modifiersKey,
	        createSimpleExpression(
	          `{ ${modifiers} }`,
	          false,
	          dir.loc,
	          2
	        )
	      )
	    );
	  }
	  return createTransformProps(props);
	};
	function createTransformProps(props = []) {
	  return { props };
	}
	const validDivisionCharRE = /[\w).+\-_$\]]/;
	const transformFilter = (node, context) => {
	  if (!isCompatEnabled("COMPILER_FILTERS", context)) {
	    return;
	  }
	  if (node.type === 5) {
	    rewriteFilter(node.content, context);
	  } else if (node.type === 1) {
	    node.props.forEach((prop) => {
	      if (prop.type === 7 && prop.name !== "for" && prop.exp) {
	        rewriteFilter(prop.exp, context);
	      }
	    });
	  }
	};
	function rewriteFilter(node, context) {
	  if (node.type === 4) {
	    parseFilter(node, context);
	  } else {
	    for (let i = 0; i < node.children.length; i++) {
	      const child = node.children[i];
	      if (typeof child !== "object") continue;
	      if (child.type === 4) {
	        parseFilter(child, context);
	      } else if (child.type === 8) {
	        rewriteFilter(node, context);
	      } else if (child.type === 5) {
	        rewriteFilter(child.content, context);
	      }
	    }
	  }
	}
	function parseFilter(node, context) {
	  const exp = node.content;
	  let inSingle = false;
	  let inDouble = false;
	  let inTemplateString = false;
	  let inRegex = false;
	  let curly = 0;
	  let square = 0;
	  let paren = 0;
	  let lastFilterIndex = 0;
	  let c, prev, i, expression, filters = [];
	  for (i = 0; i < exp.length; i++) {
	    prev = c;
	    c = exp.charCodeAt(i);
	    if (inSingle) {
	      if (c === 39 && prev !== 92) inSingle = false;
	    } else if (inDouble) {
	      if (c === 34 && prev !== 92) inDouble = false;
	    } else if (inTemplateString) {
	      if (c === 96 && prev !== 92) inTemplateString = false;
	    } else if (inRegex) {
	      if (c === 47 && prev !== 92) inRegex = false;
	    } else if (c === 124 &&
	    exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
	      if (expression === void 0) {
	        lastFilterIndex = i + 1;
	        expression = exp.slice(0, i).trim();
	      } else {
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 34:
	          inDouble = true;
	          break;
	        case 39:
	          inSingle = true;
	          break;
	        case 96:
	          inTemplateString = true;
	          break;
	        case 40:
	          paren++;
	          break;
	        case 41:
	          paren--;
	          break;
	        case 91:
	          square++;
	          break;
	        case 93:
	          square--;
	          break;
	        case 123:
	          curly++;
	          break;
	        case 125:
	          curly--;
	          break;
	      }
	      if (c === 47) {
	        let j = i - 1;
	        let p;
	        for (; j >= 0; j--) {
	          p = exp.charAt(j);
	          if (p !== " ") break;
	        }
	        if (!p || !validDivisionCharRE.test(p)) {
	          inRegex = true;
	        }
	      }
	    }
	  }
	  if (expression === void 0) {
	    expression = exp.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }
	  function pushFilter() {
	    filters.push(exp.slice(lastFilterIndex, i).trim());
	    lastFilterIndex = i + 1;
	  }
	  if (filters.length) {
	    warnDeprecation(
	      "COMPILER_FILTERS",
	      context,
	      node.loc
	    );
	    for (i = 0; i < filters.length; i++) {
	      expression = wrapFilter(expression, filters[i], context);
	    }
	    node.content = expression;
	    node.ast = void 0;
	  }
	}
	function wrapFilter(exp, filter, context) {
	  context.helper(RESOLVE_FILTER);
	  const i = filter.indexOf("(");
	  if (i < 0) {
	    context.filters.add(filter);
	    return `${toValidAssetId(filter, "filter")}(${exp})`;
	  } else {
	    const name = filter.slice(0, i);
	    const args = filter.slice(i + 1);
	    context.filters.add(name);
	    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
	  }
	}
	const seen =  new WeakSet();
	const transformMemo = (node, context) => {
	  if (node.type === 1) {
	    const dir = findDir(node, "memo");
	    if (!dir || seen.has(node)) {
	      return;
	    }
	    seen.add(node);
	    return () => {
	      const codegenNode = node.codegenNode || context.currentNode.codegenNode;
	      if (codegenNode && codegenNode.type === 13) {
	        if (node.tagType !== 1) {
	          convertToBlock(codegenNode, context);
	        }
	        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
	          dir.exp,
	          createFunctionExpression(void 0, codegenNode),
	          `_cache`,
	          String(context.cached++)
	        ]);
	      }
	    };
	  }
	};
	function getBaseTransformPreset(prefixIdentifiers) {
	  return [
	    [
	      transformOnce,
	      transformIf,
	      transformMemo,
	      transformFor,
	      ...[transformFilter] ,
	      ...prefixIdentifiers ? [
	        trackVForSlotScopes,
	        transformExpression
	      ] : [],
	      transformSlotOutlet,
	      transformElement,
	      trackSlotScopes,
	      transformText
	    ],
	    {
	      on: transformOn,
	      bind: transformBind,
	      model: transformModel
	    }
	  ];
	}
	function baseCompile(source, options = {}) {
	  const onError = options.onError || defaultOnError;
	  const isModuleMode = options.mode === "module";
	  const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
	  if (!prefixIdentifiers && options.cacheHandlers) {
	    onError(createCompilerError(49));
	  }
	  if (options.scopeId && !isModuleMode) {
	    onError(createCompilerError(50));
	  }
	  const resolvedOptions = shared.extend({}, options, {
	    prefixIdentifiers
	  });
	  const ast = shared.isString(source) ? baseParse(source, resolvedOptions) : source;
	  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);
	  if (options.isTS) {
	    const { expressionPlugins } = options;
	    if (!expressionPlugins || !expressionPlugins.includes("typescript")) {
	      options.expressionPlugins = [...expressionPlugins || [], "typescript"];
	    }
	  }
	  transform(
	    ast,
	    shared.extend({}, resolvedOptions, {
	      nodeTransforms: [
	        ...nodeTransforms,
	        ...options.nodeTransforms || []
	      ],
	      directiveTransforms: shared.extend(
	        {},
	        directiveTransforms,
	        options.directiveTransforms || {}
	      )
	    })
	  );
	  return generate(ast, resolvedOptions);
	}
	const BindingTypes = {
	  "DATA": "data",
	  "PROPS": "props",
	  "PROPS_ALIASED": "props-aliased",
	  "SETUP_LET": "setup-let",
	  "SETUP_CONST": "setup-const",
	  "SETUP_REACTIVE_CONST": "setup-reactive-const",
	  "SETUP_MAYBE_REF": "setup-maybe-ref",
	  "SETUP_REF": "setup-ref",
	  "OPTIONS": "options",
	  "LITERAL_CONST": "literal-const"
	};
	const noopDirectiveTransform = () => ({ props: [] });
	compilerCore_cjs.generateCodeFrame = shared.generateCodeFrame;
	compilerCore_cjs.BASE_TRANSITION = BASE_TRANSITION;
	compilerCore_cjs.BindingTypes = BindingTypes;
	compilerCore_cjs.CAMELIZE = CAMELIZE;
	compilerCore_cjs.CAPITALIZE = CAPITALIZE;
	compilerCore_cjs.CREATE_BLOCK = CREATE_BLOCK;
	compilerCore_cjs.CREATE_COMMENT = CREATE_COMMENT;
	compilerCore_cjs.CREATE_ELEMENT_BLOCK = CREATE_ELEMENT_BLOCK;
	compilerCore_cjs.CREATE_ELEMENT_VNODE = CREATE_ELEMENT_VNODE;
	compilerCore_cjs.CREATE_SLOTS = CREATE_SLOTS;
	compilerCore_cjs.CREATE_STATIC = CREATE_STATIC;
	compilerCore_cjs.CREATE_TEXT = CREATE_TEXT;
	compilerCore_cjs.CREATE_VNODE = CREATE_VNODE;
	compilerCore_cjs.CompilerDeprecationTypes = CompilerDeprecationTypes;
	compilerCore_cjs.ConstantTypes = ConstantTypes;
	compilerCore_cjs.ElementTypes = ElementTypes;
	compilerCore_cjs.ErrorCodes = ErrorCodes;
	compilerCore_cjs.FRAGMENT = FRAGMENT;
	compilerCore_cjs.GUARD_REACTIVE_PROPS = GUARD_REACTIVE_PROPS;
	compilerCore_cjs.IS_MEMO_SAME = IS_MEMO_SAME;
	compilerCore_cjs.IS_REF = IS_REF;
	compilerCore_cjs.KEEP_ALIVE = KEEP_ALIVE;
	compilerCore_cjs.MERGE_PROPS = MERGE_PROPS;
	compilerCore_cjs.NORMALIZE_CLASS = NORMALIZE_CLASS;
	compilerCore_cjs.NORMALIZE_PROPS = NORMALIZE_PROPS;
	compilerCore_cjs.NORMALIZE_STYLE = NORMALIZE_STYLE;
	compilerCore_cjs.Namespaces = Namespaces;
	compilerCore_cjs.NodeTypes = NodeTypes;
	compilerCore_cjs.OPEN_BLOCK = OPEN_BLOCK;
	compilerCore_cjs.POP_SCOPE_ID = POP_SCOPE_ID;
	compilerCore_cjs.PUSH_SCOPE_ID = PUSH_SCOPE_ID;
	compilerCore_cjs.RENDER_LIST = RENDER_LIST;
	compilerCore_cjs.RENDER_SLOT = RENDER_SLOT;
	compilerCore_cjs.RESOLVE_COMPONENT = RESOLVE_COMPONENT;
	compilerCore_cjs.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE;
	compilerCore_cjs.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT;
	compilerCore_cjs.RESOLVE_FILTER = RESOLVE_FILTER;
	compilerCore_cjs.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING;
	compilerCore_cjs.SUSPENSE = SUSPENSE;
	compilerCore_cjs.TELEPORT = TELEPORT;
	compilerCore_cjs.TO_DISPLAY_STRING = TO_DISPLAY_STRING;
	compilerCore_cjs.TO_HANDLERS = TO_HANDLERS;
	compilerCore_cjs.TO_HANDLER_KEY = TO_HANDLER_KEY;
	compilerCore_cjs.TS_NODE_TYPES = TS_NODE_TYPES;
	compilerCore_cjs.UNREF = UNREF;
	compilerCore_cjs.WITH_CTX = WITH_CTX;
	compilerCore_cjs.WITH_DIRECTIVES = WITH_DIRECTIVES;
	compilerCore_cjs.WITH_MEMO = WITH_MEMO;
	compilerCore_cjs.advancePositionWithClone = advancePositionWithClone;
	compilerCore_cjs.advancePositionWithMutation = advancePositionWithMutation;
	compilerCore_cjs.assert = assert;
	compilerCore_cjs.baseCompile = baseCompile;
	compilerCore_cjs.baseParse = baseParse;
	compilerCore_cjs.buildDirectiveArgs = buildDirectiveArgs;
	compilerCore_cjs.buildProps = buildProps;
	compilerCore_cjs.buildSlots = buildSlots;
	compilerCore_cjs.checkCompatEnabled = checkCompatEnabled;
	compilerCore_cjs.convertToBlock = convertToBlock;
	compilerCore_cjs.createArrayExpression = createArrayExpression;
	compilerCore_cjs.createAssignmentExpression = createAssignmentExpression;
	compilerCore_cjs.createBlockStatement = createBlockStatement;
	compilerCore_cjs.createCacheExpression = createCacheExpression;
	compilerCore_cjs.createCallExpression = createCallExpression;
	compilerCore_cjs.createCompilerError = createCompilerError;
	compilerCore_cjs.createCompoundExpression = createCompoundExpression;
	compilerCore_cjs.createConditionalExpression = createConditionalExpression;
	compilerCore_cjs.createForLoopParams = createForLoopParams;
	compilerCore_cjs.createFunctionExpression = createFunctionExpression;
	compilerCore_cjs.createIfStatement = createIfStatement;
	compilerCore_cjs.createInterpolation = createInterpolation;
	compilerCore_cjs.createObjectExpression = createObjectExpression;
	compilerCore_cjs.createObjectProperty = createObjectProperty;
	compilerCore_cjs.createReturnStatement = createReturnStatement;
	compilerCore_cjs.createRoot = createRoot;
	compilerCore_cjs.createSequenceExpression = createSequenceExpression;
	compilerCore_cjs.createSimpleExpression = createSimpleExpression;
	compilerCore_cjs.createStructuralDirectiveTransform = createStructuralDirectiveTransform;
	compilerCore_cjs.createTemplateLiteral = createTemplateLiteral;
	compilerCore_cjs.createTransformContext = createTransformContext;
	compilerCore_cjs.createVNodeCall = createVNodeCall;
	compilerCore_cjs.errorMessages = errorMessages;
	compilerCore_cjs.extractIdentifiers = extractIdentifiers;
	compilerCore_cjs.findDir = findDir;
	compilerCore_cjs.findProp = findProp;
	compilerCore_cjs.forAliasRE = forAliasRE;
	compilerCore_cjs.generate = generate;
	compilerCore_cjs.getBaseTransformPreset = getBaseTransformPreset;
	compilerCore_cjs.getConstantType = getConstantType;
	compilerCore_cjs.getMemoedVNodeCall = getMemoedVNodeCall;
	compilerCore_cjs.getVNodeBlockHelper = getVNodeBlockHelper;
	compilerCore_cjs.getVNodeHelper = getVNodeHelper;
	compilerCore_cjs.hasDynamicKeyVBind = hasDynamicKeyVBind;
	compilerCore_cjs.hasScopeRef = hasScopeRef;
	compilerCore_cjs.helperNameMap = helperNameMap;
	compilerCore_cjs.injectProp = injectProp;
	compilerCore_cjs.isCoreComponent = isCoreComponent;
	compilerCore_cjs.isFunctionType = isFunctionType;
	compilerCore_cjs.isInDestructureAssignment = isInDestructureAssignment;
	compilerCore_cjs.isInNewExpression = isInNewExpression;
	compilerCore_cjs.isMemberExpression = isMemberExpression;
	compilerCore_cjs.isMemberExpressionBrowser = isMemberExpressionBrowser;
	compilerCore_cjs.isMemberExpressionNode = isMemberExpressionNode;
	compilerCore_cjs.isReferencedIdentifier = isReferencedIdentifier;
	compilerCore_cjs.isSimpleIdentifier = isSimpleIdentifier;
	compilerCore_cjs.isSlotOutlet = isSlotOutlet;
	compilerCore_cjs.isStaticArgOf = isStaticArgOf;
	compilerCore_cjs.isStaticExp = isStaticExp;
	compilerCore_cjs.isStaticProperty = isStaticProperty;
	compilerCore_cjs.isStaticPropertyKey = isStaticPropertyKey;
	compilerCore_cjs.isTemplateNode = isTemplateNode;
	compilerCore_cjs.isText = isText$1;
	compilerCore_cjs.isVSlot = isVSlot;
	compilerCore_cjs.locStub = locStub;
	compilerCore_cjs.noopDirectiveTransform = noopDirectiveTransform;
	compilerCore_cjs.processExpression = processExpression;
	compilerCore_cjs.processFor = processFor;
	compilerCore_cjs.processIf = processIf;
	compilerCore_cjs.processSlotOutlet = processSlotOutlet;
	compilerCore_cjs.registerRuntimeHelpers = registerRuntimeHelpers;
	compilerCore_cjs.resolveComponentType = resolveComponentType;
	compilerCore_cjs.stringifyExpression = stringifyExpression;
	compilerCore_cjs.toValidAssetId = toValidAssetId;
	compilerCore_cjs.trackSlotScopes = trackSlotScopes;
	compilerCore_cjs.trackVForSlotScopes = trackVForSlotScopes;
	compilerCore_cjs.transform = transform;
	compilerCore_cjs.transformBind = transformBind;
	compilerCore_cjs.transformElement = transformElement;
	compilerCore_cjs.transformExpression = transformExpression;
	compilerCore_cjs.transformModel = transformModel;
	compilerCore_cjs.transformOn = transformOn;
	compilerCore_cjs.traverseNode = traverseNode;
	compilerCore_cjs.unwrapTSNode = unwrapTSNode;
	compilerCore_cjs.walkBlockDeclarations = walkBlockDeclarations;
	compilerCore_cjs.walkFunctionParams = walkFunctionParams;
	compilerCore_cjs.walkIdentifiers = walkIdentifiers;
	compilerCore_cjs.warnDeprecation = warnDeprecation;
	return compilerCore_cjs;
}

var hasRequiredCompilerCore;
function requireCompilerCore () {
	if (hasRequiredCompilerCore) return compilerCore.exports;
	hasRequiredCompilerCore = 1;
	{
	  compilerCore.exports = requireCompilerCore_cjs();
	}
	return compilerCore.exports;
}

var compilerDom_cjs = {};

/**
* @vue/compiler-dom v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredCompilerDom_cjs;
function requireCompilerDom_cjs () {
	if (hasRequiredCompilerDom_cjs) return compilerDom_cjs;
	hasRequiredCompilerDom_cjs = 1;
	(function (exports) {
		Object.defineProperty(exports, '__esModule', { value: true });
		var compilerCore = requireCompilerCore();
		var shared = requireShared();
		const V_MODEL_RADIO = Symbol(`vModelRadio` );
		const V_MODEL_CHECKBOX = Symbol(`vModelCheckbox` );
		const V_MODEL_TEXT = Symbol(`vModelText` );
		const V_MODEL_SELECT = Symbol(`vModelSelect` );
		const V_MODEL_DYNAMIC = Symbol(`vModelDynamic` );
		const V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard` );
		const V_ON_WITH_KEYS = Symbol(`vOnKeysGuard` );
		const V_SHOW = Symbol(`vShow` );
		const TRANSITION = Symbol(`Transition` );
		const TRANSITION_GROUP = Symbol(`TransitionGroup` );
		compilerCore.registerRuntimeHelpers({
		  [V_MODEL_RADIO]: `vModelRadio`,
		  [V_MODEL_CHECKBOX]: `vModelCheckbox`,
		  [V_MODEL_TEXT]: `vModelText`,
		  [V_MODEL_SELECT]: `vModelSelect`,
		  [V_MODEL_DYNAMIC]: `vModelDynamic`,
		  [V_ON_WITH_MODIFIERS]: `withModifiers`,
		  [V_ON_WITH_KEYS]: `withKeys`,
		  [V_SHOW]: `vShow`,
		  [TRANSITION]: `Transition`,
		  [TRANSITION_GROUP]: `TransitionGroup`
		});
		const parserOptions = {
		  parseMode: "html",
		  isVoidTag: shared.isVoidTag,
		  isNativeTag: (tag) => shared.isHTMLTag(tag) || shared.isSVGTag(tag) || shared.isMathMLTag(tag),
		  isPreTag: (tag) => tag === "pre",
		  decodeEntities: void 0,
		  isBuiltInComponent: (tag) => {
		    if (tag === "Transition" || tag === "transition") {
		      return TRANSITION;
		    } else if (tag === "TransitionGroup" || tag === "transition-group") {
		      return TRANSITION_GROUP;
		    }
		  },
		  getNamespace(tag, parent, rootNamespace) {
		    let ns = parent ? parent.ns : rootNamespace;
		    if (parent && ns === 2) {
		      if (parent.tag === "annotation-xml") {
		        if (tag === "svg") {
		          return 1;
		        }
		        if (parent.props.some(
		          (a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml")
		        )) {
		          ns = 0;
		        }
		      } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
		        ns = 0;
		      }
		    } else if (parent && ns === 1) {
		      if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
		        ns = 0;
		      }
		    }
		    if (ns === 0) {
		      if (tag === "svg") {
		        return 1;
		      }
		      if (tag === "math") {
		        return 2;
		      }
		    }
		    return ns;
		  }
		};
		const transformStyle = (node) => {
		  if (node.type === 1) {
		    node.props.forEach((p, i) => {
		      if (p.type === 6 && p.name === "style" && p.value) {
		        node.props[i] = {
		          type: 7,
		          name: `bind`,
		          arg: compilerCore.createSimpleExpression(`style`, true, p.loc),
		          exp: parseInlineCSS(p.value.content, p.loc),
		          modifiers: [],
		          loc: p.loc
		        };
		      }
		    });
		  }
		};
		const parseInlineCSS = (cssText, loc) => {
		  const normalized = shared.parseStringStyle(cssText);
		  return compilerCore.createSimpleExpression(
		    JSON.stringify(normalized),
		    false,
		    loc,
		    3
		  );
		};
		function createDOMCompilerError(code, loc) {
		  return compilerCore.createCompilerError(
		    code,
		    loc,
		    DOMErrorMessages
		  );
		}
		const DOMErrorCodes = {
		  "X_V_HTML_NO_EXPRESSION": 53,
		  "53": "X_V_HTML_NO_EXPRESSION",
		  "X_V_HTML_WITH_CHILDREN": 54,
		  "54": "X_V_HTML_WITH_CHILDREN",
		  "X_V_TEXT_NO_EXPRESSION": 55,
		  "55": "X_V_TEXT_NO_EXPRESSION",
		  "X_V_TEXT_WITH_CHILDREN": 56,
		  "56": "X_V_TEXT_WITH_CHILDREN",
		  "X_V_MODEL_ON_INVALID_ELEMENT": 57,
		  "57": "X_V_MODEL_ON_INVALID_ELEMENT",
		  "X_V_MODEL_ARG_ON_ELEMENT": 58,
		  "58": "X_V_MODEL_ARG_ON_ELEMENT",
		  "X_V_MODEL_ON_FILE_INPUT_ELEMENT": 59,
		  "59": "X_V_MODEL_ON_FILE_INPUT_ELEMENT",
		  "X_V_MODEL_UNNECESSARY_VALUE": 60,
		  "60": "X_V_MODEL_UNNECESSARY_VALUE",
		  "X_V_SHOW_NO_EXPRESSION": 61,
		  "61": "X_V_SHOW_NO_EXPRESSION",
		  "X_TRANSITION_INVALID_CHILDREN": 62,
		  "62": "X_TRANSITION_INVALID_CHILDREN",
		  "X_IGNORED_SIDE_EFFECT_TAG": 63,
		  "63": "X_IGNORED_SIDE_EFFECT_TAG",
		  "__EXTEND_POINT__": 64,
		  "64": "__EXTEND_POINT__"
		};
		const DOMErrorMessages = {
		  [53]: `v-html is missing expression.`,
		  [54]: `v-html will override element children.`,
		  [55]: `v-text is missing expression.`,
		  [56]: `v-text will override element children.`,
		  [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
		  [58]: `v-model argument is not supported on plain elements.`,
		  [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
		  [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
		  [61]: `v-show is missing expression.`,
		  [62]: `<Transition> expects exactly one child element or component.`,
		  [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
		};
		const transformVHtml = (dir, node, context) => {
		  const { exp, loc } = dir;
		  if (!exp) {
		    context.onError(
		      createDOMCompilerError(53, loc)
		    );
		  }
		  if (node.children.length) {
		    context.onError(
		      createDOMCompilerError(54, loc)
		    );
		    node.children.length = 0;
		  }
		  return {
		    props: [
		      compilerCore.createObjectProperty(
		        compilerCore.createSimpleExpression(`innerHTML`, true, loc),
		        exp || compilerCore.createSimpleExpression("", true)
		      )
		    ]
		  };
		};
		const transformVText = (dir, node, context) => {
		  const { exp, loc } = dir;
		  if (!exp) {
		    context.onError(
		      createDOMCompilerError(55, loc)
		    );
		  }
		  if (node.children.length) {
		    context.onError(
		      createDOMCompilerError(56, loc)
		    );
		    node.children.length = 0;
		  }
		  return {
		    props: [
		      compilerCore.createObjectProperty(
		        compilerCore.createSimpleExpression(`textContent`, true),
		        exp ? compilerCore.getConstantType(exp, context) > 0 ? exp : compilerCore.createCallExpression(
		          context.helperString(compilerCore.TO_DISPLAY_STRING),
		          [exp],
		          loc
		        ) : compilerCore.createSimpleExpression("", true)
		      )
		    ]
		  };
		};
		const transformModel = (dir, node, context) => {
		  const baseResult = compilerCore.transformModel(dir, node, context);
		  if (!baseResult.props.length || node.tagType === 1) {
		    return baseResult;
		  }
		  if (dir.arg) {
		    context.onError(
		      createDOMCompilerError(
		        58,
		        dir.arg.loc
		      )
		    );
		  }
		  function checkDuplicatedValue() {
		    const value = compilerCore.findDir(node, "bind");
		    if (value && compilerCore.isStaticArgOf(value.arg, "value")) {
		      context.onError(
		        createDOMCompilerError(
		          60,
		          value.loc
		        )
		      );
		    }
		  }
		  const { tag } = node;
		  const isCustomElement = context.isCustomElement(tag);
		  if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
		    let directiveToUse = V_MODEL_TEXT;
		    let isInvalidType = false;
		    if (tag === "input" || isCustomElement) {
		      const type = compilerCore.findProp(node, `type`);
		      if (type) {
		        if (type.type === 7) {
		          directiveToUse = V_MODEL_DYNAMIC;
		        } else if (type.value) {
		          switch (type.value.content) {
		            case "radio":
		              directiveToUse = V_MODEL_RADIO;
		              break;
		            case "checkbox":
		              directiveToUse = V_MODEL_CHECKBOX;
		              break;
		            case "file":
		              isInvalidType = true;
		              context.onError(
		                createDOMCompilerError(
		                  59,
		                  dir.loc
		                )
		              );
		              break;
		            default:
		              checkDuplicatedValue();
		              break;
		          }
		        }
		      } else if (compilerCore.hasDynamicKeyVBind(node)) {
		        directiveToUse = V_MODEL_DYNAMIC;
		      } else {
		        checkDuplicatedValue();
		      }
		    } else if (tag === "select") {
		      directiveToUse = V_MODEL_SELECT;
		    } else {
		      checkDuplicatedValue();
		    }
		    if (!isInvalidType) {
		      baseResult.needRuntime = context.helper(directiveToUse);
		    }
		  } else {
		    context.onError(
		      createDOMCompilerError(
		        57,
		        dir.loc
		      )
		    );
		  }
		  baseResult.props = baseResult.props.filter(
		    (p) => !(p.key.type === 4 && p.key.content === "modelValue")
		  );
		  return baseResult;
		};
		const isEventOptionModifier =  shared.makeMap(`passive,once,capture`);
		const isNonKeyModifier =  shared.makeMap(
		  `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
		);
		const maybeKeyModifier =  shared.makeMap("left,right");
		const isKeyboardEvent =  shared.makeMap(
		  `onkeyup,onkeydown,onkeypress`,
		  true
		);
		const resolveModifiers = (key, modifiers, context, loc) => {
		  const keyModifiers = [];
		  const nonKeyModifiers = [];
		  const eventOptionModifiers = [];
		  for (let i = 0; i < modifiers.length; i++) {
		    const modifier = modifiers[i];
		    if (modifier === "native" && compilerCore.checkCompatEnabled(
		      "COMPILER_V_ON_NATIVE",
		      context,
		      loc
		    )) {
		      eventOptionModifiers.push(modifier);
		    } else if (isEventOptionModifier(modifier)) {
		      eventOptionModifiers.push(modifier);
		    } else {
		      if (maybeKeyModifier(modifier)) {
		        if (compilerCore.isStaticExp(key)) {
		          if (isKeyboardEvent(key.content)) {
		            keyModifiers.push(modifier);
		          } else {
		            nonKeyModifiers.push(modifier);
		          }
		        } else {
		          keyModifiers.push(modifier);
		          nonKeyModifiers.push(modifier);
		        }
		      } else {
		        if (isNonKeyModifier(modifier)) {
		          nonKeyModifiers.push(modifier);
		        } else {
		          keyModifiers.push(modifier);
		        }
		      }
		    }
		  }
		  return {
		    keyModifiers,
		    nonKeyModifiers,
		    eventOptionModifiers
		  };
		};
		const transformClick = (key, event) => {
		  const isStaticClick = compilerCore.isStaticExp(key) && key.content.toLowerCase() === "onclick";
		  return isStaticClick ? compilerCore.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore.createCompoundExpression([
		    `(`,
		    key,
		    `) === "onClick" ? "${event}" : (`,
		    key,
		    `)`
		  ]) : key;
		};
		const transformOn = (dir, node, context) => {
		  return compilerCore.transformOn(dir, node, context, (baseResult) => {
		    const { modifiers } = dir;
		    if (!modifiers.length) return baseResult;
		    let { key, value: handlerExp } = baseResult.props[0];
		    const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
		    if (nonKeyModifiers.includes("right")) {
		      key = transformClick(key, `onContextmenu`);
		    }
		    if (nonKeyModifiers.includes("middle")) {
		      key = transformClick(key, `onMouseup`);
		    }
		    if (nonKeyModifiers.length) {
		      handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
		        handlerExp,
		        JSON.stringify(nonKeyModifiers)
		      ]);
		    }
		    if (keyModifiers.length &&
		    (!compilerCore.isStaticExp(key) || isKeyboardEvent(key.content))) {
		      handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_KEYS), [
		        handlerExp,
		        JSON.stringify(keyModifiers)
		      ]);
		    }
		    if (eventOptionModifiers.length) {
		      const modifierPostfix = eventOptionModifiers.map(shared.capitalize).join("");
		      key = compilerCore.isStaticExp(key) ? compilerCore.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore.createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
		    }
		    return {
		      props: [compilerCore.createObjectProperty(key, handlerExp)]
		    };
		  });
		};
		const transformShow = (dir, node, context) => {
		  const { exp, loc } = dir;
		  if (!exp) {
		    context.onError(
		      createDOMCompilerError(61, loc)
		    );
		  }
		  return {
		    props: [],
		    needRuntime: context.helper(V_SHOW)
		  };
		};
		const transformTransition = (node, context) => {
		  if (node.type === 1 && node.tagType === 1) {
		    const component = context.isBuiltInComponent(node.tag);
		    if (component === TRANSITION) {
		      return () => {
		        if (!node.children.length) {
		          return;
		        }
		        if (hasMultipleChildren(node)) {
		          context.onError(
		            createDOMCompilerError(
		              62,
		              {
		                start: node.children[0].loc.start,
		                end: node.children[node.children.length - 1].loc.end,
		                source: ""
		              }
		            )
		          );
		        }
		        const child = node.children[0];
		        if (child.type === 1) {
		          for (const p of child.props) {
		            if (p.type === 7 && p.name === "show") {
		              node.props.push({
		                type: 6,
		                name: "persisted",
		                nameLoc: node.loc,
		                value: void 0,
		                loc: node.loc
		              });
		            }
		          }
		        }
		      };
		    }
		  }
		};
		function hasMultipleChildren(node) {
		  const children = node.children = node.children.filter(
		    (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())
		  );
		  const child = children[0];
		  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
		}
		const expReplaceRE = /__VUE_EXP_START__(.*?)__VUE_EXP_END__/g;
		const stringifyStatic = (children, context, parent) => {
		  if (context.scopes.vSlot > 0) {
		    return;
		  }
		  let nc = 0;
		  let ec = 0;
		  const currentChunk = [];
		  const stringifyCurrentChunk = (currentIndex) => {
		    if (nc >= 20 || ec >= 5) {
		      const staticCall = compilerCore.createCallExpression(context.helper(compilerCore.CREATE_STATIC), [
		        JSON.stringify(
		          currentChunk.map((node) => stringifyNode(node, context)).join("")
		        ).replace(expReplaceRE, `" + $1 + "`),
		        String(currentChunk.length)
		      ]);
		      replaceHoist(currentChunk[0], staticCall, context);
		      if (currentChunk.length > 1) {
		        for (let i2 = 1; i2 < currentChunk.length; i2++) {
		          replaceHoist(currentChunk[i2], null, context);
		        }
		        const deleteCount = currentChunk.length - 1;
		        children.splice(currentIndex - currentChunk.length + 1, deleteCount);
		        return deleteCount;
		      }
		    }
		    return 0;
		  };
		  let i = 0;
		  for (; i < children.length; i++) {
		    const child = children[i];
		    const hoisted = getHoistedNode(child);
		    if (hoisted) {
		      const node = child;
		      const result = analyzeNode(node);
		      if (result) {
		        nc += result[0];
		        ec += result[1];
		        currentChunk.push(node);
		        continue;
		      }
		    }
		    i -= stringifyCurrentChunk(i);
		    nc = 0;
		    ec = 0;
		    currentChunk.length = 0;
		  }
		  stringifyCurrentChunk(i);
		};
		const getHoistedNode = (node) => (node.type === 1 && node.tagType === 0 || node.type == 12) && node.codegenNode && node.codegenNode.type === 4 && node.codegenNode.hoisted;
		const dataAriaRE = /^(data|aria)-/;
		const isStringifiableAttr = (name, ns) => {
		  return (ns === 0 ? shared.isKnownHtmlAttr(name) : ns === 1 ? shared.isKnownSvgAttr(name) : false) || dataAriaRE.test(name);
		};
		const replaceHoist = (node, replacement, context) => {
		  const hoistToReplace = node.codegenNode.hoisted;
		  context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
		};
		const isNonStringifiable =  shared.makeMap(
		  `caption,thead,tr,th,tbody,td,tfoot,colgroup,col`
		);
		function analyzeNode(node) {
		  if (node.type === 1 && isNonStringifiable(node.tag)) {
		    return false;
		  }
		  if (node.type === 12) {
		    return [1, 0];
		  }
		  let nc = 1;
		  let ec = node.props.length > 0 ? 1 : 0;
		  let bailed = false;
		  const bail = () => {
		    bailed = true;
		    return false;
		  };
		  function walk(node2) {
		    const isOptionTag = node2.tag === "option" && node2.ns === 0;
		    for (let i = 0; i < node2.props.length; i++) {
		      const p = node2.props[i];
		      if (p.type === 6 && !isStringifiableAttr(p.name, node2.ns)) {
		        return bail();
		      }
		      if (p.type === 7 && p.name === "bind") {
		        if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr(p.arg.content, node2.ns))) {
		          return bail();
		        }
		        if (p.exp && (p.exp.type === 8 || p.exp.constType < 3)) {
		          return bail();
		        }
		        if (isOptionTag && compilerCore.isStaticArgOf(p.arg, "value") && p.exp && p.exp.ast && p.exp.ast.type !== "StringLiteral") {
		          return bail();
		        }
		      }
		    }
		    for (let i = 0; i < node2.children.length; i++) {
		      nc++;
		      const child = node2.children[i];
		      if (child.type === 1) {
		        if (child.props.length > 0) {
		          ec++;
		        }
		        walk(child);
		        if (bailed) {
		          return false;
		        }
		      }
		    }
		    return true;
		  }
		  return walk(node) ? [nc, ec] : false;
		}
		function stringifyNode(node, context) {
		  if (shared.isString(node)) {
		    return node;
		  }
		  if (shared.isSymbol(node)) {
		    return ``;
		  }
		  switch (node.type) {
		    case 1:
		      return stringifyElement(node, context);
		    case 2:
		      return shared.escapeHtml(node.content);
		    case 3:
		      return `<!--${shared.escapeHtml(node.content)}-->`;
		    case 5:
		      return shared.escapeHtml(shared.toDisplayString(evaluateConstant(node.content)));
		    case 8:
		      return shared.escapeHtml(evaluateConstant(node));
		    case 12:
		      return stringifyNode(node.content, context);
		    default:
		      return "";
		  }
		}
		function stringifyElement(node, context) {
		  let res = `<${node.tag}`;
		  let innerHTML = "";
		  for (let i = 0; i < node.props.length; i++) {
		    const p = node.props[i];
		    if (p.type === 6) {
		      res += ` ${p.name}`;
		      if (p.value) {
		        res += `="${shared.escapeHtml(p.value.content)}"`;
		      }
		    } else if (p.type === 7) {
		      if (p.name === "bind") {
		        const exp = p.exp;
		        if (exp.content[0] === "_") {
		          res += ` ${p.arg.content}="__VUE_EXP_START__${exp.content}__VUE_EXP_END__"`;
		          continue;
		        }
		        if (shared.isBooleanAttr(p.arg.content) && exp.content === "false") {
		          continue;
		        }
		        let evaluated = evaluateConstant(exp);
		        if (evaluated != null) {
		          const arg = p.arg && p.arg.content;
		          if (arg === "class") {
		            evaluated = shared.normalizeClass(evaluated);
		          } else if (arg === "style") {
		            evaluated = shared.stringifyStyle(shared.normalizeStyle(evaluated));
		          }
		          res += ` ${p.arg.content}="${shared.escapeHtml(
		            evaluated
		          )}"`;
		        }
		      } else if (p.name === "html") {
		        innerHTML = evaluateConstant(p.exp);
		      } else if (p.name === "text") {
		        innerHTML = shared.escapeHtml(
		          shared.toDisplayString(evaluateConstant(p.exp))
		        );
		      }
		    }
		  }
		  if (context.scopeId) {
		    res += ` ${context.scopeId}`;
		  }
		  res += `>`;
		  if (innerHTML) {
		    res += innerHTML;
		  } else {
		    for (let i = 0; i < node.children.length; i++) {
		      res += stringifyNode(node.children[i], context);
		    }
		  }
		  if (!shared.isVoidTag(node.tag)) {
		    res += `</${node.tag}>`;
		  }
		  return res;
		}
		function evaluateConstant(exp) {
		  if (exp.type === 4) {
		    return new Function(`return (${exp.content})`)();
		  } else {
		    let res = ``;
		    exp.children.forEach((c) => {
		      if (shared.isString(c) || shared.isSymbol(c)) {
		        return;
		      }
		      if (c.type === 2) {
		        res += c.content;
		      } else if (c.type === 5) {
		        res += shared.toDisplayString(evaluateConstant(c.content));
		      } else {
		        res += evaluateConstant(c);
		      }
		    });
		    return res;
		  }
		}
		const ignoreSideEffectTags = (node, context) => {
		  if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
		    context.onError(
		      createDOMCompilerError(
		        63,
		        node.loc
		      )
		    );
		    context.removeNode();
		  }
		};
		const DOMNodeTransforms = [
		  transformStyle,
		  ...[transformTransition]
		];
		const DOMDirectiveTransforms = {
		  cloak: compilerCore.noopDirectiveTransform,
		  html: transformVHtml,
		  text: transformVText,
		  model: transformModel,
		  on: transformOn,
		  show: transformShow
		};
		function compile(src, options = {}) {
		  return compilerCore.baseCompile(
		    src,
		    shared.extend({}, parserOptions, options, {
		      nodeTransforms: [
		        ignoreSideEffectTags,
		        ...DOMNodeTransforms,
		        ...options.nodeTransforms || []
		      ],
		      directiveTransforms: shared.extend(
		        {},
		        DOMDirectiveTransforms,
		        options.directiveTransforms || {}
		      ),
		      transformHoist: stringifyStatic
		    })
		  );
		}
		function parse(template, options = {}) {
		  return compilerCore.baseParse(template, shared.extend({}, parserOptions, options));
		}
		exports.DOMDirectiveTransforms = DOMDirectiveTransforms;
		exports.DOMErrorCodes = DOMErrorCodes;
		exports.DOMErrorMessages = DOMErrorMessages;
		exports.DOMNodeTransforms = DOMNodeTransforms;
		exports.TRANSITION = TRANSITION;
		exports.TRANSITION_GROUP = TRANSITION_GROUP;
		exports.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX;
		exports.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC;
		exports.V_MODEL_RADIO = V_MODEL_RADIO;
		exports.V_MODEL_SELECT = V_MODEL_SELECT;
		exports.V_MODEL_TEXT = V_MODEL_TEXT;
		exports.V_ON_WITH_KEYS = V_ON_WITH_KEYS;
		exports.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS;
		exports.V_SHOW = V_SHOW;
		exports.compile = compile;
		exports.createDOMCompilerError = createDOMCompilerError;
		exports.parse = parse;
		exports.parserOptions = parserOptions;
		exports.transformStyle = transformStyle;
		Object.keys(compilerCore).forEach(function (k) {
		  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = compilerCore[k];
		});
	} (compilerDom_cjs));
	return compilerDom_cjs;
}

var hasRequiredCompilerDom;
function requireCompilerDom () {
	if (hasRequiredCompilerDom) return compilerDom.exports;
	hasRequiredCompilerDom = 1;
	{
	  compilerDom.exports = requireCompilerDom_cjs();
	}
	return compilerDom.exports;
}

var runtimeDom = {exports: {}};

var runtimeCore = {exports: {}};

var reactivity = {exports: {}};

var reactivity_cjs = {};

/**
* @vue/reactivity v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredReactivity_cjs;
function requireReactivity_cjs () {
	if (hasRequiredReactivity_cjs) return reactivity_cjs;
	hasRequiredReactivity_cjs = 1;
	Object.defineProperty(reactivity_cjs, '__esModule', { value: true });
	var shared = requireShared();
	function warn(msg, ...args) {
	  console.warn(`[Vue warn] ${msg}`, ...args);
	}
	let activeEffectScope;
	class EffectScope {
	  constructor(detached = false) {
	    this.detached = detached;
	    this._active = true;
	    this.effects = [];
	    this.cleanups = [];
	    this.parent = activeEffectScope;
	    if (!detached && activeEffectScope) {
	      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
	        this
	      ) - 1;
	    }
	  }
	  get active() {
	    return this._active;
	  }
	  run(fn) {
	    if (this._active) {
	      const currentEffectScope = activeEffectScope;
	      try {
	        activeEffectScope = this;
	        return fn();
	      } finally {
	        activeEffectScope = currentEffectScope;
	      }
	    } else {
	      warn(`cannot run an inactive effect scope.`);
	    }
	  }
	  on() {
	    activeEffectScope = this;
	  }
	  off() {
	    activeEffectScope = this.parent;
	  }
	  stop(fromParent) {
	    if (this._active) {
	      let i, l;
	      for (i = 0, l = this.effects.length; i < l; i++) {
	        this.effects[i].stop();
	      }
	      for (i = 0, l = this.cleanups.length; i < l; i++) {
	        this.cleanups[i]();
	      }
	      if (this.scopes) {
	        for (i = 0, l = this.scopes.length; i < l; i++) {
	          this.scopes[i].stop(true);
	        }
	      }
	      if (!this.detached && this.parent && !fromParent) {
	        const last = this.parent.scopes.pop();
	        if (last && last !== this) {
	          this.parent.scopes[this.index] = last;
	          last.index = this.index;
	        }
	      }
	      this.parent = void 0;
	      this._active = false;
	    }
	  }
	}
	function effectScope(detached) {
	  return new EffectScope(detached);
	}
	function recordEffectScope(effect, scope = activeEffectScope) {
	  if (scope && scope.active) {
	    scope.effects.push(effect);
	  }
	}
	function getCurrentScope() {
	  return activeEffectScope;
	}
	function onScopeDispose(fn) {
	  if (activeEffectScope) {
	    activeEffectScope.cleanups.push(fn);
	  } else {
	    warn(
	      `onScopeDispose() is called when there is no active effect scope to be associated with.`
	    );
	  }
	}
	let activeEffect;
	class ReactiveEffect {
	  constructor(fn, trigger, scheduler, scope) {
	    this.fn = fn;
	    this.trigger = trigger;
	    this.scheduler = scheduler;
	    this.active = true;
	    this.deps = [];
	    this._dirtyLevel = 4;
	    this._trackId = 0;
	    this._runnings = 0;
	    this._shouldSchedule = false;
	    this._depsLength = 0;
	    recordEffectScope(this, scope);
	  }
	  get dirty() {
	    if (this._dirtyLevel === 2 || this._dirtyLevel === 3) {
	      this._dirtyLevel = 1;
	      pauseTracking();
	      for (let i = 0; i < this._depsLength; i++) {
	        const dep = this.deps[i];
	        if (dep.computed) {
	          triggerComputed(dep.computed);
	          if (this._dirtyLevel >= 4) {
	            break;
	          }
	        }
	      }
	      if (this._dirtyLevel === 1) {
	        this._dirtyLevel = 0;
	      }
	      resetTracking();
	    }
	    return this._dirtyLevel >= 4;
	  }
	  set dirty(v) {
	    this._dirtyLevel = v ? 4 : 0;
	  }
	  run() {
	    this._dirtyLevel = 0;
	    if (!this.active) {
	      return this.fn();
	    }
	    let lastShouldTrack = shouldTrack;
	    let lastEffect = activeEffect;
	    try {
	      shouldTrack = true;
	      activeEffect = this;
	      this._runnings++;
	      preCleanupEffect(this);
	      return this.fn();
	    } finally {
	      postCleanupEffect(this);
	      this._runnings--;
	      activeEffect = lastEffect;
	      shouldTrack = lastShouldTrack;
	    }
	  }
	  stop() {
	    if (this.active) {
	      preCleanupEffect(this);
	      postCleanupEffect(this);
	      this.onStop && this.onStop();
	      this.active = false;
	    }
	  }
	}
	function triggerComputed(computed) {
	  return computed.value;
	}
	function preCleanupEffect(effect2) {
	  effect2._trackId++;
	  effect2._depsLength = 0;
	}
	function postCleanupEffect(effect2) {
	  if (effect2.deps.length > effect2._depsLength) {
	    for (let i = effect2._depsLength; i < effect2.deps.length; i++) {
	      cleanupDepEffect(effect2.deps[i], effect2);
	    }
	    effect2.deps.length = effect2._depsLength;
	  }
	}
	function cleanupDepEffect(dep, effect2) {
	  const trackId = dep.get(effect2);
	  if (trackId !== void 0 && effect2._trackId !== trackId) {
	    dep.delete(effect2);
	    if (dep.size === 0) {
	      dep.cleanup();
	    }
	  }
	}
	function effect(fn, options) {
	  if (fn.effect instanceof ReactiveEffect) {
	    fn = fn.effect.fn;
	  }
	  const _effect = new ReactiveEffect(fn, shared.NOOP, () => {
	    if (_effect.dirty) {
	      _effect.run();
	    }
	  });
	  if (options) {
	    shared.extend(_effect, options);
	    if (options.scope) recordEffectScope(_effect, options.scope);
	  }
	  if (!options || !options.lazy) {
	    _effect.run();
	  }
	  const runner = _effect.run.bind(_effect);
	  runner.effect = _effect;
	  return runner;
	}
	function stop(runner) {
	  runner.effect.stop();
	}
	let shouldTrack = true;
	let pauseScheduleStack = 0;
	const trackStack = [];
	function pauseTracking() {
	  trackStack.push(shouldTrack);
	  shouldTrack = false;
	}
	function enableTracking() {
	  trackStack.push(shouldTrack);
	  shouldTrack = true;
	}
	function resetTracking() {
	  const last = trackStack.pop();
	  shouldTrack = last === void 0 ? true : last;
	}
	function pauseScheduling() {
	  pauseScheduleStack++;
	}
	function resetScheduling() {
	  pauseScheduleStack--;
	  while (!pauseScheduleStack && queueEffectSchedulers.length) {
	    queueEffectSchedulers.shift()();
	  }
	}
	function trackEffect(effect2, dep, debuggerEventExtraInfo) {
	  var _a;
	  if (dep.get(effect2) !== effect2._trackId) {
	    dep.set(effect2, effect2._trackId);
	    const oldDep = effect2.deps[effect2._depsLength];
	    if (oldDep !== dep) {
	      if (oldDep) {
	        cleanupDepEffect(oldDep, effect2);
	      }
	      effect2.deps[effect2._depsLength++] = dep;
	    } else {
	      effect2._depsLength++;
	    }
	    {
	      (_a = effect2.onTrack) == null ? void 0 : _a.call(effect2, shared.extend({ effect: effect2 }, debuggerEventExtraInfo));
	    }
	  }
	}
	const queueEffectSchedulers = [];
	function triggerEffects(dep, dirtyLevel, debuggerEventExtraInfo) {
	  var _a;
	  pauseScheduling();
	  for (const effect2 of dep.keys()) {
	    let tracking;
	    if (effect2._dirtyLevel < dirtyLevel && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
	      effect2._shouldSchedule || (effect2._shouldSchedule = effect2._dirtyLevel === 0);
	      effect2._dirtyLevel = dirtyLevel;
	    }
	    if (effect2._shouldSchedule && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
	      {
	        (_a = effect2.onTrigger) == null ? void 0 : _a.call(effect2, shared.extend({ effect: effect2 }, debuggerEventExtraInfo));
	      }
	      effect2.trigger();
	      if ((!effect2._runnings || effect2.allowRecurse) && effect2._dirtyLevel !== 2) {
	        effect2._shouldSchedule = false;
	        if (effect2.scheduler) {
	          queueEffectSchedulers.push(effect2.scheduler);
	        }
	      }
	    }
	  }
	  resetScheduling();
	}
	const createDep = (cleanup, computed) => {
	  const dep =  new Map();
	  dep.cleanup = cleanup;
	  dep.computed = computed;
	  return dep;
	};
	const targetMap =  new WeakMap();
	const ITERATE_KEY = Symbol("iterate" );
	const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate" );
	function track(target, type, key) {
	  if (shouldTrack && activeEffect) {
	    let depsMap = targetMap.get(target);
	    if (!depsMap) {
	      targetMap.set(target, depsMap =  new Map());
	    }
	    let dep = depsMap.get(key);
	    if (!dep) {
	      depsMap.set(key, dep = createDep(() => depsMap.delete(key)));
	    }
	    trackEffect(
	      activeEffect,
	      dep,
	      {
	        target,
	        type,
	        key
	      }
	    );
	  }
	}
	function trigger(target, type, key, newValue, oldValue, oldTarget) {
	  const depsMap = targetMap.get(target);
	  if (!depsMap) {
	    return;
	  }
	  let deps = [];
	  if (type === "clear") {
	    deps = [...depsMap.values()];
	  } else if (key === "length" && shared.isArray(target)) {
	    const newLength = Number(newValue);
	    depsMap.forEach((dep, key2) => {
	      if (key2 === "length" || !shared.isSymbol(key2) && key2 >= newLength) {
	        deps.push(dep);
	      }
	    });
	  } else {
	    if (key !== void 0) {
	      deps.push(depsMap.get(key));
	    }
	    switch (type) {
	      case "add":
	        if (!shared.isArray(target)) {
	          deps.push(depsMap.get(ITERATE_KEY));
	          if (shared.isMap(target)) {
	            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
	          }
	        } else if (shared.isIntegerKey(key)) {
	          deps.push(depsMap.get("length"));
	        }
	        break;
	      case "delete":
	        if (!shared.isArray(target)) {
	          deps.push(depsMap.get(ITERATE_KEY));
	          if (shared.isMap(target)) {
	            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
	          }
	        }
	        break;
	      case "set":
	        if (shared.isMap(target)) {
	          deps.push(depsMap.get(ITERATE_KEY));
	        }
	        break;
	    }
	  }
	  pauseScheduling();
	  for (const dep of deps) {
	    if (dep) {
	      triggerEffects(
	        dep,
	        4,
	        {
	          target,
	          type,
	          key,
	          newValue,
	          oldValue,
	          oldTarget
	        }
	      );
	    }
	  }
	  resetScheduling();
	}
	function getDepFromReactive(object, key) {
	  const depsMap = targetMap.get(object);
	  return depsMap && depsMap.get(key);
	}
	const isNonTrackableKeys =  shared.makeMap(`__proto__,__v_isRef,__isVue`);
	const builtInSymbols = new Set(
	   Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(shared.isSymbol)
	);
	const arrayInstrumentations =  createArrayInstrumentations();
	function createArrayInstrumentations() {
	  const instrumentations = {};
	  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
	    instrumentations[key] = function(...args) {
	      const arr = toRaw(this);
	      for (let i = 0, l = this.length; i < l; i++) {
	        track(arr, "get", i + "");
	      }
	      const res = arr[key](...args);
	      if (res === -1 || res === false) {
	        return arr[key](...args.map(toRaw));
	      } else {
	        return res;
	      }
	    };
	  });
	  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
	    instrumentations[key] = function(...args) {
	      pauseTracking();
	      pauseScheduling();
	      const res = toRaw(this)[key].apply(this, args);
	      resetScheduling();
	      resetTracking();
	      return res;
	    };
	  });
	  return instrumentations;
	}
	function hasOwnProperty(key) {
	  if (!shared.isSymbol(key)) key = String(key);
	  const obj = toRaw(this);
	  track(obj, "has", key);
	  return obj.hasOwnProperty(key);
	}
	class BaseReactiveHandler {
	  constructor(_isReadonly = false, _isShallow = false) {
	    this._isReadonly = _isReadonly;
	    this._isShallow = _isShallow;
	  }
	  get(target, key, receiver) {
	    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
	    if (key === "__v_isReactive") {
	      return !isReadonly2;
	    } else if (key === "__v_isReadonly") {
	      return isReadonly2;
	    } else if (key === "__v_isShallow") {
	      return isShallow2;
	    } else if (key === "__v_raw") {
	      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) ||
	      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
	        return target;
	      }
	      return;
	    }
	    const targetIsArray = shared.isArray(target);
	    if (!isReadonly2) {
	      if (targetIsArray && shared.hasOwn(arrayInstrumentations, key)) {
	        return Reflect.get(arrayInstrumentations, key, receiver);
	      }
	      if (key === "hasOwnProperty") {
	        return hasOwnProperty;
	      }
	    }
	    const res = Reflect.get(target, key, receiver);
	    if (shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
	      return res;
	    }
	    if (!isReadonly2) {
	      track(target, "get", key);
	    }
	    if (isShallow2) {
	      return res;
	    }
	    if (isRef(res)) {
	      return targetIsArray && shared.isIntegerKey(key) ? res : res.value;
	    }
	    if (shared.isObject(res)) {
	      return isReadonly2 ? readonly(res) : reactive(res);
	    }
	    return res;
	  }
	}
	class MutableReactiveHandler extends BaseReactiveHandler {
	  constructor(isShallow2 = false) {
	    super(false, isShallow2);
	  }
	  set(target, key, value, receiver) {
	    let oldValue = target[key];
	    if (!this._isShallow) {
	      const isOldValueReadonly = isReadonly(oldValue);
	      if (!isShallow(value) && !isReadonly(value)) {
	        oldValue = toRaw(oldValue);
	        value = toRaw(value);
	      }
	      if (!shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
	        if (isOldValueReadonly) {
	          return false;
	        } else {
	          oldValue.value = value;
	          return true;
	        }
	      }
	    }
	    const hadKey = shared.isArray(target) && shared.isIntegerKey(key) ? Number(key) < target.length : shared.hasOwn(target, key);
	    const result = Reflect.set(target, key, value, receiver);
	    if (target === toRaw(receiver)) {
	      if (!hadKey) {
	        trigger(target, "add", key, value);
	      } else if (shared.hasChanged(value, oldValue)) {
	        trigger(target, "set", key, value, oldValue);
	      }
	    }
	    return result;
	  }
	  deleteProperty(target, key) {
	    const hadKey = shared.hasOwn(target, key);
	    const oldValue = target[key];
	    const result = Reflect.deleteProperty(target, key);
	    if (result && hadKey) {
	      trigger(target, "delete", key, void 0, oldValue);
	    }
	    return result;
	  }
	  has(target, key) {
	    const result = Reflect.has(target, key);
	    if (!shared.isSymbol(key) || !builtInSymbols.has(key)) {
	      track(target, "has", key);
	    }
	    return result;
	  }
	  ownKeys(target) {
	    track(
	      target,
	      "iterate",
	      shared.isArray(target) ? "length" : ITERATE_KEY
	    );
	    return Reflect.ownKeys(target);
	  }
	}
	class ReadonlyReactiveHandler extends BaseReactiveHandler {
	  constructor(isShallow2 = false) {
	    super(true, isShallow2);
	  }
	  set(target, key) {
	    {
	      warn(
	        `Set operation on key "${String(key)}" failed: target is readonly.`,
	        target
	      );
	    }
	    return true;
	  }
	  deleteProperty(target, key) {
	    {
	      warn(
	        `Delete operation on key "${String(key)}" failed: target is readonly.`,
	        target
	      );
	    }
	    return true;
	  }
	}
	const mutableHandlers =  new MutableReactiveHandler();
	const readonlyHandlers =  new ReadonlyReactiveHandler();
	const shallowReactiveHandlers =  new MutableReactiveHandler(
	  true
	);
	const shallowReadonlyHandlers =  new ReadonlyReactiveHandler(true);
	const toShallow = (value) => value;
	const getProto = (v) => Reflect.getPrototypeOf(v);
	function get(target, key, isReadonly2 = false, isShallow2 = false) {
	  target = target["__v_raw"];
	  const rawTarget = toRaw(target);
	  const rawKey = toRaw(key);
	  if (!isReadonly2) {
	    if (shared.hasChanged(key, rawKey)) {
	      track(rawTarget, "get", key);
	    }
	    track(rawTarget, "get", rawKey);
	  }
	  const { has: has2 } = getProto(rawTarget);
	  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
	  if (has2.call(rawTarget, key)) {
	    return wrap(target.get(key));
	  } else if (has2.call(rawTarget, rawKey)) {
	    return wrap(target.get(rawKey));
	  } else if (target !== rawTarget) {
	    target.get(key);
	  }
	}
	function has(key, isReadonly2 = false) {
	  const target = this["__v_raw"];
	  const rawTarget = toRaw(target);
	  const rawKey = toRaw(key);
	  if (!isReadonly2) {
	    if (shared.hasChanged(key, rawKey)) {
	      track(rawTarget, "has", key);
	    }
	    track(rawTarget, "has", rawKey);
	  }
	  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
	}
	function size(target, isReadonly2 = false) {
	  target = target["__v_raw"];
	  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
	  return Reflect.get(target, "size", target);
	}
	function add(value, _isShallow = false) {
	  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {
	    value = toRaw(value);
	  }
	  const target = toRaw(this);
	  const proto = getProto(target);
	  const hadKey = proto.has.call(target, value);
	  if (!hadKey) {
	    target.add(value);
	    trigger(target, "add", value, value);
	  }
	  return this;
	}
	function set(key, value, _isShallow = false) {
	  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {
	    value = toRaw(value);
	  }
	  const target = toRaw(this);
	  const { has: has2, get: get2 } = getProto(target);
	  let hadKey = has2.call(target, key);
	  if (!hadKey) {
	    key = toRaw(key);
	    hadKey = has2.call(target, key);
	  } else {
	    checkIdentityKeys(target, has2, key);
	  }
	  const oldValue = get2.call(target, key);
	  target.set(key, value);
	  if (!hadKey) {
	    trigger(target, "add", key, value);
	  } else if (shared.hasChanged(value, oldValue)) {
	    trigger(target, "set", key, value, oldValue);
	  }
	  return this;
	}
	function deleteEntry(key) {
	  const target = toRaw(this);
	  const { has: has2, get: get2 } = getProto(target);
	  let hadKey = has2.call(target, key);
	  if (!hadKey) {
	    key = toRaw(key);
	    hadKey = has2.call(target, key);
	  } else {
	    checkIdentityKeys(target, has2, key);
	  }
	  const oldValue = get2 ? get2.call(target, key) : void 0;
	  const result = target.delete(key);
	  if (hadKey) {
	    trigger(target, "delete", key, void 0, oldValue);
	  }
	  return result;
	}
	function clear() {
	  const target = toRaw(this);
	  const hadItems = target.size !== 0;
	  const oldTarget = shared.isMap(target) ? new Map(target) : new Set(target) ;
	  const result = target.clear();
	  if (hadItems) {
	    trigger(target, "clear", void 0, void 0, oldTarget);
	  }
	  return result;
	}
	function createForEach(isReadonly2, isShallow2) {
	  return function forEach(callback, thisArg) {
	    const observed = this;
	    const target = observed["__v_raw"];
	    const rawTarget = toRaw(target);
	    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
	    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
	    return target.forEach((value, key) => {
	      return callback.call(thisArg, wrap(value), wrap(key), observed);
	    });
	  };
	}
	function createIterableMethod(method, isReadonly2, isShallow2) {
	  return function(...args) {
	    const target = this["__v_raw"];
	    const rawTarget = toRaw(target);
	    const targetIsMap = shared.isMap(rawTarget);
	    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
	    const isKeyOnly = method === "keys" && targetIsMap;
	    const innerIterator = target[method](...args);
	    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
	    !isReadonly2 && track(
	      rawTarget,
	      "iterate",
	      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
	    );
	    return {
	      next() {
	        const { value, done } = innerIterator.next();
	        return done ? { value, done } : {
	          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
	          done
	        };
	      },
	      [Symbol.iterator]() {
	        return this;
	      }
	    };
	  };
	}
	function createReadonlyMethod(type) {
	  return function(...args) {
	    {
	      const key = args[0] ? `on key "${args[0]}" ` : ``;
	      warn(
	        `${shared.capitalize(type)} operation ${key}failed: target is readonly.`,
	        toRaw(this)
	      );
	    }
	    return type === "delete" ? false : type === "clear" ? void 0 : this;
	  };
	}
	function createInstrumentations() {
	  const mutableInstrumentations2 = {
	    get(key) {
	      return get(this, key);
	    },
	    get size() {
	      return size(this);
	    },
	    has,
	    add,
	    set,
	    delete: deleteEntry,
	    clear,
	    forEach: createForEach(false, false)
	  };
	  const shallowInstrumentations2 = {
	    get(key) {
	      return get(this, key, false, true);
	    },
	    get size() {
	      return size(this);
	    },
	    has,
	    add(value) {
	      return add.call(this, value, true);
	    },
	    set(key, value) {
	      return set.call(this, key, value, true);
	    },
	    delete: deleteEntry,
	    clear,
	    forEach: createForEach(false, true)
	  };
	  const readonlyInstrumentations2 = {
	    get(key) {
	      return get(this, key, true);
	    },
	    get size() {
	      return size(this, true);
	    },
	    has(key) {
	      return has.call(this, key, true);
	    },
	    add: createReadonlyMethod("add"),
	    set: createReadonlyMethod("set"),
	    delete: createReadonlyMethod("delete"),
	    clear: createReadonlyMethod("clear"),
	    forEach: createForEach(true, false)
	  };
	  const shallowReadonlyInstrumentations2 = {
	    get(key) {
	      return get(this, key, true, true);
	    },
	    get size() {
	      return size(this, true);
	    },
	    has(key) {
	      return has.call(this, key, true);
	    },
	    add: createReadonlyMethod("add"),
	    set: createReadonlyMethod("set"),
	    delete: createReadonlyMethod("delete"),
	    clear: createReadonlyMethod("clear"),
	    forEach: createForEach(true, true)
	  };
	  const iteratorMethods = [
	    "keys",
	    "values",
	    "entries",
	    Symbol.iterator
	  ];
	  iteratorMethods.forEach((method) => {
	    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
	    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
	    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
	    shallowReadonlyInstrumentations2[method] = createIterableMethod(
	      method,
	      true,
	      true
	    );
	  });
	  return [
	    mutableInstrumentations2,
	    readonlyInstrumentations2,
	    shallowInstrumentations2,
	    shallowReadonlyInstrumentations2
	  ];
	}
	const [
	  mutableInstrumentations,
	  readonlyInstrumentations,
	  shallowInstrumentations,
	  shallowReadonlyInstrumentations
	] =  createInstrumentations();
	function createInstrumentationGetter(isReadonly2, shallow) {
	  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
	  return (target, key, receiver) => {
	    if (key === "__v_isReactive") {
	      return !isReadonly2;
	    } else if (key === "__v_isReadonly") {
	      return isReadonly2;
	    } else if (key === "__v_raw") {
	      return target;
	    }
	    return Reflect.get(
	      shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target,
	      key,
	      receiver
	    );
	  };
	}
	const mutableCollectionHandlers = {
	  get:  createInstrumentationGetter(false, false)
	};
	const shallowCollectionHandlers = {
	  get:  createInstrumentationGetter(false, true)
	};
	const readonlyCollectionHandlers = {
	  get:  createInstrumentationGetter(true, false)
	};
	const shallowReadonlyCollectionHandlers = {
	  get:  createInstrumentationGetter(true, true)
	};
	function checkIdentityKeys(target, has2, key) {
	  const rawKey = toRaw(key);
	  if (rawKey !== key && has2.call(target, rawKey)) {
	    const type = shared.toRawType(target);
	    warn(
	      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
	    );
	  }
	}
	const reactiveMap =  new WeakMap();
	const shallowReactiveMap =  new WeakMap();
	const readonlyMap =  new WeakMap();
	const shallowReadonlyMap =  new WeakMap();
	function targetTypeMap(rawType) {
	  switch (rawType) {
	    case "Object":
	    case "Array":
	      return 1 ;
	    case "Map":
	    case "Set":
	    case "WeakMap":
	    case "WeakSet":
	      return 2 ;
	    default:
	      return 0 ;
	  }
	}
	function getTargetType(value) {
	  return value["__v_skip"] || !Object.isExtensible(value) ? 0  : targetTypeMap(shared.toRawType(value));
	}
	function reactive(target) {
	  if (isReadonly(target)) {
	    return target;
	  }
	  return createReactiveObject(
	    target,
	    false,
	    mutableHandlers,
	    mutableCollectionHandlers,
	    reactiveMap
	  );
	}
	function shallowReactive(target) {
	  return createReactiveObject(
	    target,
	    false,
	    shallowReactiveHandlers,
	    shallowCollectionHandlers,
	    shallowReactiveMap
	  );
	}
	function readonly(target) {
	  return createReactiveObject(
	    target,
	    true,
	    readonlyHandlers,
	    readonlyCollectionHandlers,
	    readonlyMap
	  );
	}
	function shallowReadonly(target) {
	  return createReactiveObject(
	    target,
	    true,
	    shallowReadonlyHandlers,
	    shallowReadonlyCollectionHandlers,
	    shallowReadonlyMap
	  );
	}
	function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
	  if (!shared.isObject(target)) {
	    {
	      warn(
	        `value cannot be made ${isReadonly2 ? "readonly" : "reactive"}: ${String(
	          target
	        )}`
	      );
	    }
	    return target;
	  }
	  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
	    return target;
	  }
	  const existingProxy = proxyMap.get(target);
	  if (existingProxy) {
	    return existingProxy;
	  }
	  const targetType = getTargetType(target);
	  if (targetType === 0 ) {
	    return target;
	  }
	  const proxy = new Proxy(
	    target,
	    targetType === 2  ? collectionHandlers : baseHandlers
	  );
	  proxyMap.set(target, proxy);
	  return proxy;
	}
	function isReactive(value) {
	  if (isReadonly(value)) {
	    return isReactive(value["__v_raw"]);
	  }
	  return !!(value && value["__v_isReactive"]);
	}
	function isReadonly(value) {
	  return !!(value && value["__v_isReadonly"]);
	}
	function isShallow(value) {
	  return !!(value && value["__v_isShallow"]);
	}
	function isProxy(value) {
	  return value ? !!value["__v_raw"] : false;
	}
	function toRaw(observed) {
	  const raw = observed && observed["__v_raw"];
	  return raw ? toRaw(raw) : observed;
	}
	function markRaw(value) {
	  if (Object.isExtensible(value)) {
	    shared.def(value, "__v_skip", true);
	  }
	  return value;
	}
	const toReactive = (value) => shared.isObject(value) ? reactive(value) : value;
	const toReadonly = (value) => shared.isObject(value) ? readonly(value) : value;
	const COMPUTED_SIDE_EFFECT_WARN = `Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free`;
	class ComputedRefImpl {
	  constructor(getter, _setter, isReadonly, isSSR) {
	    this.getter = getter;
	    this._setter = _setter;
	    this.dep = void 0;
	    this.__v_isRef = true;
	    this["__v_isReadonly"] = false;
	    this.effect = new ReactiveEffect(
	      () => getter(this._value),
	      () => triggerRefValue(
	        this,
	        this.effect._dirtyLevel === 2 ? 2 : 3
	      )
	    );
	    this.effect.computed = this;
	    this.effect.active = this._cacheable = !isSSR;
	    this["__v_isReadonly"] = isReadonly;
	  }
	  get value() {
	    const self = toRaw(this);
	    if ((!self._cacheable || self.effect.dirty) && shared.hasChanged(self._value, self._value = self.effect.run())) {
	      triggerRefValue(self, 4);
	    }
	    trackRefValue(self);
	    if (self.effect._dirtyLevel >= 2) {
	      if (this._warnRecursive) {
	        warn(COMPUTED_SIDE_EFFECT_WARN, `

getter: `, this.getter);
	      }
	      triggerRefValue(self, 2);
	    }
	    return self._value;
	  }
	  set value(newValue) {
	    this._setter(newValue);
	  }
	  get _dirty() {
	    return this.effect.dirty;
	  }
	  set _dirty(v) {
	    this.effect.dirty = v;
	  }
	}
	function computed(getterOrOptions, debugOptions, isSSR = false) {
	  let getter;
	  let setter;
	  const onlyGetter = shared.isFunction(getterOrOptions);
	  if (onlyGetter) {
	    getter = getterOrOptions;
	    setter = () => {
	      warn("Write operation failed: computed value is readonly");
	    } ;
	  } else {
	    getter = getterOrOptions.get;
	    setter = getterOrOptions.set;
	  }
	  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
	  if (debugOptions && !isSSR) {
	    cRef.effect.onTrack = debugOptions.onTrack;
	    cRef.effect.onTrigger = debugOptions.onTrigger;
	  }
	  return cRef;
	}
	function trackRefValue(ref2) {
	  var _a;
	  if (shouldTrack && activeEffect) {
	    ref2 = toRaw(ref2);
	    trackEffect(
	      activeEffect,
	      (_a = ref2.dep) != null ? _a : ref2.dep = createDep(
	        () => ref2.dep = void 0,
	        ref2 instanceof ComputedRefImpl ? ref2 : void 0
	      ),
	      {
	        target: ref2,
	        type: "get",
	        key: "value"
	      }
	    );
	  }
	}
	function triggerRefValue(ref2, dirtyLevel = 4, newVal, oldVal) {
	  ref2 = toRaw(ref2);
	  const dep = ref2.dep;
	  if (dep) {
	    triggerEffects(
	      dep,
	      dirtyLevel,
	      {
	        target: ref2,
	        type: "set",
	        key: "value",
	        newValue: newVal,
	        oldValue: oldVal
	      }
	    );
	  }
	}
	function isRef(r) {
	  return !!(r && r.__v_isRef === true);
	}
	function ref(value) {
	  return createRef(value, false);
	}
	function shallowRef(value) {
	  return createRef(value, true);
	}
	function createRef(rawValue, shallow) {
	  if (isRef(rawValue)) {
	    return rawValue;
	  }
	  return new RefImpl(rawValue, shallow);
	}
	class RefImpl {
	  constructor(value, __v_isShallow) {
	    this.__v_isShallow = __v_isShallow;
	    this.dep = void 0;
	    this.__v_isRef = true;
	    this._rawValue = __v_isShallow ? value : toRaw(value);
	    this._value = __v_isShallow ? value : toReactive(value);
	  }
	  get value() {
	    trackRefValue(this);
	    return this._value;
	  }
	  set value(newVal) {
	    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
	    newVal = useDirectValue ? newVal : toRaw(newVal);
	    if (shared.hasChanged(newVal, this._rawValue)) {
	      const oldVal = this._rawValue;
	      this._rawValue = newVal;
	      this._value = useDirectValue ? newVal : toReactive(newVal);
	      triggerRefValue(this, 4, newVal, oldVal);
	    }
	  }
	}
	function triggerRef(ref2) {
	  triggerRefValue(ref2, 4, ref2.value );
	}
	function unref(ref2) {
	  return isRef(ref2) ? ref2.value : ref2;
	}
	function toValue(source) {
	  return shared.isFunction(source) ? source() : unref(source);
	}
	const shallowUnwrapHandlers = {
	  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
	  set: (target, key, value, receiver) => {
	    const oldValue = target[key];
	    if (isRef(oldValue) && !isRef(value)) {
	      oldValue.value = value;
	      return true;
	    } else {
	      return Reflect.set(target, key, value, receiver);
	    }
	  }
	};
	function proxyRefs(objectWithRefs) {
	  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
	}
	class CustomRefImpl {
	  constructor(factory) {
	    this.dep = void 0;
	    this.__v_isRef = true;
	    const { get, set } = factory(
	      () => trackRefValue(this),
	      () => triggerRefValue(this)
	    );
	    this._get = get;
	    this._set = set;
	  }
	  get value() {
	    return this._get();
	  }
	  set value(newVal) {
	    this._set(newVal);
	  }
	}
	function customRef(factory) {
	  return new CustomRefImpl(factory);
	}
	function toRefs(object) {
	  if (!isProxy(object)) {
	    warn(`toRefs() expects a reactive object but received a plain one.`);
	  }
	  const ret = shared.isArray(object) ? new Array(object.length) : {};
	  for (const key in object) {
	    ret[key] = propertyToRef(object, key);
	  }
	  return ret;
	}
	class ObjectRefImpl {
	  constructor(_object, _key, _defaultValue) {
	    this._object = _object;
	    this._key = _key;
	    this._defaultValue = _defaultValue;
	    this.__v_isRef = true;
	  }
	  get value() {
	    const val = this._object[this._key];
	    return val === void 0 ? this._defaultValue : val;
	  }
	  set value(newVal) {
	    this._object[this._key] = newVal;
	  }
	  get dep() {
	    return getDepFromReactive(toRaw(this._object), this._key);
	  }
	}
	class GetterRefImpl {
	  constructor(_getter) {
	    this._getter = _getter;
	    this.__v_isRef = true;
	    this.__v_isReadonly = true;
	  }
	  get value() {
	    return this._getter();
	  }
	}
	function toRef(source, key, defaultValue) {
	  if (isRef(source)) {
	    return source;
	  } else if (shared.isFunction(source)) {
	    return new GetterRefImpl(source);
	  } else if (shared.isObject(source) && arguments.length > 1) {
	    return propertyToRef(source, key, defaultValue);
	  } else {
	    return ref(source);
	  }
	}
	function propertyToRef(source, key, defaultValue) {
	  const val = source[key];
	  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
	}
	const deferredComputed = computed;
	const TrackOpTypes = {
	  "GET": "get",
	  "HAS": "has",
	  "ITERATE": "iterate"
	};
	const TriggerOpTypes = {
	  "SET": "set",
	  "ADD": "add",
	  "DELETE": "delete",
	  "CLEAR": "clear"
	};
	const ReactiveFlags = {
	  "SKIP": "__v_skip",
	  "IS_REACTIVE": "__v_isReactive",
	  "IS_READONLY": "__v_isReadonly",
	  "IS_SHALLOW": "__v_isShallow",
	  "RAW": "__v_raw"
	};
	reactivity_cjs.EffectScope = EffectScope;
	reactivity_cjs.ITERATE_KEY = ITERATE_KEY;
	reactivity_cjs.ReactiveEffect = ReactiveEffect;
	reactivity_cjs.ReactiveFlags = ReactiveFlags;
	reactivity_cjs.TrackOpTypes = TrackOpTypes;
	reactivity_cjs.TriggerOpTypes = TriggerOpTypes;
	reactivity_cjs.computed = computed;
	reactivity_cjs.customRef = customRef;
	reactivity_cjs.deferredComputed = deferredComputed;
	reactivity_cjs.effect = effect;
	reactivity_cjs.effectScope = effectScope;
	reactivity_cjs.enableTracking = enableTracking;
	reactivity_cjs.getCurrentScope = getCurrentScope;
	reactivity_cjs.isProxy = isProxy;
	reactivity_cjs.isReactive = isReactive;
	reactivity_cjs.isReadonly = isReadonly;
	reactivity_cjs.isRef = isRef;
	reactivity_cjs.isShallow = isShallow;
	reactivity_cjs.markRaw = markRaw;
	reactivity_cjs.onScopeDispose = onScopeDispose;
	reactivity_cjs.pauseScheduling = pauseScheduling;
	reactivity_cjs.pauseTracking = pauseTracking;
	reactivity_cjs.proxyRefs = proxyRefs;
	reactivity_cjs.reactive = reactive;
	reactivity_cjs.readonly = readonly;
	reactivity_cjs.ref = ref;
	reactivity_cjs.resetScheduling = resetScheduling;
	reactivity_cjs.resetTracking = resetTracking;
	reactivity_cjs.shallowReactive = shallowReactive;
	reactivity_cjs.shallowReadonly = shallowReadonly;
	reactivity_cjs.shallowRef = shallowRef;
	reactivity_cjs.stop = stop;
	reactivity_cjs.toRaw = toRaw;
	reactivity_cjs.toRef = toRef;
	reactivity_cjs.toRefs = toRefs;
	reactivity_cjs.toValue = toValue;
	reactivity_cjs.track = track;
	reactivity_cjs.trigger = trigger;
	reactivity_cjs.triggerRef = triggerRef;
	reactivity_cjs.unref = unref;
	return reactivity_cjs;
}

var hasRequiredReactivity;
function requireReactivity () {
	if (hasRequiredReactivity) return reactivity.exports;
	hasRequiredReactivity = 1;
	{
	  reactivity.exports = requireReactivity_cjs();
	}
	return reactivity.exports;
}

var runtimeCore_cjs = {};

/**
* @vue/runtime-core v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredRuntimeCore_cjs;
function requireRuntimeCore_cjs () {
	if (hasRequiredRuntimeCore_cjs) return runtimeCore_cjs;
	hasRequiredRuntimeCore_cjs = 1;
	Object.defineProperty(runtimeCore_cjs, '__esModule', { value: true });
	var reactivity = requireReactivity();
	var shared = requireShared();
	const stack = [];
	function pushWarningContext(vnode) {
	  stack.push(vnode);
	}
	function popWarningContext() {
	  stack.pop();
	}
	let isWarning = false;
	function warn$1(msg, ...args) {
	  if (isWarning) return;
	  isWarning = true;
	  reactivity.pauseTracking();
	  const instance = stack.length ? stack[stack.length - 1].component : null;
	  const appWarnHandler = instance && instance.appContext.config.warnHandler;
	  const trace = getComponentTrace();
	  if (appWarnHandler) {
	    callWithErrorHandling(
	      appWarnHandler,
	      instance,
	      11,
	      [
	        msg + args.map((a) => {
	          var _a, _b;
	          return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);
	        }).join(""),
	        instance && instance.proxy,
	        trace.map(
	          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
	        ).join("\n"),
	        trace
	      ]
	    );
	  } else {
	    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
	    if (trace.length &&
	    true) {
	      warnArgs.push(`
`, ...formatTrace(trace));
	    }
	    console.warn(...warnArgs);
	  }
	  reactivity.resetTracking();
	  isWarning = false;
	}
	function getComponentTrace() {
	  let currentVNode = stack[stack.length - 1];
	  if (!currentVNode) {
	    return [];
	  }
	  const normalizedStack = [];
	  while (currentVNode) {
	    const last = normalizedStack[0];
	    if (last && last.vnode === currentVNode) {
	      last.recurseCount++;
	    } else {
	      normalizedStack.push({
	        vnode: currentVNode,
	        recurseCount: 0
	      });
	    }
	    const parentInstance = currentVNode.component && currentVNode.component.parent;
	    currentVNode = parentInstance && parentInstance.vnode;
	  }
	  return normalizedStack;
	}
	function formatTrace(trace) {
	  const logs = [];
	  trace.forEach((entry, i) => {
	    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
	  });
	  return logs;
	}
	function formatTraceEntry({ vnode, recurseCount }) {
	  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
	  const isRoot = vnode.component ? vnode.component.parent == null : false;
	  const open = ` at <${formatComponentName(
	    vnode.component,
	    vnode.type,
	    isRoot
	  )}`;
	  const close = `>` + postfix;
	  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
	}
	function formatProps(props) {
	  const res = [];
	  const keys = Object.keys(props);
	  keys.slice(0, 3).forEach((key) => {
	    res.push(...formatProp(key, props[key]));
	  });
	  if (keys.length > 3) {
	    res.push(` ...`);
	  }
	  return res;
	}
	function formatProp(key, value, raw) {
	  if (shared.isString(value)) {
	    value = JSON.stringify(value);
	    return raw ? value : [`${key}=${value}`];
	  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
	    return raw ? value : [`${key}=${value}`];
	  } else if (reactivity.isRef(value)) {
	    value = formatProp(key, reactivity.toRaw(value.value), true);
	    return raw ? value : [`${key}=Ref<`, value, `>`];
	  } else if (shared.isFunction(value)) {
	    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
	  } else {
	    value = reactivity.toRaw(value);
	    return raw ? value : [`${key}=`, value];
	  }
	}
	function assertNumber(val, type) {
	  if (val === void 0) {
	    return;
	  } else if (typeof val !== "number") {
	    warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
	  } else if (isNaN(val)) {
	    warn$1(`${type} is NaN - the duration expression might be incorrect.`);
	  }
	}
	const ErrorCodes = {
	  "SETUP_FUNCTION": 0,
	  "0": "SETUP_FUNCTION",
	  "RENDER_FUNCTION": 1,
	  "1": "RENDER_FUNCTION",
	  "WATCH_GETTER": 2,
	  "2": "WATCH_GETTER",
	  "WATCH_CALLBACK": 3,
	  "3": "WATCH_CALLBACK",
	  "WATCH_CLEANUP": 4,
	  "4": "WATCH_CLEANUP",
	  "NATIVE_EVENT_HANDLER": 5,
	  "5": "NATIVE_EVENT_HANDLER",
	  "COMPONENT_EVENT_HANDLER": 6,
	  "6": "COMPONENT_EVENT_HANDLER",
	  "VNODE_HOOK": 7,
	  "7": "VNODE_HOOK",
	  "DIRECTIVE_HOOK": 8,
	  "8": "DIRECTIVE_HOOK",
	  "TRANSITION_HOOK": 9,
	  "9": "TRANSITION_HOOK",
	  "APP_ERROR_HANDLER": 10,
	  "10": "APP_ERROR_HANDLER",
	  "APP_WARN_HANDLER": 11,
	  "11": "APP_WARN_HANDLER",
	  "FUNCTION_REF": 12,
	  "12": "FUNCTION_REF",
	  "ASYNC_COMPONENT_LOADER": 13,
	  "13": "ASYNC_COMPONENT_LOADER",
	  "SCHEDULER": 14,
	  "14": "SCHEDULER",
	  "COMPONENT_UPDATE": 15,
	  "15": "COMPONENT_UPDATE"
	};
	const ErrorTypeStrings$1 = {
	  ["sp"]: "serverPrefetch hook",
	  ["bc"]: "beforeCreate hook",
	  ["c"]: "created hook",
	  ["bm"]: "beforeMount hook",
	  ["m"]: "mounted hook",
	  ["bu"]: "beforeUpdate hook",
	  ["u"]: "updated",
	  ["bum"]: "beforeUnmount hook",
	  ["um"]: "unmounted hook",
	  ["a"]: "activated hook",
	  ["da"]: "deactivated hook",
	  ["ec"]: "errorCaptured hook",
	  ["rtc"]: "renderTracked hook",
	  ["rtg"]: "renderTriggered hook",
	  [0]: "setup function",
	  [1]: "render function",
	  [2]: "watcher getter",
	  [3]: "watcher callback",
	  [4]: "watcher cleanup function",
	  [5]: "native event handler",
	  [6]: "component event handler",
	  [7]: "vnode hook",
	  [8]: "directive hook",
	  [9]: "transition hook",
	  [10]: "app errorHandler",
	  [11]: "app warnHandler",
	  [12]: "ref function",
	  [13]: "async component loader",
	  [14]: "scheduler flush",
	  [15]: "component update"
	};
	function callWithErrorHandling(fn, instance, type, args) {
	  try {
	    return args ? fn(...args) : fn();
	  } catch (err) {
	    handleError(err, instance, type);
	  }
	}
	function callWithAsyncErrorHandling(fn, instance, type, args) {
	  if (shared.isFunction(fn)) {
	    const res = callWithErrorHandling(fn, instance, type, args);
	    if (res && shared.isPromise(res)) {
	      res.catch((err) => {
	        handleError(err, instance, type);
	      });
	    }
	    return res;
	  }
	  if (shared.isArray(fn)) {
	    const values = [];
	    for (let i = 0; i < fn.length; i++) {
	      values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
	    }
	    return values;
	  } else {
	    warn$1(
	      `Invalid value type passed to callWithAsyncErrorHandling(): ${typeof fn}`
	    );
	  }
	}
	function handleError(err, instance, type, throwInDev = true) {
	  const contextVNode = instance ? instance.vnode : null;
	  if (instance) {
	    let cur = instance.parent;
	    const exposedInstance = instance.proxy;
	    const errorInfo = ErrorTypeStrings$1[type] ;
	    while (cur) {
	      const errorCapturedHooks = cur.ec;
	      if (errorCapturedHooks) {
	        for (let i = 0; i < errorCapturedHooks.length; i++) {
	          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
	            return;
	          }
	        }
	      }
	      cur = cur.parent;
	    }
	    const appErrorHandler = instance.appContext.config.errorHandler;
	    if (appErrorHandler) {
	      reactivity.pauseTracking();
	      callWithErrorHandling(
	        appErrorHandler,
	        null,
	        10,
	        [err, exposedInstance, errorInfo]
	      );
	      reactivity.resetTracking();
	      return;
	    }
	  }
	  logError(err, type, contextVNode, throwInDev);
	}
	function logError(err, type, contextVNode, throwInDev = true) {
	  {
	    const info = ErrorTypeStrings$1[type];
	    if (contextVNode) {
	      pushWarningContext(contextVNode);
	    }
	    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
	    if (contextVNode) {
	      popWarningContext();
	    }
	    if (throwInDev) {
	      throw err;
	    } else {
	      console.error(err);
	    }
	  }
	}
	let isFlushing = false;
	let isFlushPending = false;
	const queue = [];
	let flushIndex = 0;
	const pendingPostFlushCbs = [];
	let activePostFlushCbs = null;
	let postFlushIndex = 0;
	const resolvedPromise =  Promise.resolve();
	let currentFlushPromise = null;
	const RECURSION_LIMIT = 100;
	function nextTick(fn) {
	  const p = currentFlushPromise || resolvedPromise;
	  return fn ? p.then(this ? fn.bind(this) : fn) : p;
	}
	function findInsertionIndex(id) {
	  let start = flushIndex + 1;
	  let end = queue.length;
	  while (start < end) {
	    const middle = start + end >>> 1;
	    const middleJob = queue[middle];
	    const middleJobId = getId(middleJob);
	    if (middleJobId < id || middleJobId === id && middleJob.pre) {
	      start = middle + 1;
	    } else {
	      end = middle;
	    }
	  }
	  return start;
	}
	function queueJob(job) {
	  if (!queue.length || !queue.includes(
	    job,
	    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
	  )) {
	    if (job.id == null) {
	      queue.push(job);
	    } else {
	      queue.splice(findInsertionIndex(job.id), 0, job);
	    }
	    queueFlush();
	  }
	}
	function queueFlush() {
	  if (!isFlushing && !isFlushPending) {
	    isFlushPending = true;
	    currentFlushPromise = resolvedPromise.then(flushJobs);
	  }
	}
	function invalidateJob(job) {
	  const i = queue.indexOf(job);
	  if (i > flushIndex) {
	    queue.splice(i, 1);
	  }
	}
	function queuePostFlushCb(cb) {
	  if (!shared.isArray(cb)) {
	    if (!activePostFlushCbs || !activePostFlushCbs.includes(
	      cb,
	      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
	    )) {
	      pendingPostFlushCbs.push(cb);
	    }
	  } else {
	    pendingPostFlushCbs.push(...cb);
	  }
	  queueFlush();
	}
	function flushPreFlushCbs(instance, seen, i = isFlushing ? flushIndex + 1 : 0) {
	  {
	    seen = seen ||  new Map();
	  }
	  for (; i < queue.length; i++) {
	    const cb = queue[i];
	    if (cb && cb.pre) {
	      if (instance && cb.id !== instance.uid) {
	        continue;
	      }
	      if (checkRecursiveUpdates(seen, cb)) {
	        continue;
	      }
	      queue.splice(i, 1);
	      i--;
	      cb();
	    }
	  }
	}
	function flushPostFlushCbs(seen) {
	  if (pendingPostFlushCbs.length) {
	    const deduped = [...new Set(pendingPostFlushCbs)].sort(
	      (a, b) => getId(a) - getId(b)
	    );
	    pendingPostFlushCbs.length = 0;
	    if (activePostFlushCbs) {
	      activePostFlushCbs.push(...deduped);
	      return;
	    }
	    activePostFlushCbs = deduped;
	    {
	      seen = seen ||  new Map();
	    }
	    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
	      const cb = activePostFlushCbs[postFlushIndex];
	      if (checkRecursiveUpdates(seen, cb)) {
	        continue;
	      }
	      if (cb.active !== false) cb();
	    }
	    activePostFlushCbs = null;
	    postFlushIndex = 0;
	  }
	}
	const getId = (job) => job.id == null ? Infinity : job.id;
	const comparator = (a, b) => {
	  const diff = getId(a) - getId(b);
	  if (diff === 0) {
	    if (a.pre && !b.pre) return -1;
	    if (b.pre && !a.pre) return 1;
	  }
	  return diff;
	};
	function flushJobs(seen) {
	  isFlushPending = false;
	  isFlushing = true;
	  {
	    seen = seen ||  new Map();
	  }
	  queue.sort(comparator);
	  const check = (job) => checkRecursiveUpdates(seen, job) ;
	  try {
	    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
	      const job = queue[flushIndex];
	      if (job && job.active !== false) {
	        if (check(job)) {
	          continue;
	        }
	        callWithErrorHandling(
	          job,
	          job.i,
	          job.i ? 15 : 14
	        );
	      }
	    }
	  } finally {
	    flushIndex = 0;
	    queue.length = 0;
	    flushPostFlushCbs(seen);
	    isFlushing = false;
	    currentFlushPromise = null;
	    if (queue.length || pendingPostFlushCbs.length) {
	      flushJobs(seen);
	    }
	  }
	}
	function checkRecursiveUpdates(seen, fn) {
	  if (!seen.has(fn)) {
	    seen.set(fn, 1);
	  } else {
	    const count = seen.get(fn);
	    if (count > RECURSION_LIMIT) {
	      const instance = fn.i;
	      const componentName = instance && getComponentName(instance.type);
	      handleError(
	        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
	        null,
	        10
	      );
	      return true;
	    } else {
	      seen.set(fn, count + 1);
	    }
	  }
	}
	let isHmrUpdating = false;
	const hmrDirtyComponents =  new Map();
	{
	  shared.getGlobalThis().__VUE_HMR_RUNTIME__ = {
	    createRecord: tryWrap(createRecord),
	    rerender: tryWrap(rerender),
	    reload: tryWrap(reload)
	  };
	}
	const map =  new Map();
	function registerHMR(instance) {
	  const id = instance.type.__hmrId;
	  let record = map.get(id);
	  if (!record) {
	    createRecord(id, instance.type);
	    record = map.get(id);
	  }
	  record.instances.add(instance);
	}
	function unregisterHMR(instance) {
	  map.get(instance.type.__hmrId).instances.delete(instance);
	}
	function createRecord(id, initialDef) {
	  if (map.has(id)) {
	    return false;
	  }
	  map.set(id, {
	    initialDef: normalizeClassComponent(initialDef),
	    instances:  new Set()
	  });
	  return true;
	}
	function normalizeClassComponent(component) {
	  return isClassComponent(component) ? component.__vccOpts : component;
	}
	function rerender(id, newRender) {
	  const record = map.get(id);
	  if (!record) {
	    return;
	  }
	  record.initialDef.render = newRender;
	  [...record.instances].forEach((instance) => {
	    if (newRender) {
	      instance.render = newRender;
	      normalizeClassComponent(instance.type).render = newRender;
	    }
	    instance.renderCache = [];
	    isHmrUpdating = true;
	    instance.effect.dirty = true;
	    instance.update();
	    isHmrUpdating = false;
	  });
	}
	function reload(id, newComp) {
	  const record = map.get(id);
	  if (!record) return;
	  newComp = normalizeClassComponent(newComp);
	  updateComponentDef(record.initialDef, newComp);
	  const instances = [...record.instances];
	  for (let i = 0; i < instances.length; i++) {
	    const instance = instances[i];
	    const oldComp = normalizeClassComponent(instance.type);
	    let dirtyInstances = hmrDirtyComponents.get(oldComp);
	    if (!dirtyInstances) {
	      if (oldComp !== record.initialDef) {
	        updateComponentDef(oldComp, newComp);
	      }
	      hmrDirtyComponents.set(oldComp, dirtyInstances =  new Set());
	    }
	    dirtyInstances.add(instance);
	    instance.appContext.propsCache.delete(instance.type);
	    instance.appContext.emitsCache.delete(instance.type);
	    instance.appContext.optionsCache.delete(instance.type);
	    if (instance.ceReload) {
	      dirtyInstances.add(instance);
	      instance.ceReload(newComp.styles);
	      dirtyInstances.delete(instance);
	    } else if (instance.parent) {
	      instance.parent.effect.dirty = true;
	      queueJob(() => {
	        instance.parent.update();
	        dirtyInstances.delete(instance);
	      });
	    } else if (instance.appContext.reload) {
	      instance.appContext.reload();
	    } else if (typeof window !== "undefined") {
	      window.location.reload();
	    } else {
	      console.warn(
	        "[HMR] Root or manually mounted instance modified. Full reload required."
	      );
	    }
	  }
	  queuePostFlushCb(() => {
	    hmrDirtyComponents.clear();
	  });
	}
	function updateComponentDef(oldComp, newComp) {
	  shared.extend(oldComp, newComp);
	  for (const key in oldComp) {
	    if (key !== "__file" && !(key in newComp)) {
	      delete oldComp[key];
	    }
	  }
	}
	function tryWrap(fn) {
	  return (id, arg) => {
	    try {
	      return fn(id, arg);
	    } catch (e) {
	      console.error(e);
	      console.warn(
	        `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
	      );
	    }
	  };
	}
	let devtools$1;
	let buffer = [];
	let devtoolsNotInstalled = false;
	function emit$1(event, ...args) {
	  if (devtools$1) {
	    devtools$1.emit(event, ...args);
	  } else if (!devtoolsNotInstalled) {
	    buffer.push({ event, args });
	  }
	}
	function setDevtoolsHook$1(hook, target) {
	  var _a, _b;
	  devtools$1 = hook;
	  if (devtools$1) {
	    devtools$1.enabled = true;
	    buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
	    buffer = [];
	  } else if (
	    typeof window !== "undefined" &&
	    window.HTMLElement &&
	    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
	  ) {
	    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
	    replay.push((newHook) => {
	      setDevtoolsHook$1(newHook, target);
	    });
	    setTimeout(() => {
	      if (!devtools$1) {
	        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
	        devtoolsNotInstalled = true;
	        buffer = [];
	      }
	    }, 3e3);
	  } else {
	    devtoolsNotInstalled = true;
	    buffer = [];
	  }
	}
	function devtoolsInitApp(app, version) {
	  emit$1("app:init" , app, version, {
	    Fragment,
	    Text,
	    Comment,
	    Static
	  });
	}
	function devtoolsUnmountApp(app) {
	  emit$1("app:unmount" , app);
	}
	const devtoolsComponentAdded =  createDevtoolsComponentHook(
	  "component:added"
	);
	const devtoolsComponentUpdated =  createDevtoolsComponentHook("component:updated" );
	const _devtoolsComponentRemoved =  createDevtoolsComponentHook(
	  "component:removed"
	);
	const devtoolsComponentRemoved = (component) => {
	  if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" &&
	  !devtools$1.cleanupBuffer(component)) {
	    _devtoolsComponentRemoved(component);
	  }
	};
	/*! #__NO_SIDE_EFFECTS__ */
	function createDevtoolsComponentHook(hook) {
	  return (component) => {
	    emit$1(
	      hook,
	      component.appContext.app,
	      component.uid,
	      component.parent ? component.parent.uid : void 0,
	      component
	    );
	  };
	}
	const devtoolsPerfStart =  createDevtoolsPerformanceHook(
	  "perf:start"
	);
	const devtoolsPerfEnd =  createDevtoolsPerformanceHook(
	  "perf:end"
	);
	function createDevtoolsPerformanceHook(hook) {
	  return (component, type, time) => {
	    emit$1(hook, component.appContext.app, component.uid, component, type, time);
	  };
	}
	function devtoolsComponentEmit(component, event, params) {
	  emit$1(
	    "component:emit" ,
	    component.appContext.app,
	    component,
	    event,
	    params
	  );
	}
	let currentRenderingInstance = null;
	let currentScopeId = null;
	function setCurrentRenderingInstance(instance) {
	  const prev = currentRenderingInstance;
	  currentRenderingInstance = instance;
	  currentScopeId = instance && instance.type.__scopeId || null;
	  return prev;
	}
	function pushScopeId(id) {
	  currentScopeId = id;
	}
	function popScopeId() {
	  currentScopeId = null;
	}
	const withScopeId = (_id) => withCtx;
	function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
	  if (!ctx) return fn;
	  if (fn._n) {
	    return fn;
	  }
	  const renderFnWithContext = (...args) => {
	    if (renderFnWithContext._d) {
	      setBlockTracking(-1);
	    }
	    const prevInstance = setCurrentRenderingInstance(ctx);
	    let res;
	    try {
	      res = fn(...args);
	    } finally {
	      setCurrentRenderingInstance(prevInstance);
	      if (renderFnWithContext._d) {
	        setBlockTracking(1);
	      }
	    }
	    {
	      devtoolsComponentUpdated(ctx);
	    }
	    return res;
	  };
	  renderFnWithContext._n = true;
	  renderFnWithContext._c = true;
	  renderFnWithContext._d = true;
	  return renderFnWithContext;
	}
	function validateDirectiveName(name) {
	  if (shared.isBuiltInDirective(name)) {
	    warn$1("Do not use built-in directive ids as custom directive id: " + name);
	  }
	}
	function withDirectives(vnode, directives) {
	  if (currentRenderingInstance === null) {
	    warn$1(`withDirectives can only be used inside render functions.`);
	    return vnode;
	  }
	  const instance = getComponentPublicInstance(currentRenderingInstance);
	  const bindings = vnode.dirs || (vnode.dirs = []);
	  for (let i = 0; i < directives.length; i++) {
	    let [dir, value, arg, modifiers = shared.EMPTY_OBJ] = directives[i];
	    if (dir) {
	      if (shared.isFunction(dir)) {
	        dir = {
	          mounted: dir,
	          updated: dir
	        };
	      }
	      if (dir.deep) {
	        traverse(value);
	      }
	      bindings.push({
	        dir,
	        instance,
	        value,
	        oldValue: void 0,
	        arg,
	        modifiers
	      });
	    }
	  }
	  return vnode;
	}
	function invokeDirectiveHook(vnode, prevVNode, instance, name) {
	  const bindings = vnode.dirs;
	  const oldBindings = prevVNode && prevVNode.dirs;
	  for (let i = 0; i < bindings.length; i++) {
	    const binding = bindings[i];
	    if (oldBindings) {
	      binding.oldValue = oldBindings[i].value;
	    }
	    let hook = binding.dir[name];
	    if (hook) {
	      reactivity.pauseTracking();
	      callWithAsyncErrorHandling(hook, instance, 8, [
	        vnode.el,
	        binding,
	        vnode,
	        prevVNode
	      ]);
	      reactivity.resetTracking();
	    }
	  }
	}
	const leaveCbKey = Symbol("_leaveCb");
	const enterCbKey = Symbol("_enterCb");
	function useTransitionState() {
	  const state = {
	    isMounted: false,
	    isLeaving: false,
	    isUnmounting: false,
	    leavingVNodes:  new Map()
	  };
	  onMounted(() => {
	    state.isMounted = true;
	  });
	  onBeforeUnmount(() => {
	    state.isUnmounting = true;
	  });
	  return state;
	}
	const TransitionHookValidator = [Function, Array];
	const BaseTransitionPropsValidators = {
	  mode: String,
	  appear: Boolean,
	  persisted: Boolean,
	  onBeforeEnter: TransitionHookValidator,
	  onEnter: TransitionHookValidator,
	  onAfterEnter: TransitionHookValidator,
	  onEnterCancelled: TransitionHookValidator,
	  onBeforeLeave: TransitionHookValidator,
	  onLeave: TransitionHookValidator,
	  onAfterLeave: TransitionHookValidator,
	  onLeaveCancelled: TransitionHookValidator,
	  onBeforeAppear: TransitionHookValidator,
	  onAppear: TransitionHookValidator,
	  onAfterAppear: TransitionHookValidator,
	  onAppearCancelled: TransitionHookValidator
	};
	const recursiveGetSubtree = (instance) => {
	  const subTree = instance.subTree;
	  return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
	};
	const BaseTransitionImpl = {
	  name: `BaseTransition`,
	  props: BaseTransitionPropsValidators,
	  setup(props, { slots }) {
	    const instance = getCurrentInstance();
	    const state = useTransitionState();
	    return () => {
	      const children = slots.default && getTransitionRawChildren(slots.default(), true);
	      if (!children || !children.length) {
	        return;
	      }
	      let child = children[0];
	      if (children.length > 1) {
	        let hasFound = false;
	        for (const c of children) {
	          if (c.type !== Comment) {
	            if (hasFound) {
	              warn$1(
	                "<transition> can only be used on a single element or component. Use <transition-group> for lists."
	              );
	              break;
	            }
	            child = c;
	            hasFound = true;
	          }
	        }
	      }
	      const rawProps = reactivity.toRaw(props);
	      const { mode } = rawProps;
	      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
	        warn$1(`invalid <transition> mode: ${mode}`);
	      }
	      if (state.isLeaving) {
	        return emptyPlaceholder(child);
	      }
	      const innerChild = getKeepAliveChild(child);
	      if (!innerChild) {
	        return emptyPlaceholder(child);
	      }
	      let enterHooks = resolveTransitionHooks(
	        innerChild,
	        rawProps,
	        state,
	        instance,
	        (hooks) => enterHooks = hooks
	      );
	      setTransitionHooks(innerChild, enterHooks);
	      const oldChild = instance.subTree;
	      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
	      if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
	        const leavingHooks = resolveTransitionHooks(
	          oldInnerChild,
	          rawProps,
	          state,
	          instance
	        );
	        setTransitionHooks(oldInnerChild, leavingHooks);
	        if (mode === "out-in" && innerChild.type !== Comment) {
	          state.isLeaving = true;
	          leavingHooks.afterLeave = () => {
	            state.isLeaving = false;
	            if (instance.update.active !== false) {
	              instance.effect.dirty = true;
	              instance.update();
	            }
	          };
	          return emptyPlaceholder(child);
	        } else if (mode === "in-out" && innerChild.type !== Comment) {
	          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
	            const leavingVNodesCache = getLeavingNodesForType(
	              state,
	              oldInnerChild
	            );
	            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
	            el[leaveCbKey] = () => {
	              earlyRemove();
	              el[leaveCbKey] = void 0;
	              delete enterHooks.delayedLeave;
	            };
	            enterHooks.delayedLeave = delayedLeave;
	          };
	        }
	      }
	      return child;
	    };
	  }
	};
	const BaseTransition = BaseTransitionImpl;
	function getLeavingNodesForType(state, vnode) {
	  const { leavingVNodes } = state;
	  let leavingVNodesCache = leavingVNodes.get(vnode.type);
	  if (!leavingVNodesCache) {
	    leavingVNodesCache =  Object.create(null);
	    leavingVNodes.set(vnode.type, leavingVNodesCache);
	  }
	  return leavingVNodesCache;
	}
	function resolveTransitionHooks(vnode, props, state, instance, postClone) {
	  const {
	    appear,
	    mode,
	    persisted = false,
	    onBeforeEnter,
	    onEnter,
	    onAfterEnter,
	    onEnterCancelled,
	    onBeforeLeave,
	    onLeave,
	    onAfterLeave,
	    onLeaveCancelled,
	    onBeforeAppear,
	    onAppear,
	    onAfterAppear,
	    onAppearCancelled
	  } = props;
	  const key = String(vnode.key);
	  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
	  const callHook = (hook, args) => {
	    hook && callWithAsyncErrorHandling(
	      hook,
	      instance,
	      9,
	      args
	    );
	  };
	  const callAsyncHook = (hook, args) => {
	    const done = args[1];
	    callHook(hook, args);
	    if (shared.isArray(hook)) {
	      if (hook.every((hook2) => hook2.length <= 1)) done();
	    } else if (hook.length <= 1) {
	      done();
	    }
	  };
	  const hooks = {
	    mode,
	    persisted,
	    beforeEnter(el) {
	      let hook = onBeforeEnter;
	      if (!state.isMounted) {
	        if (appear) {
	          hook = onBeforeAppear || onBeforeEnter;
	        } else {
	          return;
	        }
	      }
	      if (el[leaveCbKey]) {
	        el[leaveCbKey](
	          true
	        );
	      }
	      const leavingVNode = leavingVNodesCache[key];
	      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
	        leavingVNode.el[leaveCbKey]();
	      }
	      callHook(hook, [el]);
	    },
	    enter(el) {
	      let hook = onEnter;
	      let afterHook = onAfterEnter;
	      let cancelHook = onEnterCancelled;
	      if (!state.isMounted) {
	        if (appear) {
	          hook = onAppear || onEnter;
	          afterHook = onAfterAppear || onAfterEnter;
	          cancelHook = onAppearCancelled || onEnterCancelled;
	        } else {
	          return;
	        }
	      }
	      let called = false;
	      const done = el[enterCbKey] = (cancelled) => {
	        if (called) return;
	        called = true;
	        if (cancelled) {
	          callHook(cancelHook, [el]);
	        } else {
	          callHook(afterHook, [el]);
	        }
	        if (hooks.delayedLeave) {
	          hooks.delayedLeave();
	        }
	        el[enterCbKey] = void 0;
	      };
	      if (hook) {
	        callAsyncHook(hook, [el, done]);
	      } else {
	        done();
	      }
	    },
	    leave(el, remove) {
	      const key2 = String(vnode.key);
	      if (el[enterCbKey]) {
	        el[enterCbKey](
	          true
	        );
	      }
	      if (state.isUnmounting) {
	        return remove();
	      }
	      callHook(onBeforeLeave, [el]);
	      let called = false;
	      const done = el[leaveCbKey] = (cancelled) => {
	        if (called) return;
	        called = true;
	        remove();
	        if (cancelled) {
	          callHook(onLeaveCancelled, [el]);
	        } else {
	          callHook(onAfterLeave, [el]);
	        }
	        el[leaveCbKey] = void 0;
	        if (leavingVNodesCache[key2] === vnode) {
	          delete leavingVNodesCache[key2];
	        }
	      };
	      leavingVNodesCache[key2] = vnode;
	      if (onLeave) {
	        callAsyncHook(onLeave, [el, done]);
	      } else {
	        done();
	      }
	    },
	    clone(vnode2) {
	      const hooks2 = resolveTransitionHooks(
	        vnode2,
	        props,
	        state,
	        instance,
	        postClone
	      );
	      if (postClone) postClone(hooks2);
	      return hooks2;
	    }
	  };
	  return hooks;
	}
	function emptyPlaceholder(vnode) {
	  if (isKeepAlive(vnode)) {
	    vnode = cloneVNode(vnode);
	    vnode.children = null;
	    return vnode;
	  }
	}
	function getKeepAliveChild(vnode) {
	  if (!isKeepAlive(vnode)) {
	    return vnode;
	  }
	  if (vnode.component) {
	    return vnode.component.subTree;
	  }
	  const { shapeFlag, children } = vnode;
	  if (children) {
	    if (shapeFlag & 16) {
	      return children[0];
	    }
	    if (shapeFlag & 32 && shared.isFunction(children.default)) {
	      return children.default();
	    }
	  }
	}
	function setTransitionHooks(vnode, hooks) {
	  if (vnode.shapeFlag & 6 && vnode.component) {
	    setTransitionHooks(vnode.component.subTree, hooks);
	  } else if (vnode.shapeFlag & 128) {
	    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
	    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
	  } else {
	    vnode.transition = hooks;
	  }
	}
	function getTransitionRawChildren(children, keepComment = false, parentKey) {
	  let ret = [];
	  let keyedFragmentCount = 0;
	  for (let i = 0; i < children.length; i++) {
	    let child = children[i];
	    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
	    if (child.type === Fragment) {
	      if (child.patchFlag & 128) keyedFragmentCount++;
	      ret = ret.concat(
	        getTransitionRawChildren(child.children, keepComment, key)
	      );
	    } else if (keepComment || child.type !== Comment) {
	      ret.push(key != null ? cloneVNode(child, { key }) : child);
	    }
	  }
	  if (keyedFragmentCount > 1) {
	    for (let i = 0; i < ret.length; i++) {
	      ret[i].patchFlag = -2;
	    }
	  }
	  return ret;
	}
	/*! #__NO_SIDE_EFFECTS__ */
	function defineComponent(options, extraOptions) {
	  return shared.isFunction(options) ? (
	     (() => shared.extend({ name: options.name }, extraOptions, { setup: options }))()
	  ) : options;
	}
	const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
	/*! #__NO_SIDE_EFFECTS__ */
	function defineAsyncComponent(source) {
	  if (shared.isFunction(source)) {
	    source = { loader: source };
	  }
	  const {
	    loader,
	    loadingComponent,
	    errorComponent,
	    delay = 200,
	    timeout,
	    suspensible = true,
	    onError: userOnError
	  } = source;
	  let pendingRequest = null;
	  let resolvedComp;
	  let retries = 0;
	  const retry = () => {
	    retries++;
	    pendingRequest = null;
	    return load();
	  };
	  const load = () => {
	    let thisRequest;
	    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
	      err = err instanceof Error ? err : new Error(String(err));
	      if (userOnError) {
	        return new Promise((resolve, reject) => {
	          const userRetry = () => resolve(retry());
	          const userFail = () => reject(err);
	          userOnError(err, userRetry, userFail, retries + 1);
	        });
	      } else {
	        throw err;
	      }
	    }).then((comp) => {
	      if (thisRequest !== pendingRequest && pendingRequest) {
	        return pendingRequest;
	      }
	      if (!comp) {
	        warn$1(
	          `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
	        );
	      }
	      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
	        comp = comp.default;
	      }
	      if (comp && !shared.isObject(comp) && !shared.isFunction(comp)) {
	        throw new Error(`Invalid async component load result: ${comp}`);
	      }
	      resolvedComp = comp;
	      return comp;
	    }));
	  };
	  return defineComponent({
	    name: "AsyncComponentWrapper",
	    __asyncLoader: load,
	    get __asyncResolved() {
	      return resolvedComp;
	    },
	    setup() {
	      const instance = currentInstance;
	      if (resolvedComp) {
	        return () => createInnerComp(resolvedComp, instance);
	      }
	      const onError = (err) => {
	        pendingRequest = null;
	        handleError(
	          err,
	          instance,
	          13,
	          !errorComponent
	        );
	      };
	      if (suspensible && instance.suspense || isInSSRComponentSetup) {
	        return load().then((comp) => {
	          return () => createInnerComp(comp, instance);
	        }).catch((err) => {
	          onError(err);
	          return () => errorComponent ? createVNode(errorComponent, {
	            error: err
	          }) : null;
	        });
	      }
	      const loaded = reactivity.ref(false);
	      const error = reactivity.ref();
	      const delayed = reactivity.ref(!!delay);
	      if (delay) {
	        setTimeout(() => {
	          delayed.value = false;
	        }, delay);
	      }
	      if (timeout != null) {
	        setTimeout(() => {
	          if (!loaded.value && !error.value) {
	            const err = new Error(
	              `Async component timed out after ${timeout}ms.`
	            );
	            onError(err);
	            error.value = err;
	          }
	        }, timeout);
	      }
	      load().then(() => {
	        loaded.value = true;
	        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
	          instance.parent.effect.dirty = true;
	          queueJob(instance.parent.update);
	        }
	      }).catch((err) => {
	        onError(err);
	        error.value = err;
	      });
	      return () => {
	        if (loaded.value && resolvedComp) {
	          return createInnerComp(resolvedComp, instance);
	        } else if (error.value && errorComponent) {
	          return createVNode(errorComponent, {
	            error: error.value
	          });
	        } else if (loadingComponent && !delayed.value) {
	          return createVNode(loadingComponent);
	        }
	      };
	    }
	  });
	}
	function createInnerComp(comp, parent) {
	  const { ref: ref2, props, children, ce } = parent.vnode;
	  const vnode = createVNode(comp, props, children);
	  vnode.ref = ref2;
	  vnode.ce = ce;
	  delete parent.vnode.ce;
	  return vnode;
	}
	const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
	const KeepAliveImpl = {
	  name: `KeepAlive`,
	  __isKeepAlive: true,
	  props: {
	    include: [String, RegExp, Array],
	    exclude: [String, RegExp, Array],
	    max: [String, Number]
	  },
	  setup(props, { slots }) {
	    const instance = getCurrentInstance();
	    const sharedContext = instance.ctx;
	    if (!sharedContext.renderer) {
	      return () => {
	        const children = slots.default && slots.default();
	        return children && children.length === 1 ? children[0] : children;
	      };
	    }
	    const cache =  new Map();
	    const keys =  new Set();
	    let current = null;
	    {
	      instance.__v_cache = cache;
	    }
	    const parentSuspense = instance.suspense;
	    const {
	      renderer: {
	        p: patch,
	        m: move,
	        um: _unmount,
	        o: { createElement }
	      }
	    } = sharedContext;
	    const storageContainer = createElement("div");
	    sharedContext.activate = (vnode, container, anchor, namespace, optimized) => {
	      const instance2 = vnode.component;
	      move(vnode, container, anchor, 0, parentSuspense);
	      patch(
	        instance2.vnode,
	        vnode,
	        container,
	        anchor,
	        instance2,
	        parentSuspense,
	        namespace,
	        vnode.slotScopeIds,
	        optimized
	      );
	      queuePostRenderEffect(() => {
	        instance2.isDeactivated = false;
	        if (instance2.a) {
	          shared.invokeArrayFns(instance2.a);
	        }
	        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
	        if (vnodeHook) {
	          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
	        }
	      }, parentSuspense);
	      {
	        devtoolsComponentAdded(instance2);
	      }
	    };
	    sharedContext.deactivate = (vnode) => {
	      const instance2 = vnode.component;
	      invalidateMount(instance2.m);
	      invalidateMount(instance2.a);
	      move(vnode, storageContainer, null, 1, parentSuspense);
	      queuePostRenderEffect(() => {
	        if (instance2.da) {
	          shared.invokeArrayFns(instance2.da);
	        }
	        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
	        if (vnodeHook) {
	          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
	        }
	        instance2.isDeactivated = true;
	      }, parentSuspense);
	      {
	        devtoolsComponentAdded(instance2);
	      }
	    };
	    function unmount(vnode) {
	      resetShapeFlag(vnode);
	      _unmount(vnode, instance, parentSuspense, true);
	    }
	    function pruneCache(filter) {
	      cache.forEach((vnode, key) => {
	        const name = getComponentName(vnode.type);
	        if (name && (!filter || !filter(name))) {
	          pruneCacheEntry(key);
	        }
	      });
	    }
	    function pruneCacheEntry(key) {
	      const cached = cache.get(key);
	      if (!current || !isSameVNodeType(cached, current)) {
	        unmount(cached);
	      } else if (current) {
	        resetShapeFlag(current);
	      }
	      cache.delete(key);
	      keys.delete(key);
	    }
	    watch(
	      () => [props.include, props.exclude],
	      ([include, exclude]) => {
	        include && pruneCache((name) => matches(include, name));
	        exclude && pruneCache((name) => !matches(exclude, name));
	      },
	      { flush: "post", deep: true }
	    );
	    let pendingCacheKey = null;
	    const cacheSubtree = () => {
	      if (pendingCacheKey != null) {
	        if (isSuspense(instance.subTree.type)) {
	          queuePostRenderEffect(() => {
	            cache.set(pendingCacheKey, getInnerChild(instance.subTree));
	          }, instance.subTree.suspense);
	        } else {
	          cache.set(pendingCacheKey, getInnerChild(instance.subTree));
	        }
	      }
	    };
	    onMounted(cacheSubtree);
	    onUpdated(cacheSubtree);
	    onBeforeUnmount(() => {
	      cache.forEach((cached) => {
	        const { subTree, suspense } = instance;
	        const vnode = getInnerChild(subTree);
	        if (cached.type === vnode.type && cached.key === vnode.key) {
	          resetShapeFlag(vnode);
	          const da = vnode.component.da;
	          da && queuePostRenderEffect(da, suspense);
	          return;
	        }
	        unmount(cached);
	      });
	    });
	    return () => {
	      pendingCacheKey = null;
	      if (!slots.default) {
	        return null;
	      }
	      const children = slots.default();
	      const rawVNode = children[0];
	      if (children.length > 1) {
	        {
	          warn$1(`KeepAlive should contain exactly one component child.`);
	        }
	        current = null;
	        return children;
	      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
	        current = null;
	        return rawVNode;
	      }
	      let vnode = getInnerChild(rawVNode);
	      const comp = vnode.type;
	      const name = getComponentName(
	        isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
	      );
	      const { include, exclude, max } = props;
	      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
	        current = vnode;
	        return rawVNode;
	      }
	      const key = vnode.key == null ? comp : vnode.key;
	      const cachedVNode = cache.get(key);
	      if (vnode.el) {
	        vnode = cloneVNode(vnode);
	        if (rawVNode.shapeFlag & 128) {
	          rawVNode.ssContent = vnode;
	        }
	      }
	      pendingCacheKey = key;
	      if (cachedVNode) {
	        vnode.el = cachedVNode.el;
	        vnode.component = cachedVNode.component;
	        if (vnode.transition) {
	          setTransitionHooks(vnode, vnode.transition);
	        }
	        vnode.shapeFlag |= 512;
	        keys.delete(key);
	        keys.add(key);
	      } else {
	        keys.add(key);
	        if (max && keys.size > parseInt(max, 10)) {
	          pruneCacheEntry(keys.values().next().value);
	        }
	      }
	      vnode.shapeFlag |= 256;
	      current = vnode;
	      return isSuspense(rawVNode.type) ? rawVNode : vnode;
	    };
	  }
	};
	const KeepAlive = KeepAliveImpl;
	function matches(pattern, name) {
	  if (shared.isArray(pattern)) {
	    return pattern.some((p) => matches(p, name));
	  } else if (shared.isString(pattern)) {
	    return pattern.split(",").includes(name);
	  } else if (shared.isRegExp(pattern)) {
	    return pattern.test(name);
	  }
	  return false;
	}
	function onActivated(hook, target) {
	  registerKeepAliveHook(hook, "a", target);
	}
	function onDeactivated(hook, target) {
	  registerKeepAliveHook(hook, "da", target);
	}
	function registerKeepAliveHook(hook, type, target = currentInstance) {
	  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
	    let current = target;
	    while (current) {
	      if (current.isDeactivated) {
	        return;
	      }
	      current = current.parent;
	    }
	    return hook();
	  });
	  injectHook(type, wrappedHook, target);
	  if (target) {
	    let current = target.parent;
	    while (current && current.parent) {
	      if (isKeepAlive(current.parent.vnode)) {
	        injectToKeepAliveRoot(wrappedHook, type, target, current);
	      }
	      current = current.parent;
	    }
	  }
	}
	function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
	  const injected = injectHook(
	    type,
	    hook,
	    keepAliveRoot,
	    true
	  );
	  onUnmounted(() => {
	    shared.remove(keepAliveRoot[type], injected);
	  }, target);
	}
	function resetShapeFlag(vnode) {
	  vnode.shapeFlag &= ~256;
	  vnode.shapeFlag &= ~512;
	}
	function getInnerChild(vnode) {
	  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
	}
	function injectHook(type, hook, target = currentInstance, prepend = false) {
	  if (target) {
	    const hooks = target[type] || (target[type] = []);
	    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
	      reactivity.pauseTracking();
	      const reset = setCurrentInstance(target);
	      const res = callWithAsyncErrorHandling(hook, target, type, args);
	      reset();
	      reactivity.resetTracking();
	      return res;
	    });
	    if (prepend) {
	      hooks.unshift(wrappedHook);
	    } else {
	      hooks.push(wrappedHook);
	    }
	    return wrappedHook;
	  } else {
	    const apiName = shared.toHandlerKey(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
	    warn$1(
	      `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle hooks before the first await statement.` )
	    );
	  }
	}
	const createHook = (lifecycle) => (hook, target = currentInstance) => {
	  if (!isInSSRComponentSetup || lifecycle === "sp") {
	    injectHook(lifecycle, (...args) => hook(...args), target);
	  }
	};
	const onBeforeMount = createHook("bm");
	const onMounted = createHook("m");
	const onBeforeUpdate = createHook("bu");
	const onUpdated = createHook("u");
	const onBeforeUnmount = createHook("bum");
	const onUnmounted = createHook("um");
	const onServerPrefetch = createHook("sp");
	const onRenderTriggered = createHook(
	  "rtg"
	);
	const onRenderTracked = createHook(
	  "rtc"
	);
	function onErrorCaptured(hook, target = currentInstance) {
	  injectHook("ec", hook, target);
	}
	const COMPONENTS = "components";
	const DIRECTIVES = "directives";
	function resolveComponent(name, maybeSelfReference) {
	  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
	}
	const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
	function resolveDynamicComponent(component) {
	  if (shared.isString(component)) {
	    return resolveAsset(COMPONENTS, component, false) || component;
	  } else {
	    return component || NULL_DYNAMIC_COMPONENT;
	  }
	}
	function resolveDirective(name) {
	  return resolveAsset(DIRECTIVES, name);
	}
	function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
	  const instance = currentRenderingInstance || currentInstance;
	  if (instance) {
	    const Component = instance.type;
	    if (type === COMPONENTS) {
	      const selfName = getComponentName(
	        Component,
	        false
	      );
	      if (selfName && (selfName === name || selfName === shared.camelize(name) || selfName === shared.capitalize(shared.camelize(name)))) {
	        return Component;
	      }
	    }
	    const res = (
	      resolve(instance[type] || Component[type], name) ||
	      resolve(instance.appContext[type], name)
	    );
	    if (!res && maybeSelfReference) {
	      return Component;
	    }
	    if (warnMissing && !res) {
	      const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
	      warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
	    }
	    return res;
	  } else {
	    warn$1(
	      `resolve${shared.capitalize(type.slice(0, -1))} can only be used in render() or setup().`
	    );
	  }
	}
	function resolve(registry, name) {
	  return registry && (registry[name] || registry[shared.camelize(name)] || registry[shared.capitalize(shared.camelize(name))]);
	}
	function renderList(source, renderItem, cache, index) {
	  let ret;
	  const cached = cache && cache[index];
	  if (shared.isArray(source) || shared.isString(source)) {
	    ret = new Array(source.length);
	    for (let i = 0, l = source.length; i < l; i++) {
	      ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
	    }
	  } else if (typeof source === "number") {
	    if (!Number.isInteger(source)) {
	      warn$1(`The v-for range expect an integer value but got ${source}.`);
	    }
	    ret = new Array(source);
	    for (let i = 0; i < source; i++) {
	      ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
	    }
	  } else if (shared.isObject(source)) {
	    if (source[Symbol.iterator]) {
	      ret = Array.from(
	        source,
	        (item, i) => renderItem(item, i, void 0, cached && cached[i])
	      );
	    } else {
	      const keys = Object.keys(source);
	      ret = new Array(keys.length);
	      for (let i = 0, l = keys.length; i < l; i++) {
	        const key = keys[i];
	        ret[i] = renderItem(source[key], key, i, cached && cached[i]);
	      }
	    }
	  } else {
	    ret = [];
	  }
	  if (cache) {
	    cache[index] = ret;
	  }
	  return ret;
	}
	function createSlots(slots, dynamicSlots) {
	  for (let i = 0; i < dynamicSlots.length; i++) {
	    const slot = dynamicSlots[i];
	    if (shared.isArray(slot)) {
	      for (let j = 0; j < slot.length; j++) {
	        slots[slot[j].name] = slot[j].fn;
	      }
	    } else if (slot) {
	      slots[slot.name] = slot.key ? (...args) => {
	        const res = slot.fn(...args);
	        if (res) res.key = slot.key;
	        return res;
	      } : slot.fn;
	    }
	  }
	  return slots;
	}
	function renderSlot(slots, name, props = {}, fallback, noSlotted) {
	  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
	    if (name !== "default") props.name = name;
	    return createVNode("slot", props, fallback && fallback());
	  }
	  let slot = slots[name];
	  if (slot && slot.length > 1) {
	    warn$1(
	      `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
	    );
	    slot = () => [];
	  }
	  if (slot && slot._c) {
	    slot._d = false;
	  }
	  openBlock();
	  const validSlotContent = slot && ensureValidVNode(slot(props));
	  const rendered = createBlock(
	    Fragment,
	    {
	      key: (props.key ||
	      validSlotContent && validSlotContent.key || `_${name}`) +
	      (!validSlotContent && fallback ? "_fb" : "")
	    },
	    validSlotContent || (fallback ? fallback() : []),
	    validSlotContent && slots._ === 1 ? 64 : -2
	  );
	  if (!noSlotted && rendered.scopeId) {
	    rendered.slotScopeIds = [rendered.scopeId + "-s"];
	  }
	  if (slot && slot._c) {
	    slot._d = true;
	  }
	  return rendered;
	}
	function ensureValidVNode(vnodes) {
	  return vnodes.some((child) => {
	    if (!isVNode(child)) return true;
	    if (child.type === Comment) return false;
	    if (child.type === Fragment && !ensureValidVNode(child.children))
	      return false;
	    return true;
	  }) ? vnodes : null;
	}
	function toHandlers(obj, preserveCaseIfNecessary) {
	  const ret = {};
	  if (!shared.isObject(obj)) {
	    warn$1(`v-on with no argument expects an object value.`);
	    return ret;
	  }
	  for (const key in obj) {
	    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : shared.toHandlerKey(key)] = obj[key];
	  }
	  return ret;
	}
	const getPublicInstance = (i) => {
	  if (!i) return null;
	  if (isStatefulComponent(i)) return getComponentPublicInstance(i);
	  return getPublicInstance(i.parent);
	};
	const publicPropertiesMap = (
	   shared.extend( Object.create(null), {
	    $: (i) => i,
	    $el: (i) => i.vnode.el,
	    $data: (i) => i.data,
	    $props: (i) => reactivity.shallowReadonly(i.props) ,
	    $attrs: (i) => reactivity.shallowReadonly(i.attrs) ,
	    $slots: (i) => reactivity.shallowReadonly(i.slots) ,
	    $refs: (i) => reactivity.shallowReadonly(i.refs) ,
	    $parent: (i) => getPublicInstance(i.parent),
	    $root: (i) => getPublicInstance(i.root),
	    $emit: (i) => i.emit,
	    $options: (i) => resolveMergedOptions(i) ,
	    $forceUpdate: (i) => i.f || (i.f = () => {
	      i.effect.dirty = true;
	      queueJob(i.update);
	    }),
	    $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
	    $watch: (i) => instanceWatch.bind(i)
	  })
	);
	const isReservedPrefix = (key) => key === "_" || key === "$";
	const hasSetupBinding = (state, key) => state !== shared.EMPTY_OBJ && !state.__isScriptSetup && shared.hasOwn(state, key);
	const PublicInstanceProxyHandlers = {
	  get({ _: instance }, key) {
	    if (key === "__v_skip") {
	      return true;
	    }
	    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
	    if (key === "__isVue") {
	      return true;
	    }
	    let normalizedProps;
	    if (key[0] !== "$") {
	      const n = accessCache[key];
	      if (n !== void 0) {
	        switch (n) {
	          case 1 :
	            return setupState[key];
	          case 2 :
	            return data[key];
	          case 4 :
	            return ctx[key];
	          case 3 :
	            return props[key];
	        }
	      } else if (hasSetupBinding(setupState, key)) {
	        accessCache[key] = 1 ;
	        return setupState[key];
	      } else if (data !== shared.EMPTY_OBJ && shared.hasOwn(data, key)) {
	        accessCache[key] = 2 ;
	        return data[key];
	      } else if (
	        (normalizedProps = instance.propsOptions[0]) && shared.hasOwn(normalizedProps, key)
	      ) {
	        accessCache[key] = 3 ;
	        return props[key];
	      } else if (ctx !== shared.EMPTY_OBJ && shared.hasOwn(ctx, key)) {
	        accessCache[key] = 4 ;
	        return ctx[key];
	      } else if (shouldCacheAccess) {
	        accessCache[key] = 0 ;
	      }
	    }
	    const publicGetter = publicPropertiesMap[key];
	    let cssModule, globalProperties;
	    if (publicGetter) {
	      if (key === "$attrs") {
	        reactivity.track(instance.attrs, "get", "");
	        markAttrsAccessed();
	      } else if (key === "$slots") {
	        reactivity.track(instance, "get", key);
	      }
	      return publicGetter(instance);
	    } else if (
	      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
	    ) {
	      return cssModule;
	    } else if (ctx !== shared.EMPTY_OBJ && shared.hasOwn(ctx, key)) {
	      accessCache[key] = 4 ;
	      return ctx[key];
	    } else if (
	      globalProperties = appContext.config.globalProperties, shared.hasOwn(globalProperties, key)
	    ) {
	      {
	        return globalProperties[key];
	      }
	    } else if (currentRenderingInstance && (!shared.isString(key) ||
	    key.indexOf("__v") !== 0)) {
	      if (data !== shared.EMPTY_OBJ && isReservedPrefix(key[0]) && shared.hasOwn(data, key)) {
	        warn$1(
	          `Property ${JSON.stringify(
	            key
	          )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
	        );
	      } else if (instance === currentRenderingInstance) {
	        warn$1(
	          `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
	        );
	      }
	    }
	  },
	  set({ _: instance }, key, value) {
	    const { data, setupState, ctx } = instance;
	    if (hasSetupBinding(setupState, key)) {
	      setupState[key] = value;
	      return true;
	    } else if (setupState.__isScriptSetup && shared.hasOwn(setupState, key)) {
	      warn$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
	      return false;
	    } else if (data !== shared.EMPTY_OBJ && shared.hasOwn(data, key)) {
	      data[key] = value;
	      return true;
	    } else if (shared.hasOwn(instance.props, key)) {
	      warn$1(`Attempting to mutate prop "${key}". Props are readonly.`);
	      return false;
	    }
	    if (key[0] === "$" && key.slice(1) in instance) {
	      warn$1(
	        `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
	      );
	      return false;
	    } else {
	      if (key in instance.appContext.config.globalProperties) {
	        Object.defineProperty(ctx, key, {
	          enumerable: true,
	          configurable: true,
	          value
	        });
	      } else {
	        ctx[key] = value;
	      }
	    }
	    return true;
	  },
	  has({
	    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
	  }, key) {
	    let normalizedProps;
	    return !!accessCache[key] || data !== shared.EMPTY_OBJ && shared.hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && shared.hasOwn(normalizedProps, key) || shared.hasOwn(ctx, key) || shared.hasOwn(publicPropertiesMap, key) || shared.hasOwn(appContext.config.globalProperties, key);
	  },
	  defineProperty(target, key, descriptor) {
	    if (descriptor.get != null) {
	      target._.accessCache[key] = 0;
	    } else if (shared.hasOwn(descriptor, "value")) {
	      this.set(target, key, descriptor.value, null);
	    }
	    return Reflect.defineProperty(target, key, descriptor);
	  }
	};
	{
	  PublicInstanceProxyHandlers.ownKeys = (target) => {
	    warn$1(
	      `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
	    );
	    return Reflect.ownKeys(target);
	  };
	}
	const RuntimeCompiledPublicInstanceProxyHandlers =  shared.extend(
	  {},
	  PublicInstanceProxyHandlers,
	  {
	    get(target, key) {
	      if (key === Symbol.unscopables) {
	        return;
	      }
	      return PublicInstanceProxyHandlers.get(target, key, target);
	    },
	    has(_, key) {
	      const has = key[0] !== "_" && !shared.isGloballyAllowed(key);
	      if (!has && PublicInstanceProxyHandlers.has(_, key)) {
	        warn$1(
	          `Property ${JSON.stringify(
	            key
	          )} should not start with _ which is a reserved prefix for Vue internals.`
	        );
	      }
	      return has;
	    }
	  }
	);
	function createDevRenderContext(instance) {
	  const target = {};
	  Object.defineProperty(target, `_`, {
	    configurable: true,
	    enumerable: false,
	    get: () => instance
	  });
	  Object.keys(publicPropertiesMap).forEach((key) => {
	    Object.defineProperty(target, key, {
	      configurable: true,
	      enumerable: false,
	      get: () => publicPropertiesMap[key](instance),
	      set: shared.NOOP
	    });
	  });
	  return target;
	}
	function exposePropsOnRenderContext(instance) {
	  const {
	    ctx,
	    propsOptions: [propsOptions]
	  } = instance;
	  if (propsOptions) {
	    Object.keys(propsOptions).forEach((key) => {
	      Object.defineProperty(ctx, key, {
	        enumerable: true,
	        configurable: true,
	        get: () => instance.props[key],
	        set: shared.NOOP
	      });
	    });
	  }
	}
	function exposeSetupStateOnRenderContext(instance) {
	  const { ctx, setupState } = instance;
	  Object.keys(reactivity.toRaw(setupState)).forEach((key) => {
	    if (!setupState.__isScriptSetup) {
	      if (isReservedPrefix(key[0])) {
	        warn$1(
	          `setup() return property ${JSON.stringify(
	            key
	          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
	        );
	        return;
	      }
	      Object.defineProperty(ctx, key, {
	        enumerable: true,
	        configurable: true,
	        get: () => setupState[key],
	        set: shared.NOOP
	      });
	    }
	  });
	}
	const warnRuntimeUsage = (method) => warn$1(
	  `${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`
	);
	function defineProps() {
	  {
	    warnRuntimeUsage(`defineProps`);
	  }
	  return null;
	}
	function defineEmits() {
	  {
	    warnRuntimeUsage(`defineEmits`);
	  }
	  return null;
	}
	function defineExpose(exposed) {
	  {
	    warnRuntimeUsage(`defineExpose`);
	  }
	}
	function defineOptions(options) {
	  {
	    warnRuntimeUsage(`defineOptions`);
	  }
	}
	function defineSlots() {
	  {
	    warnRuntimeUsage(`defineSlots`);
	  }
	  return null;
	}
	function defineModel() {
	  {
	    warnRuntimeUsage("defineModel");
	  }
	}
	function withDefaults(props, defaults) {
	  {
	    warnRuntimeUsage(`withDefaults`);
	  }
	  return null;
	}
	function useSlots() {
	  return getContext().slots;
	}
	function useAttrs() {
	  return getContext().attrs;
	}
	function getContext() {
	  const i = getCurrentInstance();
	  if (!i) {
	    warn$1(`useContext() called without active instance.`);
	  }
	  return i.setupContext || (i.setupContext = createSetupContext(i));
	}
	function normalizePropsOrEmits(props) {
	  return shared.isArray(props) ? props.reduce(
	    (normalized, p) => (normalized[p] = null, normalized),
	    {}
	  ) : props;
	}
	function mergeDefaults(raw, defaults) {
	  const props = normalizePropsOrEmits(raw);
	  for (const key in defaults) {
	    if (key.startsWith("__skip")) continue;
	    let opt = props[key];
	    if (opt) {
	      if (shared.isArray(opt) || shared.isFunction(opt)) {
	        opt = props[key] = { type: opt, default: defaults[key] };
	      } else {
	        opt.default = defaults[key];
	      }
	    } else if (opt === null) {
	      opt = props[key] = { default: defaults[key] };
	    } else {
	      warn$1(`props default key "${key}" has no corresponding declaration.`);
	    }
	    if (opt && defaults[`__skip_${key}`]) {
	      opt.skipFactory = true;
	    }
	  }
	  return props;
	}
	function mergeModels(a, b) {
	  if (!a || !b) return a || b;
	  if (shared.isArray(a) && shared.isArray(b)) return a.concat(b);
	  return shared.extend({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
	}
	function createPropsRestProxy(props, excludedKeys) {
	  const ret = {};
	  for (const key in props) {
	    if (!excludedKeys.includes(key)) {
	      Object.defineProperty(ret, key, {
	        enumerable: true,
	        get: () => props[key]
	      });
	    }
	  }
	  return ret;
	}
	function withAsyncContext(getAwaitable) {
	  const ctx = getCurrentInstance();
	  if (!ctx) {
	    warn$1(
	      `withAsyncContext called without active current instance. This is likely a bug.`
	    );
	  }
	  let awaitable = getAwaitable();
	  unsetCurrentInstance();
	  if (shared.isPromise(awaitable)) {
	    awaitable = awaitable.catch((e) => {
	      setCurrentInstance(ctx);
	      throw e;
	    });
	  }
	  return [awaitable, () => setCurrentInstance(ctx)];
	}
	function createDuplicateChecker() {
	  const cache =  Object.create(null);
	  return (type, key) => {
	    if (cache[key]) {
	      warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
	    } else {
	      cache[key] = type;
	    }
	  };
	}
	let shouldCacheAccess = true;
	function applyOptions(instance) {
	  const options = resolveMergedOptions(instance);
	  const publicThis = instance.proxy;
	  const ctx = instance.ctx;
	  shouldCacheAccess = false;
	  if (options.beforeCreate) {
	    callHook(options.beforeCreate, instance, "bc");
	  }
	  const {
	    data: dataOptions,
	    computed: computedOptions,
	    methods,
	    watch: watchOptions,
	    provide: provideOptions,
	    inject: injectOptions,
	    created,
	    beforeMount,
	    mounted,
	    beforeUpdate,
	    updated,
	    activated,
	    deactivated,
	    beforeDestroy,
	    beforeUnmount,
	    destroyed,
	    unmounted,
	    render,
	    renderTracked,
	    renderTriggered,
	    errorCaptured,
	    serverPrefetch,
	    expose,
	    inheritAttrs,
	    components,
	    directives,
	    filters
	  } = options;
	  const checkDuplicateProperties = createDuplicateChecker() ;
	  {
	    const [propsOptions] = instance.propsOptions;
	    if (propsOptions) {
	      for (const key in propsOptions) {
	        checkDuplicateProperties("Props" , key);
	      }
	    }
	  }
	  if (injectOptions) {
	    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
	  }
	  if (methods) {
	    for (const key in methods) {
	      const methodHandler = methods[key];
	      if (shared.isFunction(methodHandler)) {
	        {
	          Object.defineProperty(ctx, key, {
	            value: methodHandler.bind(publicThis),
	            configurable: true,
	            enumerable: true,
	            writable: true
	          });
	        }
	        {
	          checkDuplicateProperties("Methods" , key);
	        }
	      } else {
	        warn$1(
	          `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
	        );
	      }
	    }
	  }
	  if (dataOptions) {
	    if (!shared.isFunction(dataOptions)) {
	      warn$1(
	        `The data option must be a function. Plain object usage is no longer supported.`
	      );
	    }
	    const data = dataOptions.call(publicThis, publicThis);
	    if (shared.isPromise(data)) {
	      warn$1(
	        `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
	      );
	    }
	    if (!shared.isObject(data)) {
	      warn$1(`data() should return an object.`);
	    } else {
	      instance.data = reactivity.reactive(data);
	      {
	        for (const key in data) {
	          checkDuplicateProperties("Data" , key);
	          if (!isReservedPrefix(key[0])) {
	            Object.defineProperty(ctx, key, {
	              configurable: true,
	              enumerable: true,
	              get: () => data[key],
	              set: shared.NOOP
	            });
	          }
	        }
	      }
	    }
	  }
	  shouldCacheAccess = true;
	  if (computedOptions) {
	    for (const key in computedOptions) {
	      const opt = computedOptions[key];
	      const get = shared.isFunction(opt) ? opt.bind(publicThis, publicThis) : shared.isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : shared.NOOP;
	      if (get === shared.NOOP) {
	        warn$1(`Computed property "${key}" has no getter.`);
	      }
	      const set = !shared.isFunction(opt) && shared.isFunction(opt.set) ? opt.set.bind(publicThis) : () => {
	        warn$1(
	          `Write operation failed: computed property "${key}" is readonly.`
	        );
	      } ;
	      const c = computed({
	        get,
	        set
	      });
	      Object.defineProperty(ctx, key, {
	        enumerable: true,
	        configurable: true,
	        get: () => c.value,
	        set: (v) => c.value = v
	      });
	      {
	        checkDuplicateProperties("Computed" , key);
	      }
	    }
	  }
	  if (watchOptions) {
	    for (const key in watchOptions) {
	      createWatcher(watchOptions[key], ctx, publicThis, key);
	    }
	  }
	  if (provideOptions) {
	    const provides = shared.isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
	    Reflect.ownKeys(provides).forEach((key) => {
	      provide(key, provides[key]);
	    });
	  }
	  if (created) {
	    callHook(created, instance, "c");
	  }
	  function registerLifecycleHook(register, hook) {
	    if (shared.isArray(hook)) {
	      hook.forEach((_hook) => register(_hook.bind(publicThis)));
	    } else if (hook) {
	      register(hook.bind(publicThis));
	    }
	  }
	  registerLifecycleHook(onBeforeMount, beforeMount);
	  registerLifecycleHook(onMounted, mounted);
	  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
	  registerLifecycleHook(onUpdated, updated);
	  registerLifecycleHook(onActivated, activated);
	  registerLifecycleHook(onDeactivated, deactivated);
	  registerLifecycleHook(onErrorCaptured, errorCaptured);
	  registerLifecycleHook(onRenderTracked, renderTracked);
	  registerLifecycleHook(onRenderTriggered, renderTriggered);
	  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
	  registerLifecycleHook(onUnmounted, unmounted);
	  registerLifecycleHook(onServerPrefetch, serverPrefetch);
	  if (shared.isArray(expose)) {
	    if (expose.length) {
	      const exposed = instance.exposed || (instance.exposed = {});
	      expose.forEach((key) => {
	        Object.defineProperty(exposed, key, {
	          get: () => publicThis[key],
	          set: (val) => publicThis[key] = val
	        });
	      });
	    } else if (!instance.exposed) {
	      instance.exposed = {};
	    }
	  }
	  if (render && instance.render === shared.NOOP) {
	    instance.render = render;
	  }
	  if (inheritAttrs != null) {
	    instance.inheritAttrs = inheritAttrs;
	  }
	  if (components) instance.components = components;
	  if (directives) instance.directives = directives;
	}
	function resolveInjections(injectOptions, ctx, checkDuplicateProperties = shared.NOOP) {
	  if (shared.isArray(injectOptions)) {
	    injectOptions = normalizeInject(injectOptions);
	  }
	  for (const key in injectOptions) {
	    const opt = injectOptions[key];
	    let injected;
	    if (shared.isObject(opt)) {
	      if ("default" in opt) {
	        injected = inject(
	          opt.from || key,
	          opt.default,
	          true
	        );
	      } else {
	        injected = inject(opt.from || key);
	      }
	    } else {
	      injected = inject(opt);
	    }
	    if (reactivity.isRef(injected)) {
	      Object.defineProperty(ctx, key, {
	        enumerable: true,
	        configurable: true,
	        get: () => injected.value,
	        set: (v) => injected.value = v
	      });
	    } else {
	      ctx[key] = injected;
	    }
	    {
	      checkDuplicateProperties("Inject" , key);
	    }
	  }
	}
	function callHook(hook, instance, type) {
	  callWithAsyncErrorHandling(
	    shared.isArray(hook) ? hook.map((h) => h.bind(instance.proxy)) : hook.bind(instance.proxy),
	    instance,
	    type
	  );
	}
	function createWatcher(raw, ctx, publicThis, key) {
	  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
	  if (shared.isString(raw)) {
	    const handler = ctx[raw];
	    if (shared.isFunction(handler)) {
	      watch(getter, handler);
	    } else {
	      warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
	    }
	  } else if (shared.isFunction(raw)) {
	    watch(getter, raw.bind(publicThis));
	  } else if (shared.isObject(raw)) {
	    if (shared.isArray(raw)) {
	      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
	    } else {
	      const handler = shared.isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
	      if (shared.isFunction(handler)) {
	        watch(getter, handler, raw);
	      } else {
	        warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
	      }
	    }
	  } else {
	    warn$1(`Invalid watch option: "${key}"`, raw);
	  }
	}
	function resolveMergedOptions(instance) {
	  const base = instance.type;
	  const { mixins, extends: extendsOptions } = base;
	  const {
	    mixins: globalMixins,
	    optionsCache: cache,
	    config: { optionMergeStrategies }
	  } = instance.appContext;
	  const cached = cache.get(base);
	  let resolved;
	  if (cached) {
	    resolved = cached;
	  } else if (!globalMixins.length && !mixins && !extendsOptions) {
	    {
	      resolved = base;
	    }
	  } else {
	    resolved = {};
	    if (globalMixins.length) {
	      globalMixins.forEach(
	        (m) => mergeOptions(resolved, m, optionMergeStrategies, true)
	      );
	    }
	    mergeOptions(resolved, base, optionMergeStrategies);
	  }
	  if (shared.isObject(base)) {
	    cache.set(base, resolved);
	  }
	  return resolved;
	}
	function mergeOptions(to, from, strats, asMixin = false) {
	  const { mixins, extends: extendsOptions } = from;
	  if (extendsOptions) {
	    mergeOptions(to, extendsOptions, strats, true);
	  }
	  if (mixins) {
	    mixins.forEach(
	      (m) => mergeOptions(to, m, strats, true)
	    );
	  }
	  for (const key in from) {
	    if (asMixin && key === "expose") {
	      warn$1(
	        `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
	      );
	    } else {
	      const strat = internalOptionMergeStrats[key] || strats && strats[key];
	      to[key] = strat ? strat(to[key], from[key]) : from[key];
	    }
	  }
	  return to;
	}
	const internalOptionMergeStrats = {
	  data: mergeDataFn,
	  props: mergeEmitsOrPropsOptions,
	  emits: mergeEmitsOrPropsOptions,
	  methods: mergeObjectOptions,
	  computed: mergeObjectOptions,
	  beforeCreate: mergeAsArray,
	  created: mergeAsArray,
	  beforeMount: mergeAsArray,
	  mounted: mergeAsArray,
	  beforeUpdate: mergeAsArray,
	  updated: mergeAsArray,
	  beforeDestroy: mergeAsArray,
	  beforeUnmount: mergeAsArray,
	  destroyed: mergeAsArray,
	  unmounted: mergeAsArray,
	  activated: mergeAsArray,
	  deactivated: mergeAsArray,
	  errorCaptured: mergeAsArray,
	  serverPrefetch: mergeAsArray,
	  components: mergeObjectOptions,
	  directives: mergeObjectOptions,
	  watch: mergeWatchOptions,
	  provide: mergeDataFn,
	  inject: mergeInject
	};
	function mergeDataFn(to, from) {
	  if (!from) {
	    return to;
	  }
	  if (!to) {
	    return from;
	  }
	  return function mergedDataFn() {
	    return (shared.extend)(
	      shared.isFunction(to) ? to.call(this, this) : to,
	      shared.isFunction(from) ? from.call(this, this) : from
	    );
	  };
	}
	function mergeInject(to, from) {
	  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
	}
	function normalizeInject(raw) {
	  if (shared.isArray(raw)) {
	    const res = {};
	    for (let i = 0; i < raw.length; i++) {
	      res[raw[i]] = raw[i];
	    }
	    return res;
	  }
	  return raw;
	}
	function mergeAsArray(to, from) {
	  return to ? [...new Set([].concat(to, from))] : from;
	}
	function mergeObjectOptions(to, from) {
	  return to ? shared.extend( Object.create(null), to, from) : from;
	}
	function mergeEmitsOrPropsOptions(to, from) {
	  if (to) {
	    if (shared.isArray(to) && shared.isArray(from)) {
	      return [... new Set([...to, ...from])];
	    }
	    return shared.extend(
	       Object.create(null),
	      normalizePropsOrEmits(to),
	      normalizePropsOrEmits(from != null ? from : {})
	    );
	  } else {
	    return from;
	  }
	}
	function mergeWatchOptions(to, from) {
	  if (!to) return from;
	  if (!from) return to;
	  const merged = shared.extend( Object.create(null), to);
	  for (const key in from) {
	    merged[key] = mergeAsArray(to[key], from[key]);
	  }
	  return merged;
	}
	function createAppContext() {
	  return {
	    app: null,
	    config: {
	      isNativeTag: shared.NO,
	      performance: false,
	      globalProperties: {},
	      optionMergeStrategies: {},
	      errorHandler: void 0,
	      warnHandler: void 0,
	      compilerOptions: {}
	    },
	    mixins: [],
	    components: {},
	    directives: {},
	    provides:  Object.create(null),
	    optionsCache:  new WeakMap(),
	    propsCache:  new WeakMap(),
	    emitsCache:  new WeakMap()
	  };
	}
	let uid$1 = 0;
	function createAppAPI(render, hydrate) {
	  return function createApp(rootComponent, rootProps = null) {
	    if (!shared.isFunction(rootComponent)) {
	      rootComponent = shared.extend({}, rootComponent);
	    }
	    if (rootProps != null && !shared.isObject(rootProps)) {
	      warn$1(`root props passed to app.mount() must be an object.`);
	      rootProps = null;
	    }
	    const context = createAppContext();
	    const installedPlugins =  new WeakSet();
	    let isMounted = false;
	    const app = context.app = {
	      _uid: uid$1++,
	      _component: rootComponent,
	      _props: rootProps,
	      _container: null,
	      _context: context,
	      _instance: null,
	      version,
	      get config() {
	        return context.config;
	      },
	      set config(v) {
	        {
	          warn$1(
	            `app.config cannot be replaced. Modify individual options instead.`
	          );
	        }
	      },
	      use(plugin, ...options) {
	        if (installedPlugins.has(plugin)) {
	          warn$1(`Plugin has already been applied to target app.`);
	        } else if (plugin && shared.isFunction(plugin.install)) {
	          installedPlugins.add(plugin);
	          plugin.install(app, ...options);
	        } else if (shared.isFunction(plugin)) {
	          installedPlugins.add(plugin);
	          plugin(app, ...options);
	        } else {
	          warn$1(
	            `A plugin must either be a function or an object with an "install" function.`
	          );
	        }
	        return app;
	      },
	      mixin(mixin) {
	        {
	          if (!context.mixins.includes(mixin)) {
	            context.mixins.push(mixin);
	          } else {
	            warn$1(
	              "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
	            );
	          }
	        }
	        return app;
	      },
	      component(name, component) {
	        {
	          validateComponentName(name, context.config);
	        }
	        if (!component) {
	          return context.components[name];
	        }
	        if (context.components[name]) {
	          warn$1(`Component "${name}" has already been registered in target app.`);
	        }
	        context.components[name] = component;
	        return app;
	      },
	      directive(name, directive) {
	        {
	          validateDirectiveName(name);
	        }
	        if (!directive) {
	          return context.directives[name];
	        }
	        if (context.directives[name]) {
	          warn$1(`Directive "${name}" has already been registered in target app.`);
	        }
	        context.directives[name] = directive;
	        return app;
	      },
	      mount(rootContainer, isHydrate, namespace) {
	        if (!isMounted) {
	          if (rootContainer.__vue_app__) {
	            warn$1(
	              `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
	            );
	          }
	          const vnode = createVNode(rootComponent, rootProps);
	          vnode.appContext = context;
	          if (namespace === true) {
	            namespace = "svg";
	          } else if (namespace === false) {
	            namespace = void 0;
	          }
	          {
	            context.reload = () => {
	              render(
	                cloneVNode(vnode),
	                rootContainer,
	                namespace
	              );
	            };
	          }
	          if (isHydrate && hydrate) {
	            hydrate(vnode, rootContainer);
	          } else {
	            render(vnode, rootContainer, namespace);
	          }
	          isMounted = true;
	          app._container = rootContainer;
	          rootContainer.__vue_app__ = app;
	          {
	            app._instance = vnode.component;
	            devtoolsInitApp(app, version);
	          }
	          return getComponentPublicInstance(vnode.component);
	        } else {
	          warn$1(
	            `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
	          );
	        }
	      },
	      unmount() {
	        if (isMounted) {
	          render(null, app._container);
	          {
	            app._instance = null;
	            devtoolsUnmountApp(app);
	          }
	          delete app._container.__vue_app__;
	        } else {
	          warn$1(`Cannot unmount an app that is not mounted.`);
	        }
	      },
	      provide(key, value) {
	        if (key in context.provides) {
	          warn$1(
	            `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
	          );
	        }
	        context.provides[key] = value;
	        return app;
	      },
	      runWithContext(fn) {
	        const lastApp = currentApp;
	        currentApp = app;
	        try {
	          return fn();
	        } finally {
	          currentApp = lastApp;
	        }
	      }
	    };
	    return app;
	  };
	}
	let currentApp = null;
	function provide(key, value) {
	  if (!currentInstance) {
	    {
	      warn$1(`provide() can only be used inside setup().`);
	    }
	  } else {
	    let provides = currentInstance.provides;
	    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
	    if (parentProvides === provides) {
	      provides = currentInstance.provides = Object.create(parentProvides);
	    }
	    provides[key] = value;
	  }
	}
	function inject(key, defaultValue, treatDefaultAsFactory = false) {
	  const instance = currentInstance || currentRenderingInstance;
	  if (instance || currentApp) {
	    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
	    if (provides && key in provides) {
	      return provides[key];
	    } else if (arguments.length > 1) {
	      return treatDefaultAsFactory && shared.isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
	    } else {
	      warn$1(`injection "${String(key)}" not found.`);
	    }
	  } else {
	    warn$1(`inject() can only be used inside setup() or functional components.`);
	  }
	}
	function hasInjectionContext() {
	  return !!(currentInstance || currentRenderingInstance || currentApp);
	}
	const internalObjectProto = {};
	const createInternalObject = () => Object.create(internalObjectProto);
	const isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;
	function initProps(instance, rawProps, isStateful, isSSR = false) {
	  const props = {};
	  const attrs = createInternalObject();
	  instance.propsDefaults =  Object.create(null);
	  setFullProps(instance, rawProps, props, attrs);
	  for (const key in instance.propsOptions[0]) {
	    if (!(key in props)) {
	      props[key] = void 0;
	    }
	  }
	  {
	    validateProps(rawProps || {}, props, instance);
	  }
	  if (isStateful) {
	    instance.props = isSSR ? props : reactivity.shallowReactive(props);
	  } else {
	    if (!instance.type.props) {
	      instance.props = attrs;
	    } else {
	      instance.props = props;
	    }
	  }
	  instance.attrs = attrs;
	}
	function isInHmrContext(instance) {
	  while (instance) {
	    if (instance.type.__hmrId) return true;
	    instance = instance.parent;
	  }
	}
	function updateProps(instance, rawProps, rawPrevProps, optimized) {
	  const {
	    props,
	    attrs,
	    vnode: { patchFlag }
	  } = instance;
	  const rawCurrentProps = reactivity.toRaw(props);
	  const [options] = instance.propsOptions;
	  let hasAttrsChanged = false;
	  if (
	    !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
	  ) {
	    if (patchFlag & 8) {
	      const propsToUpdate = instance.vnode.dynamicProps;
	      for (let i = 0; i < propsToUpdate.length; i++) {
	        let key = propsToUpdate[i];
	        if (isEmitListener(instance.emitsOptions, key)) {
	          continue;
	        }
	        const value = rawProps[key];
	        if (options) {
	          if (shared.hasOwn(attrs, key)) {
	            if (value !== attrs[key]) {
	              attrs[key] = value;
	              hasAttrsChanged = true;
	            }
	          } else {
	            const camelizedKey = shared.camelize(key);
	            props[camelizedKey] = resolvePropValue(
	              options,
	              rawCurrentProps,
	              camelizedKey,
	              value,
	              instance,
	              false
	            );
	          }
	        } else {
	          if (value !== attrs[key]) {
	            attrs[key] = value;
	            hasAttrsChanged = true;
	          }
	        }
	      }
	    }
	  } else {
	    if (setFullProps(instance, rawProps, props, attrs)) {
	      hasAttrsChanged = true;
	    }
	    let kebabKey;
	    for (const key in rawCurrentProps) {
	      if (!rawProps ||
	      !shared.hasOwn(rawProps, key) &&
	      ((kebabKey = shared.hyphenate(key)) === key || !shared.hasOwn(rawProps, kebabKey))) {
	        if (options) {
	          if (rawPrevProps &&
	          (rawPrevProps[key] !== void 0 ||
	          rawPrevProps[kebabKey] !== void 0)) {
	            props[key] = resolvePropValue(
	              options,
	              rawCurrentProps,
	              key,
	              void 0,
	              instance,
	              true
	            );
	          }
	        } else {
	          delete props[key];
	        }
	      }
	    }
	    if (attrs !== rawCurrentProps) {
	      for (const key in attrs) {
	        if (!rawProps || !shared.hasOwn(rawProps, key) && true) {
	          delete attrs[key];
	          hasAttrsChanged = true;
	        }
	      }
	    }
	  }
	  if (hasAttrsChanged) {
	    reactivity.trigger(instance.attrs, "set", "");
	  }
	  {
	    validateProps(rawProps || {}, props, instance);
	  }
	}
	function setFullProps(instance, rawProps, props, attrs) {
	  const [options, needCastKeys] = instance.propsOptions;
	  let hasAttrsChanged = false;
	  let rawCastValues;
	  if (rawProps) {
	    for (let key in rawProps) {
	      if (shared.isReservedProp(key)) {
	        continue;
	      }
	      const value = rawProps[key];
	      let camelKey;
	      if (options && shared.hasOwn(options, camelKey = shared.camelize(key))) {
	        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
	          props[camelKey] = value;
	        } else {
	          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
	        }
	      } else if (!isEmitListener(instance.emitsOptions, key)) {
	        if (!(key in attrs) || value !== attrs[key]) {
	          attrs[key] = value;
	          hasAttrsChanged = true;
	        }
	      }
	    }
	  }
	  if (needCastKeys) {
	    const rawCurrentProps = reactivity.toRaw(props);
	    const castValues = rawCastValues || shared.EMPTY_OBJ;
	    for (let i = 0; i < needCastKeys.length; i++) {
	      const key = needCastKeys[i];
	      props[key] = resolvePropValue(
	        options,
	        rawCurrentProps,
	        key,
	        castValues[key],
	        instance,
	        !shared.hasOwn(castValues, key)
	      );
	    }
	  }
	  return hasAttrsChanged;
	}
	function resolvePropValue(options, props, key, value, instance, isAbsent) {
	  const opt = options[key];
	  if (opt != null) {
	    const hasDefault = shared.hasOwn(opt, "default");
	    if (hasDefault && value === void 0) {
	      const defaultValue = opt.default;
	      if (opt.type !== Function && !opt.skipFactory && shared.isFunction(defaultValue)) {
	        const { propsDefaults } = instance;
	        if (key in propsDefaults) {
	          value = propsDefaults[key];
	        } else {
	          const reset = setCurrentInstance(instance);
	          value = propsDefaults[key] = defaultValue.call(
	            null,
	            props
	          );
	          reset();
	        }
	      } else {
	        value = defaultValue;
	      }
	    }
	    if (opt[0 ]) {
	      if (isAbsent && !hasDefault) {
	        value = false;
	      } else if (opt[1 ] && (value === "" || value === shared.hyphenate(key))) {
	        value = true;
	      }
	    }
	  }
	  return value;
	}
	const mixinPropsCache =  new WeakMap();
	function normalizePropsOptions(comp, appContext, asMixin = false) {
	  const cache = asMixin ? mixinPropsCache : appContext.propsCache;
	  const cached = cache.get(comp);
	  if (cached) {
	    return cached;
	  }
	  const raw = comp.props;
	  const normalized = {};
	  const needCastKeys = [];
	  let hasExtends = false;
	  if (!shared.isFunction(comp)) {
	    const extendProps = (raw2) => {
	      hasExtends = true;
	      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
	      shared.extend(normalized, props);
	      if (keys) needCastKeys.push(...keys);
	    };
	    if (!asMixin && appContext.mixins.length) {
	      appContext.mixins.forEach(extendProps);
	    }
	    if (comp.extends) {
	      extendProps(comp.extends);
	    }
	    if (comp.mixins) {
	      comp.mixins.forEach(extendProps);
	    }
	  }
	  if (!raw && !hasExtends) {
	    if (shared.isObject(comp)) {
	      cache.set(comp, shared.EMPTY_ARR);
	    }
	    return shared.EMPTY_ARR;
	  }
	  if (shared.isArray(raw)) {
	    for (let i = 0; i < raw.length; i++) {
	      if (!shared.isString(raw[i])) {
	        warn$1(`props must be strings when using array syntax.`, raw[i]);
	      }
	      const normalizedKey = shared.camelize(raw[i]);
	      if (validatePropName(normalizedKey)) {
	        normalized[normalizedKey] = shared.EMPTY_OBJ;
	      }
	    }
	  } else if (raw) {
	    if (!shared.isObject(raw)) {
	      warn$1(`invalid props options`, raw);
	    }
	    for (const key in raw) {
	      const normalizedKey = shared.camelize(key);
	      if (validatePropName(normalizedKey)) {
	        const opt = raw[key];
	        const prop = normalized[normalizedKey] = shared.isArray(opt) || shared.isFunction(opt) ? { type: opt } : shared.extend({}, opt);
	        if (prop) {
	          const booleanIndex = getTypeIndex(Boolean, prop.type);
	          const stringIndex = getTypeIndex(String, prop.type);
	          prop[0 ] = booleanIndex > -1;
	          prop[1 ] = stringIndex < 0 || booleanIndex < stringIndex;
	          if (booleanIndex > -1 || shared.hasOwn(prop, "default")) {
	            needCastKeys.push(normalizedKey);
	          }
	        }
	      }
	    }
	  }
	  const res = [normalized, needCastKeys];
	  if (shared.isObject(comp)) {
	    cache.set(comp, res);
	  }
	  return res;
	}
	function validatePropName(key) {
	  if (key[0] !== "$" && !shared.isReservedProp(key)) {
	    return true;
	  } else {
	    warn$1(`Invalid prop name: "${key}" is a reserved property.`);
	  }
	  return false;
	}
	function getType(ctor) {
	  if (ctor === null) {
	    return "null";
	  }
	  if (typeof ctor === "function") {
	    return ctor.name || "";
	  } else if (typeof ctor === "object") {
	    const name = ctor.constructor && ctor.constructor.name;
	    return name || "";
	  }
	  return "";
	}
	function isSameType(a, b) {
	  return getType(a) === getType(b);
	}
	function getTypeIndex(type, expectedTypes) {
	  if (shared.isArray(expectedTypes)) {
	    return expectedTypes.findIndex((t) => isSameType(t, type));
	  } else if (shared.isFunction(expectedTypes)) {
	    return isSameType(expectedTypes, type) ? 0 : -1;
	  }
	  return -1;
	}
	function validateProps(rawProps, props, instance) {
	  const resolvedValues = reactivity.toRaw(props);
	  const options = instance.propsOptions[0];
	  for (const key in options) {
	    let opt = options[key];
	    if (opt == null) continue;
	    validateProp(
	      key,
	      resolvedValues[key],
	      opt,
	      reactivity.shallowReadonly(resolvedValues) ,
	      !shared.hasOwn(rawProps, key) && !shared.hasOwn(rawProps, shared.hyphenate(key))
	    );
	  }
	}
	function validateProp(name, value, prop, props, isAbsent) {
	  const { type, required, validator, skipCheck } = prop;
	  if (required && isAbsent) {
	    warn$1('Missing required prop: "' + name + '"');
	    return;
	  }
	  if (value == null && !required) {
	    return;
	  }
	  if (type != null && type !== true && !skipCheck) {
	    let isValid = false;
	    const types = shared.isArray(type) ? type : [type];
	    const expectedTypes = [];
	    for (let i = 0; i < types.length && !isValid; i++) {
	      const { valid, expectedType } = assertType(value, types[i]);
	      expectedTypes.push(expectedType || "");
	      isValid = valid;
	    }
	    if (!isValid) {
	      warn$1(getInvalidTypeMessage(name, value, expectedTypes));
	      return;
	    }
	  }
	  if (validator && !validator(value, props)) {
	    warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
	  }
	}
	const isSimpleType =  shared.makeMap(
	  "String,Number,Boolean,Function,Symbol,BigInt"
	);
	function assertType(value, type) {
	  let valid;
	  const expectedType = getType(type);
	  if (isSimpleType(expectedType)) {
	    const t = typeof value;
	    valid = t === expectedType.toLowerCase();
	    if (!valid && t === "object") {
	      valid = value instanceof type;
	    }
	  } else if (expectedType === "Object") {
	    valid = shared.isObject(value);
	  } else if (expectedType === "Array") {
	    valid = shared.isArray(value);
	  } else if (expectedType === "null") {
	    valid = value === null;
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid,
	    expectedType
	  };
	}
	function getInvalidTypeMessage(name, value, expectedTypes) {
	  if (expectedTypes.length === 0) {
	    return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
	  }
	  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(shared.capitalize).join(" | ")}`;
	  const expectedType = expectedTypes[0];
	  const receivedType = shared.toRawType(value);
	  const expectedValue = styleValue(value, expectedType);
	  const receivedValue = styleValue(value, receivedType);
	  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
	    message += ` with value ${expectedValue}`;
	  }
	  message += `, got ${receivedType} `;
	  if (isExplicable(receivedType)) {
	    message += `with value ${receivedValue}.`;
	  }
	  return message;
	}
	function styleValue(value, type) {
	  if (type === "String") {
	    return `"${value}"`;
	  } else if (type === "Number") {
	    return `${Number(value)}`;
	  } else {
	    return `${value}`;
	  }
	}
	function isExplicable(type) {
	  const explicitTypes = ["string", "number", "boolean"];
	  return explicitTypes.some((elem) => type.toLowerCase() === elem);
	}
	function isBoolean(...args) {
	  return args.some((elem) => elem.toLowerCase() === "boolean");
	}
	const isInternalKey = (key) => key[0] === "_" || key === "$stable";
	const normalizeSlotValue = (value) => shared.isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
	const normalizeSlot = (key, rawSlot, ctx) => {
	  if (rawSlot._n) {
	    return rawSlot;
	  }
	  const normalized = withCtx((...args) => {
	    if (currentInstance && (!ctx || ctx.root === currentInstance.root)) {
	      warn$1(
	        `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
	      );
	    }
	    return normalizeSlotValue(rawSlot(...args));
	  }, ctx);
	  normalized._c = false;
	  return normalized;
	};
	const normalizeObjectSlots = (rawSlots, slots, instance) => {
	  const ctx = rawSlots._ctx;
	  for (const key in rawSlots) {
	    if (isInternalKey(key)) continue;
	    const value = rawSlots[key];
	    if (shared.isFunction(value)) {
	      slots[key] = normalizeSlot(key, value, ctx);
	    } else if (value != null) {
	      {
	        warn$1(
	          `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
	        );
	      }
	      const normalized = normalizeSlotValue(value);
	      slots[key] = () => normalized;
	    }
	  }
	};
	const normalizeVNodeSlots = (instance, children) => {
	  if (!isKeepAlive(instance.vnode) && true) {
	    warn$1(
	      `Non-function value encountered for default slot. Prefer function slots for better performance.`
	    );
	  }
	  const normalized = normalizeSlotValue(children);
	  instance.slots.default = () => normalized;
	};
	const assignSlots = (slots, children, optimized) => {
	  for (const key in children) {
	    if (optimized || key !== "_") {
	      slots[key] = children[key];
	    }
	  }
	};
	const initSlots = (instance, children, optimized) => {
	  const slots = instance.slots = createInternalObject();
	  if (instance.vnode.shapeFlag & 32) {
	    const type = children._;
	    if (type) {
	      assignSlots(slots, children, optimized);
	      if (optimized) {
	        shared.def(slots, "_", type, true);
	      }
	    } else {
	      normalizeObjectSlots(children, slots);
	    }
	  } else if (children) {
	    normalizeVNodeSlots(instance, children);
	  }
	};
	const updateSlots = (instance, children, optimized) => {
	  const { vnode, slots } = instance;
	  let needDeletionCheck = true;
	  let deletionComparisonTarget = shared.EMPTY_OBJ;
	  if (vnode.shapeFlag & 32) {
	    const type = children._;
	    if (type) {
	      if (isHmrUpdating) {
	        assignSlots(slots, children, optimized);
	        reactivity.trigger(instance, "set", "$slots");
	      } else if (optimized && type === 1) {
	        needDeletionCheck = false;
	      } else {
	        assignSlots(slots, children, optimized);
	      }
	    } else {
	      needDeletionCheck = !children.$stable;
	      normalizeObjectSlots(children, slots);
	    }
	    deletionComparisonTarget = children;
	  } else if (children) {
	    normalizeVNodeSlots(instance, children);
	    deletionComparisonTarget = { default: 1 };
	  }
	  if (needDeletionCheck) {
	    for (const key in slots) {
	      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
	        delete slots[key];
	      }
	    }
	  }
	};
	function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
	  if (shared.isArray(rawRef)) {
	    rawRef.forEach(
	      (r, i) => setRef(
	        r,
	        oldRawRef && (shared.isArray(oldRawRef) ? oldRawRef[i] : oldRawRef),
	        parentSuspense,
	        vnode,
	        isUnmount
	      )
	    );
	    return;
	  }
	  if (isAsyncWrapper(vnode) && !isUnmount) {
	    return;
	  }
	  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
	  const value = isUnmount ? null : refValue;
	  const { i: owner, r: ref } = rawRef;
	  if (!owner) {
	    warn$1(
	      `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
	    );
	    return;
	  }
	  const oldRef = oldRawRef && oldRawRef.r;
	  const refs = owner.refs === shared.EMPTY_OBJ ? owner.refs = {} : owner.refs;
	  const setupState = owner.setupState;
	  if (oldRef != null && oldRef !== ref) {
	    if (shared.isString(oldRef)) {
	      refs[oldRef] = null;
	      if (shared.hasOwn(setupState, oldRef)) {
	        setupState[oldRef] = null;
	      }
	    } else if (reactivity.isRef(oldRef)) {
	      oldRef.value = null;
	    }
	  }
	  if (shared.isFunction(ref)) {
	    callWithErrorHandling(ref, owner, 12, [value, refs]);
	  } else {
	    const _isString = shared.isString(ref);
	    const _isRef = reactivity.isRef(ref);
	    if (_isString || _isRef) {
	      const doSet = () => {
	        if (rawRef.f) {
	          const existing = _isString ? shared.hasOwn(setupState, ref) ? setupState[ref] : refs[ref] : ref.value;
	          if (isUnmount) {
	            shared.isArray(existing) && shared.remove(existing, refValue);
	          } else {
	            if (!shared.isArray(existing)) {
	              if (_isString) {
	                refs[ref] = [refValue];
	                if (shared.hasOwn(setupState, ref)) {
	                  setupState[ref] = refs[ref];
	                }
	              } else {
	                ref.value = [refValue];
	                if (rawRef.k) refs[rawRef.k] = ref.value;
	              }
	            } else if (!existing.includes(refValue)) {
	              existing.push(refValue);
	            }
	          }
	        } else if (_isString) {
	          refs[ref] = value;
	          if (shared.hasOwn(setupState, ref)) {
	            setupState[ref] = value;
	          }
	        } else if (_isRef) {
	          ref.value = value;
	          if (rawRef.k) refs[rawRef.k] = value;
	        } else {
	          warn$1("Invalid template ref type:", ref, `(${typeof ref})`);
	        }
	      };
	      if (value) {
	        doSet.id = -1;
	        queuePostRenderEffect(doSet, parentSuspense);
	      } else {
	        doSet();
	      }
	    } else {
	      warn$1("Invalid template ref type:", ref, `(${typeof ref})`);
	    }
	  }
	}
	const TeleportEndKey = Symbol("_vte");
	const isTeleport = (type) => type.__isTeleport;
	const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
	const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
	const isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
	const resolveTarget = (props, select) => {
	  const targetSelector = props && props.to;
	  if (shared.isString(targetSelector)) {
	    if (!select) {
	      warn$1(
	        `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
	      );
	      return null;
	    } else {
	      const target = select(targetSelector);
	      if (!target && !isTeleportDisabled(props)) {
	        warn$1(
	          `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
	        );
	      }
	      return target;
	    }
	  } else {
	    if (!targetSelector && !isTeleportDisabled(props)) {
	      warn$1(`Invalid Teleport target: ${targetSelector}`);
	    }
	    return targetSelector;
	  }
	};
	const TeleportImpl = {
	  name: "Teleport",
	  __isTeleport: true,
	  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
	    const {
	      mc: mountChildren,
	      pc: patchChildren,
	      pbc: patchBlockChildren,
	      o: { insert, querySelector, createText, createComment }
	    } = internals;
	    const disabled = isTeleportDisabled(n2.props);
	    let { shapeFlag, children, dynamicChildren } = n2;
	    if (isHmrUpdating) {
	      optimized = false;
	      dynamicChildren = null;
	    }
	    if (n1 == null) {
	      const placeholder = n2.el = createComment("teleport start") ;
	      const mainAnchor = n2.anchor = createComment("teleport end") ;
	      const target = n2.target = resolveTarget(n2.props, querySelector);
	      const targetStart = n2.targetStart = createText("");
	      const targetAnchor = n2.targetAnchor = createText("");
	      insert(placeholder, container, anchor);
	      insert(mainAnchor, container, anchor);
	      targetStart[TeleportEndKey] = targetAnchor;
	      if (target) {
	        insert(targetStart, target);
	        insert(targetAnchor, target);
	        if (namespace === "svg" || isTargetSVG(target)) {
	          namespace = "svg";
	        } else if (namespace === "mathml" || isTargetMathML(target)) {
	          namespace = "mathml";
	        }
	      } else if (!disabled) {
	        warn$1("Invalid Teleport target on mount:", target, `(${typeof target})`);
	      }
	      const mount = (container2, anchor2) => {
	        if (shapeFlag & 16) {
	          mountChildren(
	            children,
	            container2,
	            anchor2,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	        }
	      };
	      if (disabled) {
	        mount(container, mainAnchor);
	      } else if (target) {
	        mount(target, targetAnchor);
	      }
	    } else {
	      n2.el = n1.el;
	      n2.targetStart = n1.targetStart;
	      const mainAnchor = n2.anchor = n1.anchor;
	      const target = n2.target = n1.target;
	      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
	      const wasDisabled = isTeleportDisabled(n1.props);
	      const currentContainer = wasDisabled ? container : target;
	      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
	      if (namespace === "svg" || isTargetSVG(target)) {
	        namespace = "svg";
	      } else if (namespace === "mathml" || isTargetMathML(target)) {
	        namespace = "mathml";
	      }
	      if (dynamicChildren) {
	        patchBlockChildren(
	          n1.dynamicChildren,
	          dynamicChildren,
	          currentContainer,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds
	        );
	        traverseStaticChildren(n1, n2, true);
	      } else if (!optimized) {
	        patchChildren(
	          n1,
	          n2,
	          currentContainer,
	          currentAnchor,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          false
	        );
	      }
	      if (disabled) {
	        if (!wasDisabled) {
	          moveTeleport(
	            n2,
	            container,
	            mainAnchor,
	            internals,
	            1
	          );
	        } else {
	          if (n2.props && n1.props && n2.props.to !== n1.props.to) {
	            n2.props.to = n1.props.to;
	          }
	        }
	      } else {
	        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
	          const nextTarget = n2.target = resolveTarget(
	            n2.props,
	            querySelector
	          );
	          if (nextTarget) {
	            moveTeleport(
	              n2,
	              nextTarget,
	              null,
	              internals,
	              0
	            );
	          } else {
	            warn$1(
	              "Invalid Teleport target on update:",
	              target,
	              `(${typeof target})`
	            );
	          }
	        } else if (wasDisabled) {
	          moveTeleport(
	            n2,
	            target,
	            targetAnchor,
	            internals,
	            1
	          );
	        }
	      }
	    }
	    updateCssVars(n2);
	  },
	  remove(vnode, parentComponent, parentSuspense, { um: unmount, o: { remove: hostRemove } }, doRemove) {
	    const {
	      shapeFlag,
	      children,
	      anchor,
	      targetStart,
	      targetAnchor,
	      target,
	      props
	    } = vnode;
	    if (target) {
	      hostRemove(targetStart);
	      hostRemove(targetAnchor);
	    }
	    doRemove && hostRemove(anchor);
	    if (shapeFlag & 16) {
	      const shouldRemove = doRemove || !isTeleportDisabled(props);
	      for (let i = 0; i < children.length; i++) {
	        const child = children[i];
	        unmount(
	          child,
	          parentComponent,
	          parentSuspense,
	          shouldRemove,
	          !!child.dynamicChildren
	        );
	      }
	    }
	  },
	  move: moveTeleport,
	  hydrate: hydrateTeleport
	};
	function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
	  if (moveType === 0) {
	    insert(vnode.targetAnchor, container, parentAnchor);
	  }
	  const { el, anchor, shapeFlag, children, props } = vnode;
	  const isReorder = moveType === 2;
	  if (isReorder) {
	    insert(el, container, parentAnchor);
	  }
	  if (!isReorder || isTeleportDisabled(props)) {
	    if (shapeFlag & 16) {
	      for (let i = 0; i < children.length; i++) {
	        move(
	          children[i],
	          container,
	          parentAnchor,
	          2
	        );
	      }
	    }
	  }
	  if (isReorder) {
	    insert(anchor, container, parentAnchor);
	  }
	}
	function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
	  o: { nextSibling, parentNode, querySelector }
	}, hydrateChildren) {
	  const target = vnode.target = resolveTarget(
	    vnode.props,
	    querySelector
	  );
	  if (target) {
	    const targetNode = target._lpa || target.firstChild;
	    if (vnode.shapeFlag & 16) {
	      if (isTeleportDisabled(vnode.props)) {
	        vnode.anchor = hydrateChildren(
	          nextSibling(node),
	          vnode,
	          parentNode(node),
	          parentComponent,
	          parentSuspense,
	          slotScopeIds,
	          optimized
	        );
	        vnode.targetAnchor = targetNode;
	      } else {
	        vnode.anchor = nextSibling(node);
	        let targetAnchor = targetNode;
	        while (targetAnchor) {
	          targetAnchor = nextSibling(targetAnchor);
	          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
	            vnode.targetAnchor = targetAnchor;
	            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
	            break;
	          }
	        }
	        hydrateChildren(
	          targetNode,
	          vnode,
	          target,
	          parentComponent,
	          parentSuspense,
	          slotScopeIds,
	          optimized
	        );
	      }
	    }
	    updateCssVars(vnode);
	  }
	  return vnode.anchor && nextSibling(vnode.anchor);
	}
	const Teleport = TeleportImpl;
	function updateCssVars(vnode) {
	  const ctx = vnode.ctx;
	  if (ctx && ctx.ut) {
	    let node = vnode.children[0].el;
	    while (node && node !== vnode.targetAnchor) {
	      if (node.nodeType === 1) node.setAttribute("data-v-owner", ctx.uid);
	      node = node.nextSibling;
	    }
	    ctx.ut();
	  }
	}
	let hasLoggedMismatchError = false;
	const logMismatchError = () => {
	  if (hasLoggedMismatchError) {
	    return;
	  }
	  console.error("Hydration completed but contains mismatches.");
	  hasLoggedMismatchError = true;
	};
	const isSVGContainer = (container) => container.namespaceURI.includes("svg") && container.tagName !== "foreignObject";
	const isMathMLContainer = (container) => container.namespaceURI.includes("MathML");
	const getContainerType = (container) => {
	  if (isSVGContainer(container)) return "svg";
	  if (isMathMLContainer(container)) return "mathml";
	  return void 0;
	};
	const isComment = (node) => node.nodeType === 8 ;
	function createHydrationFunctions(rendererInternals) {
	  const {
	    mt: mountComponent,
	    p: patch,
	    o: {
	      patchProp,
	      createText,
	      nextSibling,
	      parentNode,
	      remove,
	      insert,
	      createComment
	    }
	  } = rendererInternals;
	  const hydrate = (vnode, container) => {
	    if (!container.hasChildNodes()) {
	      warn$1(
	        `Attempting to hydrate existing markup but container is empty. Performing full mount instead.`
	      );
	      patch(null, vnode, container);
	      flushPostFlushCbs();
	      container._vnode = vnode;
	      return;
	    }
	    hydrateNode(container.firstChild, vnode, null, null, null);
	    flushPostFlushCbs();
	    container._vnode = vnode;
	  };
	  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
	    optimized = optimized || !!vnode.dynamicChildren;
	    const isFragmentStart = isComment(node) && node.data === "[";
	    const onMismatch = () => handleMismatch(
	      node,
	      vnode,
	      parentComponent,
	      parentSuspense,
	      slotScopeIds,
	      isFragmentStart
	    );
	    const { type, ref, shapeFlag, patchFlag } = vnode;
	    let domType = node.nodeType;
	    vnode.el = node;
	    {
	      shared.def(node, "__vnode", vnode, true);
	      shared.def(node, "__vueParentComponent", parentComponent, true);
	    }
	    if (patchFlag === -2) {
	      optimized = false;
	      vnode.dynamicChildren = null;
	    }
	    let nextNode = null;
	    switch (type) {
	      case Text:
	        if (domType !== 3 ) {
	          if (vnode.children === "") {
	            insert(vnode.el = createText(""), parentNode(node), node);
	            nextNode = node;
	          } else {
	            nextNode = onMismatch();
	          }
	        } else {
	          if (node.data !== vnode.children) {
	            warn$1(
	              `Hydration text mismatch in`,
	              node.parentNode,
	              `
  - rendered on server: ${JSON.stringify(
	                node.data
	              )}
  - expected on client: ${JSON.stringify(vnode.children)}`
	            );
	            logMismatchError();
	            node.data = vnode.children;
	          }
	          nextNode = nextSibling(node);
	        }
	        break;
	      case Comment:
	        if (isTemplateNode(node)) {
	          nextNode = nextSibling(node);
	          replaceNode(
	            vnode.el = node.content.firstChild,
	            node,
	            parentComponent
	          );
	        } else if (domType !== 8  || isFragmentStart) {
	          nextNode = onMismatch();
	        } else {
	          nextNode = nextSibling(node);
	        }
	        break;
	      case Static:
	        if (isFragmentStart) {
	          node = nextSibling(node);
	          domType = node.nodeType;
	        }
	        if (domType === 1  || domType === 3 ) {
	          nextNode = node;
	          const needToAdoptContent = !vnode.children.length;
	          for (let i = 0; i < vnode.staticCount; i++) {
	            if (needToAdoptContent)
	              vnode.children += nextNode.nodeType === 1  ? nextNode.outerHTML : nextNode.data;
	            if (i === vnode.staticCount - 1) {
	              vnode.anchor = nextNode;
	            }
	            nextNode = nextSibling(nextNode);
	          }
	          return isFragmentStart ? nextSibling(nextNode) : nextNode;
	        } else {
	          onMismatch();
	        }
	        break;
	      case Fragment:
	        if (!isFragmentStart) {
	          nextNode = onMismatch();
	        } else {
	          nextNode = hydrateFragment(
	            node,
	            vnode,
	            parentComponent,
	            parentSuspense,
	            slotScopeIds,
	            optimized
	          );
	        }
	        break;
	      default:
	        if (shapeFlag & 1) {
	          if ((domType !== 1  || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) && !isTemplateNode(node)) {
	            nextNode = onMismatch();
	          } else {
	            nextNode = hydrateElement(
	              node,
	              vnode,
	              parentComponent,
	              parentSuspense,
	              slotScopeIds,
	              optimized
	            );
	          }
	        } else if (shapeFlag & 6) {
	          vnode.slotScopeIds = slotScopeIds;
	          const container = parentNode(node);
	          if (isFragmentStart) {
	            nextNode = locateClosingAnchor(node);
	          } else if (isComment(node) && node.data === "teleport start") {
	            nextNode = locateClosingAnchor(node, node.data, "teleport end");
	          } else {
	            nextNode = nextSibling(node);
	          }
	          mountComponent(
	            vnode,
	            container,
	            null,
	            parentComponent,
	            parentSuspense,
	            getContainerType(container),
	            optimized
	          );
	          if (isAsyncWrapper(vnode)) {
	            let subTree;
	            if (isFragmentStart) {
	              subTree = createVNode(Fragment);
	              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
	            } else {
	              subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
	            }
	            subTree.el = node;
	            vnode.component.subTree = subTree;
	          }
	        } else if (shapeFlag & 64) {
	          if (domType !== 8 ) {
	            nextNode = onMismatch();
	          } else {
	            nextNode = vnode.type.hydrate(
	              node,
	              vnode,
	              parentComponent,
	              parentSuspense,
	              slotScopeIds,
	              optimized,
	              rendererInternals,
	              hydrateChildren
	            );
	          }
	        } else if (shapeFlag & 128) {
	          nextNode = vnode.type.hydrate(
	            node,
	            vnode,
	            parentComponent,
	            parentSuspense,
	            getContainerType(parentNode(node)),
	            slotScopeIds,
	            optimized,
	            rendererInternals,
	            hydrateNode
	          );
	        } else {
	          warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
	        }
	    }
	    if (ref != null) {
	      setRef(ref, null, parentSuspense, vnode);
	    }
	    return nextNode;
	  };
	  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
	    optimized = optimized || !!vnode.dynamicChildren;
	    const { type, props, patchFlag, shapeFlag, dirs, transition } = vnode;
	    const forcePatch = type === "input" || type === "option";
	    {
	      if (dirs) {
	        invokeDirectiveHook(vnode, null, parentComponent, "created");
	      }
	      let needCallTransitionHooks = false;
	      if (isTemplateNode(el)) {
	        needCallTransitionHooks = needTransition(parentSuspense, transition) && parentComponent && parentComponent.vnode.props && parentComponent.vnode.props.appear;
	        const content = el.content.firstChild;
	        if (needCallTransitionHooks) {
	          transition.beforeEnter(content);
	        }
	        replaceNode(content, el, parentComponent);
	        vnode.el = el = content;
	      }
	      if (shapeFlag & 16 &&
	      !(props && (props.innerHTML || props.textContent))) {
	        let next = hydrateChildren(
	          el.firstChild,
	          vnode,
	          el,
	          parentComponent,
	          parentSuspense,
	          slotScopeIds,
	          optimized
	        );
	        let hasWarned = false;
	        while (next) {
	          if (!hasWarned) {
	            warn$1(
	              `Hydration children mismatch on`,
	              el,
	              `
Server rendered element contains more child nodes than client vdom.`
	            );
	            hasWarned = true;
	          }
	          logMismatchError();
	          const cur = next;
	          next = next.nextSibling;
	          remove(cur);
	        }
	      } else if (shapeFlag & 8) {
	        if (el.textContent !== vnode.children) {
	          warn$1(
	            `Hydration text content mismatch on`,
	            el,
	            `
  - rendered on server: ${el.textContent}
  - expected on client: ${vnode.children}`
	          );
	          logMismatchError();
	          el.textContent = vnode.children;
	        }
	      }
	      if (props) {
	        {
	          for (const key in props) {
	            if (
	            !(dirs && dirs.some((d) => d.dir.created)) && propHasMismatch(el, key, props[key], vnode, parentComponent)) {
	              logMismatchError();
	            }
	            if (forcePatch && (key.endsWith("value") || key === "indeterminate") || shared.isOn(key) && !shared.isReservedProp(key) ||
	            key[0] === ".") {
	              patchProp(el, key, null, props[key], void 0, parentComponent);
	            }
	          }
	        }
	      }
	      let vnodeHooks;
	      if (vnodeHooks = props && props.onVnodeBeforeMount) {
	        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
	      }
	      if (dirs) {
	        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
	      }
	      if ((vnodeHooks = props && props.onVnodeMounted) || dirs || needCallTransitionHooks) {
	        queueEffectWithSuspense(() => {
	          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
	          needCallTransitionHooks && transition.enter(el);
	          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
	        }, parentSuspense);
	      }
	    }
	    return el.nextSibling;
	  };
	  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
	    optimized = optimized || !!parentVNode.dynamicChildren;
	    const children = parentVNode.children;
	    const l = children.length;
	    let hasWarned = false;
	    for (let i = 0; i < l; i++) {
	      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
	      const isText = vnode.type === Text;
	      if (node) {
	        if (isText && !optimized) {
	          let next = children[i + 1];
	          if (next && (next = normalizeVNode(next)).type === Text) {
	            insert(
	              createText(
	                node.data.slice(vnode.children.length)
	              ),
	              container,
	              nextSibling(node)
	            );
	            node.data = vnode.children;
	          }
	        }
	        node = hydrateNode(
	          node,
	          vnode,
	          parentComponent,
	          parentSuspense,
	          slotScopeIds,
	          optimized
	        );
	      } else if (isText && !vnode.children) {
	        insert(vnode.el = createText(""), container);
	      } else {
	        if (!hasWarned) {
	          warn$1(
	            `Hydration children mismatch on`,
	            container,
	            `
Server rendered element contains fewer child nodes than client vdom.`
	          );
	          hasWarned = true;
	        }
	        logMismatchError();
	        patch(
	          null,
	          vnode,
	          container,
	          null,
	          parentComponent,
	          parentSuspense,
	          getContainerType(container),
	          slotScopeIds
	        );
	      }
	    }
	    return node;
	  };
	  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
	    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
	    if (fragmentSlotScopeIds) {
	      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
	    }
	    const container = parentNode(node);
	    const next = hydrateChildren(
	      nextSibling(node),
	      vnode,
	      container,
	      parentComponent,
	      parentSuspense,
	      slotScopeIds,
	      optimized
	    );
	    if (next && isComment(next) && next.data === "]") {
	      return nextSibling(vnode.anchor = next);
	    } else {
	      logMismatchError();
	      insert(vnode.anchor = createComment(`]`), container, next);
	      return next;
	    }
	  };
	  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
	    warn$1(
	      `Hydration node mismatch:
- rendered on server:`,
	      node,
	      node.nodeType === 3  ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``,
	      `
- expected on client:`,
	      vnode.type
	    );
	    logMismatchError();
	    vnode.el = null;
	    if (isFragment) {
	      const end = locateClosingAnchor(node);
	      while (true) {
	        const next2 = nextSibling(node);
	        if (next2 && next2 !== end) {
	          remove(next2);
	        } else {
	          break;
	        }
	      }
	    }
	    const next = nextSibling(node);
	    const container = parentNode(node);
	    remove(node);
	    patch(
	      null,
	      vnode,
	      container,
	      next,
	      parentComponent,
	      parentSuspense,
	      getContainerType(container),
	      slotScopeIds
	    );
	    return next;
	  };
	  const locateClosingAnchor = (node, open = "[", close = "]") => {
	    let match = 0;
	    while (node) {
	      node = nextSibling(node);
	      if (node && isComment(node)) {
	        if (node.data === open) match++;
	        if (node.data === close) {
	          if (match === 0) {
	            return nextSibling(node);
	          } else {
	            match--;
	          }
	        }
	      }
	    }
	    return node;
	  };
	  const replaceNode = (newNode, oldNode, parentComponent) => {
	    const parentNode2 = oldNode.parentNode;
	    if (parentNode2) {
	      parentNode2.replaceChild(newNode, oldNode);
	    }
	    let parent = parentComponent;
	    while (parent) {
	      if (parent.vnode.el === oldNode) {
	        parent.vnode.el = parent.subTree.el = newNode;
	      }
	      parent = parent.parent;
	    }
	  };
	  const isTemplateNode = (node) => {
	    return node.nodeType === 1  && node.tagName.toLowerCase() === "template";
	  };
	  return [hydrate, hydrateNode];
	}
	function propHasMismatch(el, key, clientValue, vnode, instance) {
	  let mismatchType;
	  let mismatchKey;
	  let actual;
	  let expected;
	  if (key === "class") {
	    actual = el.getAttribute("class");
	    expected = shared.normalizeClass(clientValue);
	    if (!isSetEqual(toClassSet(actual || ""), toClassSet(expected))) {
	      mismatchType = mismatchKey = `class`;
	    }
	  } else if (key === "style") {
	    actual = el.getAttribute("style") || "";
	    expected = shared.isString(clientValue) ? clientValue : shared.stringifyStyle(shared.normalizeStyle(clientValue));
	    const actualMap = toStyleMap(actual);
	    const expectedMap = toStyleMap(expected);
	    if (vnode.dirs) {
	      for (const { dir, value } of vnode.dirs) {
	        if (dir.name === "show" && !value) {
	          expectedMap.set("display", "none");
	        }
	      }
	    }
	    if (instance) {
	      resolveCssVars(instance, vnode, expectedMap);
	    }
	    if (!isMapEqual(actualMap, expectedMap)) {
	      mismatchType = mismatchKey = "style";
	    }
	  } else if (el instanceof SVGElement && shared.isKnownSvgAttr(key) || el instanceof HTMLElement && (shared.isBooleanAttr(key) || shared.isKnownHtmlAttr(key))) {
	    if (shared.isBooleanAttr(key)) {
	      actual = el.hasAttribute(key);
	      expected = shared.includeBooleanAttr(clientValue);
	    } else if (clientValue == null) {
	      actual = el.hasAttribute(key);
	      expected = false;
	    } else {
	      if (el.hasAttribute(key)) {
	        actual = el.getAttribute(key);
	      } else if (key === "value" && el.tagName === "TEXTAREA") {
	        actual = el.value;
	      } else {
	        actual = false;
	      }
	      expected = shared.isRenderableAttrValue(clientValue) ? String(clientValue) : false;
	    }
	    if (actual !== expected) {
	      mismatchType = `attribute`;
	      mismatchKey = key;
	    }
	  }
	  if (mismatchType) {
	    const format = (v) => v === false ? `(not rendered)` : `${mismatchKey}="${v}"`;
	    const preSegment = `Hydration ${mismatchType} mismatch on`;
	    const postSegment = `
  - rendered on server: ${format(actual)}
  - expected on client: ${format(expected)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;
	    {
	      warn$1(preSegment, el, postSegment);
	    }
	    return true;
	  }
	  return false;
	}
	function toClassSet(str) {
	  return new Set(str.trim().split(/\s+/));
	}
	function isSetEqual(a, b) {
	  if (a.size !== b.size) {
	    return false;
	  }
	  for (const s of a) {
	    if (!b.has(s)) {
	      return false;
	    }
	  }
	  return true;
	}
	function toStyleMap(str) {
	  const styleMap =  new Map();
	  for (const item of str.split(";")) {
	    let [key, value] = item.split(":");
	    key = key.trim();
	    value = value && value.trim();
	    if (key && value) {
	      styleMap.set(key, value);
	    }
	  }
	  return styleMap;
	}
	function isMapEqual(a, b) {
	  if (a.size !== b.size) {
	    return false;
	  }
	  for (const [key, value] of a) {
	    if (value !== b.get(key)) {
	      return false;
	    }
	  }
	  return true;
	}
	function resolveCssVars(instance, vnode, expectedMap) {
	  const root = instance.subTree;
	  if (instance.getCssVars && (vnode === root || root && root.type === Fragment && root.children.includes(vnode))) {
	    const cssVars = instance.getCssVars();
	    for (const key in cssVars) {
	      expectedMap.set(`--${key}`, String(cssVars[key]));
	    }
	  }
	  if (vnode === root && instance.parent) {
	    resolveCssVars(instance.parent, instance.vnode, expectedMap);
	  }
	}
	let supported;
	let perf;
	function startMeasure(instance, type) {
	  if (instance.appContext.config.performance && isSupported()) {
	    perf.mark(`vue-${type}-${instance.uid}`);
	  }
	  {
	    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
	  }
	}
	function endMeasure(instance, type) {
	  if (instance.appContext.config.performance && isSupported()) {
	    const startTag = `vue-${type}-${instance.uid}`;
	    const endTag = startTag + `:end`;
	    perf.mark(endTag);
	    perf.measure(
	      `<${formatComponentName(instance, instance.type)}> ${type}`,
	      startTag,
	      endTag
	    );
	    perf.clearMarks(startTag);
	    perf.clearMarks(endTag);
	  }
	  {
	    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
	  }
	}
	function isSupported() {
	  if (supported !== void 0) {
	    return supported;
	  }
	  if (typeof window !== "undefined" && window.performance) {
	    supported = true;
	    perf = window.performance;
	  } else {
	    supported = false;
	  }
	  return supported;
	}
	const queuePostRenderEffect = queueEffectWithSuspense ;
	function createRenderer(options) {
	  return baseCreateRenderer(options);
	}
	function createHydrationRenderer(options) {
	  return baseCreateRenderer(options, createHydrationFunctions);
	}
	function baseCreateRenderer(options, createHydrationFns) {
	  const target = shared.getGlobalThis();
	  target.__VUE__ = true;
	  {
	    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
	  }
	  const {
	    insert: hostInsert,
	    remove: hostRemove,
	    patchProp: hostPatchProp,
	    createElement: hostCreateElement,
	    createText: hostCreateText,
	    createComment: hostCreateComment,
	    setText: hostSetText,
	    setElementText: hostSetElementText,
	    parentNode: hostParentNode,
	    nextSibling: hostNextSibling,
	    setScopeId: hostSetScopeId = shared.NOOP,
	    insertStaticContent: hostInsertStaticContent
	  } = options;
	  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
	    if (n1 === n2) {
	      return;
	    }
	    if (n1 && !isSameVNodeType(n1, n2)) {
	      anchor = getNextHostNode(n1);
	      unmount(n1, parentComponent, parentSuspense, true);
	      n1 = null;
	    }
	    if (n2.patchFlag === -2) {
	      optimized = false;
	      n2.dynamicChildren = null;
	    }
	    const { type, ref, shapeFlag } = n2;
	    switch (type) {
	      case Text:
	        processText(n1, n2, container, anchor);
	        break;
	      case Comment:
	        processCommentNode(n1, n2, container, anchor);
	        break;
	      case Static:
	        if (n1 == null) {
	          mountStaticNode(n2, container, anchor, namespace);
	        } else {
	          patchStaticNode(n1, n2, container, namespace);
	        }
	        break;
	      case Fragment:
	        processFragment(
	          n1,
	          n2,
	          container,
	          anchor,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	        break;
	      default:
	        if (shapeFlag & 1) {
	          processElement(
	            n1,
	            n2,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	        } else if (shapeFlag & 6) {
	          processComponent(
	            n1,
	            n2,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	        } else if (shapeFlag & 64) {
	          type.process(
	            n1,
	            n2,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized,
	            internals
	          );
	        } else if (shapeFlag & 128) {
	          type.process(
	            n1,
	            n2,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized,
	            internals
	          );
	        } else {
	          warn$1("Invalid VNode type:", type, `(${typeof type})`);
	        }
	    }
	    if (ref != null && parentComponent) {
	      setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
	    }
	  };
	  const processText = (n1, n2, container, anchor) => {
	    if (n1 == null) {
	      hostInsert(
	        n2.el = hostCreateText(n2.children),
	        container,
	        anchor
	      );
	    } else {
	      const el = n2.el = n1.el;
	      if (n2.children !== n1.children) {
	        hostSetText(el, n2.children);
	      }
	    }
	  };
	  const processCommentNode = (n1, n2, container, anchor) => {
	    if (n1 == null) {
	      hostInsert(
	        n2.el = hostCreateComment(n2.children || ""),
	        container,
	        anchor
	      );
	    } else {
	      n2.el = n1.el;
	    }
	  };
	  const mountStaticNode = (n2, container, anchor, namespace) => {
	    [n2.el, n2.anchor] = hostInsertStaticContent(
	      n2.children,
	      container,
	      anchor,
	      namespace,
	      n2.el,
	      n2.anchor
	    );
	  };
	  const patchStaticNode = (n1, n2, container, namespace) => {
	    if (n2.children !== n1.children) {
	      const anchor = hostNextSibling(n1.anchor);
	      removeStaticNode(n1);
	      [n2.el, n2.anchor] = hostInsertStaticContent(
	        n2.children,
	        container,
	        anchor,
	        namespace
	      );
	    } else {
	      n2.el = n1.el;
	      n2.anchor = n1.anchor;
	    }
	  };
	  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
	    let next;
	    while (el && el !== anchor) {
	      next = hostNextSibling(el);
	      hostInsert(el, container, nextSibling);
	      el = next;
	    }
	    hostInsert(anchor, container, nextSibling);
	  };
	  const removeStaticNode = ({ el, anchor }) => {
	    let next;
	    while (el && el !== anchor) {
	      next = hostNextSibling(el);
	      hostRemove(el);
	      el = next;
	    }
	    hostRemove(anchor);
	  };
	  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    if (n2.type === "svg") {
	      namespace = "svg";
	    } else if (n2.type === "math") {
	      namespace = "mathml";
	    }
	    if (n1 == null) {
	      mountElement(
	        n2,
	        container,
	        anchor,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	    } else {
	      patchElement(
	        n1,
	        n2,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	    }
	  };
	  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    let el;
	    let vnodeHook;
	    const { props, shapeFlag, transition, dirs } = vnode;
	    el = vnode.el = hostCreateElement(
	      vnode.type,
	      namespace,
	      props && props.is,
	      props
	    );
	    if (shapeFlag & 8) {
	      hostSetElementText(el, vnode.children);
	    } else if (shapeFlag & 16) {
	      mountChildren(
	        vnode.children,
	        el,
	        null,
	        parentComponent,
	        parentSuspense,
	        resolveChildrenNamespace(vnode, namespace),
	        slotScopeIds,
	        optimized
	      );
	    }
	    if (dirs) {
	      invokeDirectiveHook(vnode, null, parentComponent, "created");
	    }
	    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
	    if (props) {
	      for (const key in props) {
	        if (key !== "value" && !shared.isReservedProp(key)) {
	          hostPatchProp(el, key, null, props[key], namespace, parentComponent);
	        }
	      }
	      if ("value" in props) {
	        hostPatchProp(el, "value", null, props.value, namespace);
	      }
	      if (vnodeHook = props.onVnodeBeforeMount) {
	        invokeVNodeHook(vnodeHook, parentComponent, vnode);
	      }
	    }
	    {
	      shared.def(el, "__vnode", vnode, true);
	      shared.def(el, "__vueParentComponent", parentComponent, true);
	    }
	    if (dirs) {
	      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
	    }
	    const needCallTransitionHooks = needTransition(parentSuspense, transition);
	    if (needCallTransitionHooks) {
	      transition.beforeEnter(el);
	    }
	    hostInsert(el, container, anchor);
	    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
	      queuePostRenderEffect(() => {
	        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
	        needCallTransitionHooks && transition.enter(el);
	        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
	      }, parentSuspense);
	    }
	  };
	  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
	    if (scopeId) {
	      hostSetScopeId(el, scopeId);
	    }
	    if (slotScopeIds) {
	      for (let i = 0; i < slotScopeIds.length; i++) {
	        hostSetScopeId(el, slotScopeIds[i]);
	      }
	    }
	    if (parentComponent) {
	      let subTree = parentComponent.subTree;
	      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
	        subTree = filterSingleRoot(subTree.children) || subTree;
	      }
	      if (vnode === subTree) {
	        const parentVNode = parentComponent.vnode;
	        setScopeId(
	          el,
	          parentVNode,
	          parentVNode.scopeId,
	          parentVNode.slotScopeIds,
	          parentComponent.parent
	        );
	      }
	    }
	  };
	  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
	    for (let i = start; i < children.length; i++) {
	      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
	      patch(
	        null,
	        child,
	        container,
	        anchor,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	    }
	  };
	  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    const el = n2.el = n1.el;
	    {
	      el.__vnode = n2;
	    }
	    let { patchFlag, dynamicChildren, dirs } = n2;
	    patchFlag |= n1.patchFlag & 16;
	    const oldProps = n1.props || shared.EMPTY_OBJ;
	    const newProps = n2.props || shared.EMPTY_OBJ;
	    let vnodeHook;
	    parentComponent && toggleRecurse(parentComponent, false);
	    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
	      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
	    }
	    if (dirs) {
	      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
	    }
	    parentComponent && toggleRecurse(parentComponent, true);
	    if (isHmrUpdating) {
	      patchFlag = 0;
	      optimized = false;
	      dynamicChildren = null;
	    }
	    if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {
	      hostSetElementText(el, "");
	    }
	    if (dynamicChildren) {
	      patchBlockChildren(
	        n1.dynamicChildren,
	        dynamicChildren,
	        el,
	        parentComponent,
	        parentSuspense,
	        resolveChildrenNamespace(n2, namespace),
	        slotScopeIds
	      );
	      {
	        traverseStaticChildren(n1, n2);
	      }
	    } else if (!optimized) {
	      patchChildren(
	        n1,
	        n2,
	        el,
	        null,
	        parentComponent,
	        parentSuspense,
	        resolveChildrenNamespace(n2, namespace),
	        slotScopeIds,
	        false
	      );
	    }
	    if (patchFlag > 0) {
	      if (patchFlag & 16) {
	        patchProps(el, oldProps, newProps, parentComponent, namespace);
	      } else {
	        if (patchFlag & 2) {
	          if (oldProps.class !== newProps.class) {
	            hostPatchProp(el, "class", null, newProps.class, namespace);
	          }
	        }
	        if (patchFlag & 4) {
	          hostPatchProp(el, "style", oldProps.style, newProps.style, namespace);
	        }
	        if (patchFlag & 8) {
	          const propsToUpdate = n2.dynamicProps;
	          for (let i = 0; i < propsToUpdate.length; i++) {
	            const key = propsToUpdate[i];
	            const prev = oldProps[key];
	            const next = newProps[key];
	            if (next !== prev || key === "value") {
	              hostPatchProp(el, key, prev, next, namespace, parentComponent);
	            }
	          }
	        }
	      }
	      if (patchFlag & 1) {
	        if (n1.children !== n2.children) {
	          hostSetElementText(el, n2.children);
	        }
	      }
	    } else if (!optimized && dynamicChildren == null) {
	      patchProps(el, oldProps, newProps, parentComponent, namespace);
	    }
	    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
	      queuePostRenderEffect(() => {
	        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
	        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
	      }, parentSuspense);
	    }
	  };
	  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
	    for (let i = 0; i < newChildren.length; i++) {
	      const oldVNode = oldChildren[i];
	      const newVNode = newChildren[i];
	      const container = (
	        oldVNode.el &&
	        (oldVNode.type === Fragment ||
	        !isSameVNodeType(oldVNode, newVNode) ||
	        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
	          fallbackContainer
	        )
	      );
	      patch(
	        oldVNode,
	        newVNode,
	        container,
	        null,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        true
	      );
	    }
	  };
	  const patchProps = (el, oldProps, newProps, parentComponent, namespace) => {
	    if (oldProps !== newProps) {
	      if (oldProps !== shared.EMPTY_OBJ) {
	        for (const key in oldProps) {
	          if (!shared.isReservedProp(key) && !(key in newProps)) {
	            hostPatchProp(
	              el,
	              key,
	              oldProps[key],
	              null,
	              namespace,
	              parentComponent
	            );
	          }
	        }
	      }
	      for (const key in newProps) {
	        if (shared.isReservedProp(key)) continue;
	        const next = newProps[key];
	        const prev = oldProps[key];
	        if (next !== prev && key !== "value") {
	          hostPatchProp(el, key, prev, next, namespace, parentComponent);
	        }
	      }
	      if ("value" in newProps) {
	        hostPatchProp(el, "value", oldProps.value, newProps.value, namespace);
	      }
	    }
	  };
	  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
	    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
	    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
	    if (
	      isHmrUpdating || patchFlag & 2048
	    ) {
	      patchFlag = 0;
	      optimized = false;
	      dynamicChildren = null;
	    }
	    if (fragmentSlotScopeIds) {
	      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
	    }
	    if (n1 == null) {
	      hostInsert(fragmentStartAnchor, container, anchor);
	      hostInsert(fragmentEndAnchor, container, anchor);
	      mountChildren(
	        n2.children || [],
	        container,
	        fragmentEndAnchor,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	    } else {
	      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren &&
	      n1.dynamicChildren) {
	        patchBlockChildren(
	          n1.dynamicChildren,
	          dynamicChildren,
	          container,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds
	        );
	        {
	          traverseStaticChildren(n1, n2);
	        }
	      } else {
	        patchChildren(
	          n1,
	          n2,
	          container,
	          fragmentEndAnchor,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	      }
	    }
	  };
	  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    n2.slotScopeIds = slotScopeIds;
	    if (n1 == null) {
	      if (n2.shapeFlag & 512) {
	        parentComponent.ctx.activate(
	          n2,
	          container,
	          anchor,
	          namespace,
	          optimized
	        );
	      } else {
	        mountComponent(
	          n2,
	          container,
	          anchor,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          optimized
	        );
	      }
	    } else {
	      updateComponent(n1, n2, optimized);
	    }
	  };
	  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
	    const instance = (initialVNode.component = createComponentInstance(
	      initialVNode,
	      parentComponent,
	      parentSuspense
	    ));
	    if (instance.type.__hmrId) {
	      registerHMR(instance);
	    }
	    {
	      pushWarningContext(initialVNode);
	      startMeasure(instance, `mount`);
	    }
	    if (isKeepAlive(initialVNode)) {
	      instance.ctx.renderer = internals;
	    }
	    {
	      {
	        startMeasure(instance, `init`);
	      }
	      setupComponent(instance, false, optimized);
	      {
	        endMeasure(instance, `init`);
	      }
	    }
	    if (instance.asyncDep) {
	      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
	      if (!initialVNode.el) {
	        const placeholder = instance.subTree = createVNode(Comment);
	        processCommentNode(null, placeholder, container, anchor);
	      }
	    } else {
	      setupRenderEffect(
	        instance,
	        initialVNode,
	        container,
	        anchor,
	        parentSuspense,
	        namespace,
	        optimized
	      );
	    }
	    {
	      popWarningContext();
	      endMeasure(instance, `mount`);
	    }
	  };
	  const updateComponent = (n1, n2, optimized) => {
	    const instance = n2.component = n1.component;
	    if (shouldUpdateComponent(n1, n2, optimized)) {
	      if (instance.asyncDep && !instance.asyncResolved) {
	        {
	          pushWarningContext(n2);
	        }
	        updateComponentPreRender(instance, n2, optimized);
	        {
	          popWarningContext();
	        }
	        return;
	      } else {
	        instance.next = n2;
	        invalidateJob(instance.update);
	        instance.effect.dirty = true;
	        instance.update();
	      }
	    } else {
	      n2.el = n1.el;
	      instance.vnode = n2;
	    }
	  };
	  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
	    const componentUpdateFn = () => {
	      if (!instance.isMounted) {
	        let vnodeHook;
	        const { el, props } = initialVNode;
	        const { bm, m, parent } = instance;
	        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
	        toggleRecurse(instance, false);
	        if (bm) {
	          shared.invokeArrayFns(bm);
	        }
	        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
	          invokeVNodeHook(vnodeHook, parent, initialVNode);
	        }
	        toggleRecurse(instance, true);
	        if (el && hydrateNode) {
	          const hydrateSubTree = () => {
	            {
	              startMeasure(instance, `render`);
	            }
	            instance.subTree = renderComponentRoot(instance);
	            {
	              endMeasure(instance, `render`);
	            }
	            {
	              startMeasure(instance, `hydrate`);
	            }
	            hydrateNode(
	              el,
	              instance.subTree,
	              instance,
	              parentSuspense,
	              null
	            );
	            {
	              endMeasure(instance, `hydrate`);
	            }
	          };
	          if (isAsyncWrapperVNode) {
	            initialVNode.type.__asyncLoader().then(
	              () => !instance.isUnmounted && hydrateSubTree()
	            );
	          } else {
	            hydrateSubTree();
	          }
	        } else {
	          {
	            startMeasure(instance, `render`);
	          }
	          const subTree = instance.subTree = renderComponentRoot(instance);
	          {
	            endMeasure(instance, `render`);
	          }
	          {
	            startMeasure(instance, `patch`);
	          }
	          patch(
	            null,
	            subTree,
	            container,
	            anchor,
	            instance,
	            parentSuspense,
	            namespace
	          );
	          {
	            endMeasure(instance, `patch`);
	          }
	          initialVNode.el = subTree.el;
	        }
	        if (m) {
	          queuePostRenderEffect(m, parentSuspense);
	        }
	        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
	          const scopedInitialVNode = initialVNode;
	          queuePostRenderEffect(
	            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
	            parentSuspense
	          );
	        }
	        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
	          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
	        }
	        instance.isMounted = true;
	        {
	          devtoolsComponentAdded(instance);
	        }
	        initialVNode = container = anchor = null;
	      } else {
	        let { next, bu, u, parent, vnode } = instance;
	        {
	          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
	          if (nonHydratedAsyncRoot) {
	            if (next) {
	              next.el = vnode.el;
	              updateComponentPreRender(instance, next, optimized);
	            }
	            nonHydratedAsyncRoot.asyncDep.then(() => {
	              if (!instance.isUnmounted) {
	                componentUpdateFn();
	              }
	            });
	            return;
	          }
	        }
	        let originNext = next;
	        let vnodeHook;
	        {
	          pushWarningContext(next || instance.vnode);
	        }
	        toggleRecurse(instance, false);
	        if (next) {
	          next.el = vnode.el;
	          updateComponentPreRender(instance, next, optimized);
	        } else {
	          next = vnode;
	        }
	        if (bu) {
	          shared.invokeArrayFns(bu);
	        }
	        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
	          invokeVNodeHook(vnodeHook, parent, next, vnode);
	        }
	        toggleRecurse(instance, true);
	        {
	          startMeasure(instance, `render`);
	        }
	        const nextTree = renderComponentRoot(instance);
	        {
	          endMeasure(instance, `render`);
	        }
	        const prevTree = instance.subTree;
	        instance.subTree = nextTree;
	        {
	          startMeasure(instance, `patch`);
	        }
	        patch(
	          prevTree,
	          nextTree,
	          hostParentNode(prevTree.el),
	          getNextHostNode(prevTree),
	          instance,
	          parentSuspense,
	          namespace
	        );
	        {
	          endMeasure(instance, `patch`);
	        }
	        next.el = nextTree.el;
	        if (originNext === null) {
	          updateHOCHostEl(instance, nextTree.el);
	        }
	        if (u) {
	          queuePostRenderEffect(u, parentSuspense);
	        }
	        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
	          queuePostRenderEffect(
	            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
	            parentSuspense
	          );
	        }
	        {
	          devtoolsComponentUpdated(instance);
	        }
	        {
	          popWarningContext();
	        }
	      }
	    };
	    const effect = instance.effect = new reactivity.ReactiveEffect(
	      componentUpdateFn,
	      shared.NOOP,
	      () => queueJob(update),
	      instance.scope
	    );
	    const update = instance.update = () => {
	      if (effect.dirty) {
	        effect.run();
	      }
	    };
	    update.i = instance;
	    update.id = instance.uid;
	    toggleRecurse(instance, true);
	    {
	      effect.onTrack = instance.rtc ? (e) => shared.invokeArrayFns(instance.rtc, e) : void 0;
	      effect.onTrigger = instance.rtg ? (e) => shared.invokeArrayFns(instance.rtg, e) : void 0;
	    }
	    update();
	  };
	  const updateComponentPreRender = (instance, nextVNode, optimized) => {
	    nextVNode.component = instance;
	    const prevProps = instance.vnode.props;
	    instance.vnode = nextVNode;
	    instance.next = null;
	    updateProps(instance, nextVNode.props, prevProps, optimized);
	    updateSlots(instance, nextVNode.children, optimized);
	    reactivity.pauseTracking();
	    flushPreFlushCbs(instance);
	    reactivity.resetTracking();
	  };
	  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
	    const c1 = n1 && n1.children;
	    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
	    const c2 = n2.children;
	    const { patchFlag, shapeFlag } = n2;
	    if (patchFlag > 0) {
	      if (patchFlag & 128) {
	        patchKeyedChildren(
	          c1,
	          c2,
	          container,
	          anchor,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	        return;
	      } else if (patchFlag & 256) {
	        patchUnkeyedChildren(
	          c1,
	          c2,
	          container,
	          anchor,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	        return;
	      }
	    }
	    if (shapeFlag & 8) {
	      if (prevShapeFlag & 16) {
	        unmountChildren(c1, parentComponent, parentSuspense);
	      }
	      if (c2 !== c1) {
	        hostSetElementText(container, c2);
	      }
	    } else {
	      if (prevShapeFlag & 16) {
	        if (shapeFlag & 16) {
	          patchKeyedChildren(
	            c1,
	            c2,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	        } else {
	          unmountChildren(c1, parentComponent, parentSuspense, true);
	        }
	      } else {
	        if (prevShapeFlag & 8) {
	          hostSetElementText(container, "");
	        }
	        if (shapeFlag & 16) {
	          mountChildren(
	            c2,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	        }
	      }
	    }
	  };
	  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    c1 = c1 || shared.EMPTY_ARR;
	    c2 = c2 || shared.EMPTY_ARR;
	    const oldLength = c1.length;
	    const newLength = c2.length;
	    const commonLength = Math.min(oldLength, newLength);
	    let i;
	    for (i = 0; i < commonLength; i++) {
	      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
	      patch(
	        c1[i],
	        nextChild,
	        container,
	        null,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	    }
	    if (oldLength > newLength) {
	      unmountChildren(
	        c1,
	        parentComponent,
	        parentSuspense,
	        true,
	        false,
	        commonLength
	      );
	    } else {
	      mountChildren(
	        c2,
	        container,
	        anchor,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized,
	        commonLength
	      );
	    }
	  };
	  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
	    let i = 0;
	    const l2 = c2.length;
	    let e1 = c1.length - 1;
	    let e2 = l2 - 1;
	    while (i <= e1 && i <= e2) {
	      const n1 = c1[i];
	      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
	      if (isSameVNodeType(n1, n2)) {
	        patch(
	          n1,
	          n2,
	          container,
	          null,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	      } else {
	        break;
	      }
	      i++;
	    }
	    while (i <= e1 && i <= e2) {
	      const n1 = c1[e1];
	      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
	      if (isSameVNodeType(n1, n2)) {
	        patch(
	          n1,
	          n2,
	          container,
	          null,
	          parentComponent,
	          parentSuspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	      } else {
	        break;
	      }
	      e1--;
	      e2--;
	    }
	    if (i > e1) {
	      if (i <= e2) {
	        const nextPos = e2 + 1;
	        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
	        while (i <= e2) {
	          patch(
	            null,
	            c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]),
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	          i++;
	        }
	      }
	    } else if (i > e2) {
	      while (i <= e1) {
	        unmount(c1[i], parentComponent, parentSuspense, true);
	        i++;
	      }
	    } else {
	      const s1 = i;
	      const s2 = i;
	      const keyToNewIndexMap =  new Map();
	      for (i = s2; i <= e2; i++) {
	        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
	        if (nextChild.key != null) {
	          if (keyToNewIndexMap.has(nextChild.key)) {
	            warn$1(
	              `Duplicate keys found during update:`,
	              JSON.stringify(nextChild.key),
	              `Make sure keys are unique.`
	            );
	          }
	          keyToNewIndexMap.set(nextChild.key, i);
	        }
	      }
	      let j;
	      let patched = 0;
	      const toBePatched = e2 - s2 + 1;
	      let moved = false;
	      let maxNewIndexSoFar = 0;
	      const newIndexToOldIndexMap = new Array(toBePatched);
	      for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;
	      for (i = s1; i <= e1; i++) {
	        const prevChild = c1[i];
	        if (patched >= toBePatched) {
	          unmount(prevChild, parentComponent, parentSuspense, true);
	          continue;
	        }
	        let newIndex;
	        if (prevChild.key != null) {
	          newIndex = keyToNewIndexMap.get(prevChild.key);
	        } else {
	          for (j = s2; j <= e2; j++) {
	            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
	              newIndex = j;
	              break;
	            }
	          }
	        }
	        if (newIndex === void 0) {
	          unmount(prevChild, parentComponent, parentSuspense, true);
	        } else {
	          newIndexToOldIndexMap[newIndex - s2] = i + 1;
	          if (newIndex >= maxNewIndexSoFar) {
	            maxNewIndexSoFar = newIndex;
	          } else {
	            moved = true;
	          }
	          patch(
	            prevChild,
	            c2[newIndex],
	            container,
	            null,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	          patched++;
	        }
	      }
	      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : shared.EMPTY_ARR;
	      j = increasingNewIndexSequence.length - 1;
	      for (i = toBePatched - 1; i >= 0; i--) {
	        const nextIndex = s2 + i;
	        const nextChild = c2[nextIndex];
	        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
	        if (newIndexToOldIndexMap[i] === 0) {
	          patch(
	            null,
	            nextChild,
	            container,
	            anchor,
	            parentComponent,
	            parentSuspense,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	        } else if (moved) {
	          if (j < 0 || i !== increasingNewIndexSequence[j]) {
	            move(nextChild, container, anchor, 2);
	          } else {
	            j--;
	          }
	        }
	      }
	    }
	  };
	  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
	    const { el, type, transition, children, shapeFlag } = vnode;
	    if (shapeFlag & 6) {
	      move(vnode.component.subTree, container, anchor, moveType);
	      return;
	    }
	    if (shapeFlag & 128) {
	      vnode.suspense.move(container, anchor, moveType);
	      return;
	    }
	    if (shapeFlag & 64) {
	      type.move(vnode, container, anchor, internals);
	      return;
	    }
	    if (type === Fragment) {
	      hostInsert(el, container, anchor);
	      for (let i = 0; i < children.length; i++) {
	        move(children[i], container, anchor, moveType);
	      }
	      hostInsert(vnode.anchor, container, anchor);
	      return;
	    }
	    if (type === Static) {
	      moveStaticNode(vnode, container, anchor);
	      return;
	    }
	    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
	    if (needTransition2) {
	      if (moveType === 0) {
	        transition.beforeEnter(el);
	        hostInsert(el, container, anchor);
	        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
	      } else {
	        const { leave, delayLeave, afterLeave } = transition;
	        const remove2 = () => hostInsert(el, container, anchor);
	        const performLeave = () => {
	          leave(el, () => {
	            remove2();
	            afterLeave && afterLeave();
	          });
	        };
	        if (delayLeave) {
	          delayLeave(el, remove2, performLeave);
	        } else {
	          performLeave();
	        }
	      }
	    } else {
	      hostInsert(el, container, anchor);
	    }
	  };
	  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
	    const {
	      type,
	      props,
	      ref,
	      children,
	      dynamicChildren,
	      shapeFlag,
	      patchFlag,
	      dirs,
	      cacheIndex
	    } = vnode;
	    if (patchFlag === -2) {
	      optimized = false;
	    }
	    if (ref != null) {
	      setRef(ref, null, parentSuspense, vnode, true);
	    }
	    if (cacheIndex != null) {
	      parentComponent.renderCache[cacheIndex] = void 0;
	    }
	    if (shapeFlag & 256) {
	      parentComponent.ctx.deactivate(vnode);
	      return;
	    }
	    const shouldInvokeDirs = shapeFlag & 1 && dirs;
	    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
	    let vnodeHook;
	    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
	      invokeVNodeHook(vnodeHook, parentComponent, vnode);
	    }
	    if (shapeFlag & 6) {
	      unmountComponent(vnode.component, parentSuspense, doRemove);
	    } else {
	      if (shapeFlag & 128) {
	        vnode.suspense.unmount(parentSuspense, doRemove);
	        return;
	      }
	      if (shouldInvokeDirs) {
	        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
	      }
	      if (shapeFlag & 64) {
	        vnode.type.remove(
	          vnode,
	          parentComponent,
	          parentSuspense,
	          internals,
	          doRemove
	        );
	      } else if (dynamicChildren &&
	      !dynamicChildren.hasOnce &&
	      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
	        unmountChildren(
	          dynamicChildren,
	          parentComponent,
	          parentSuspense,
	          false,
	          true
	        );
	      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
	        unmountChildren(children, parentComponent, parentSuspense);
	      }
	      if (doRemove) {
	        remove(vnode);
	      }
	    }
	    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
	      queuePostRenderEffect(() => {
	        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
	        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
	      }, parentSuspense);
	    }
	  };
	  const remove = (vnode) => {
	    const { type, el, anchor, transition } = vnode;
	    if (type === Fragment) {
	      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
	        vnode.children.forEach((child) => {
	          if (child.type === Comment) {
	            hostRemove(child.el);
	          } else {
	            remove(child);
	          }
	        });
	      } else {
	        removeFragment(el, anchor);
	      }
	      return;
	    }
	    if (type === Static) {
	      removeStaticNode(vnode);
	      return;
	    }
	    const performRemove = () => {
	      hostRemove(el);
	      if (transition && !transition.persisted && transition.afterLeave) {
	        transition.afterLeave();
	      }
	    };
	    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
	      const { leave, delayLeave } = transition;
	      const performLeave = () => leave(el, performRemove);
	      if (delayLeave) {
	        delayLeave(vnode.el, performRemove, performLeave);
	      } else {
	        performLeave();
	      }
	    } else {
	      performRemove();
	    }
	  };
	  const removeFragment = (cur, end) => {
	    let next;
	    while (cur !== end) {
	      next = hostNextSibling(cur);
	      hostRemove(cur);
	      cur = next;
	    }
	    hostRemove(end);
	  };
	  const unmountComponent = (instance, parentSuspense, doRemove) => {
	    if (instance.type.__hmrId) {
	      unregisterHMR(instance);
	    }
	    const { bum, scope, update, subTree, um, m, a } = instance;
	    invalidateMount(m);
	    invalidateMount(a);
	    if (bum) {
	      shared.invokeArrayFns(bum);
	    }
	    scope.stop();
	    if (update) {
	      update.active = false;
	      unmount(subTree, instance, parentSuspense, doRemove);
	    }
	    if (um) {
	      queuePostRenderEffect(um, parentSuspense);
	    }
	    queuePostRenderEffect(() => {
	      instance.isUnmounted = true;
	    }, parentSuspense);
	    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
	      parentSuspense.deps--;
	      if (parentSuspense.deps === 0) {
	        parentSuspense.resolve();
	      }
	    }
	    {
	      devtoolsComponentRemoved(instance);
	    }
	  };
	  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
	    for (let i = start; i < children.length; i++) {
	      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
	    }
	  };
	  const getNextHostNode = (vnode) => {
	    if (vnode.shapeFlag & 6) {
	      return getNextHostNode(vnode.component.subTree);
	    }
	    if (vnode.shapeFlag & 128) {
	      return vnode.suspense.next();
	    }
	    const el = hostNextSibling(vnode.anchor || vnode.el);
	    const teleportEnd = el && el[TeleportEndKey];
	    return teleportEnd ? hostNextSibling(teleportEnd) : el;
	  };
	  let isFlushing = false;
	  const render = (vnode, container, namespace) => {
	    if (vnode == null) {
	      if (container._vnode) {
	        unmount(container._vnode, null, null, true);
	      }
	    } else {
	      patch(
	        container._vnode || null,
	        vnode,
	        container,
	        null,
	        null,
	        null,
	        namespace
	      );
	    }
	    if (!isFlushing) {
	      isFlushing = true;
	      flushPreFlushCbs();
	      flushPostFlushCbs();
	      isFlushing = false;
	    }
	    container._vnode = vnode;
	  };
	  const internals = {
	    p: patch,
	    um: unmount,
	    m: move,
	    r: remove,
	    mt: mountComponent,
	    mc: mountChildren,
	    pc: patchChildren,
	    pbc: patchBlockChildren,
	    n: getNextHostNode,
	    o: options
	  };
	  let hydrate;
	  let hydrateNode;
	  if (createHydrationFns) {
	    [hydrate, hydrateNode] = createHydrationFns(
	      internals
	    );
	  }
	  return {
	    render,
	    hydrate,
	    createApp: createAppAPI(render, hydrate)
	  };
	}
	function resolveChildrenNamespace({ type, props }, currentNamespace) {
	  return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
	}
	function toggleRecurse({ effect, update }, allowed) {
	  effect.allowRecurse = update.allowRecurse = allowed;
	}
	function needTransition(parentSuspense, transition) {
	  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
	}
	function traverseStaticChildren(n1, n2, shallow = false) {
	  const ch1 = n1.children;
	  const ch2 = n2.children;
	  if (shared.isArray(ch1) && shared.isArray(ch2)) {
	    for (let i = 0; i < ch1.length; i++) {
	      const c1 = ch1[i];
	      let c2 = ch2[i];
	      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
	        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
	          c2 = ch2[i] = cloneIfMounted(ch2[i]);
	          c2.el = c1.el;
	        }
	        if (!shallow && c2.patchFlag !== -2)
	          traverseStaticChildren(c1, c2);
	      }
	      if (c2.type === Text) {
	        c2.el = c1.el;
	      }
	      if (c2.type === Comment && !c2.el) {
	        c2.el = c1.el;
	      }
	    }
	  }
	}
	function getSequence(arr) {
	  const p = arr.slice();
	  const result = [0];
	  let i, j, u, v, c;
	  const len = arr.length;
	  for (i = 0; i < len; i++) {
	    const arrI = arr[i];
	    if (arrI !== 0) {
	      j = result[result.length - 1];
	      if (arr[j] < arrI) {
	        p[i] = j;
	        result.push(i);
	        continue;
	      }
	      u = 0;
	      v = result.length - 1;
	      while (u < v) {
	        c = u + v >> 1;
	        if (arr[result[c]] < arrI) {
	          u = c + 1;
	        } else {
	          v = c;
	        }
	      }
	      if (arrI < arr[result[u]]) {
	        if (u > 0) {
	          p[i] = result[u - 1];
	        }
	        result[u] = i;
	      }
	    }
	  }
	  u = result.length;
	  v = result[u - 1];
	  while (u-- > 0) {
	    result[u] = v;
	    v = p[v];
	  }
	  return result;
	}
	function locateNonHydratedAsyncRoot(instance) {
	  const subComponent = instance.subTree.component;
	  if (subComponent) {
	    if (subComponent.asyncDep && !subComponent.asyncResolved) {
	      return subComponent;
	    } else {
	      return locateNonHydratedAsyncRoot(subComponent);
	    }
	  }
	}
	function invalidateMount(hooks) {
	  if (hooks) {
	    for (let i = 0; i < hooks.length; i++) hooks[i].active = false;
	  }
	}
	const ssrContextKey = Symbol.for("v-scx");
	const useSSRContext = () => {
	  {
	    const ctx = inject(ssrContextKey);
	    if (!ctx) {
	      warn$1(
	        `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
	      );
	    }
	    return ctx;
	  }
	};
	function watchEffect(effect, options) {
	  return doWatch(effect, null, options);
	}
	function watchPostEffect(effect, options) {
	  return doWatch(
	    effect,
	    null,
	    shared.extend({}, options, { flush: "post" })
	  );
	}
	function watchSyncEffect(effect, options) {
	  return doWatch(
	    effect,
	    null,
	    shared.extend({}, options, { flush: "sync" })
	  );
	}
	const INITIAL_WATCHER_VALUE = {};
	function watch(source, cb, options) {
	  if (!shared.isFunction(cb)) {
	    warn$1(
	      `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
	    );
	  }
	  return doWatch(source, cb, options);
	}
	function doWatch(source, cb, {
	  immediate,
	  deep,
	  flush,
	  once,
	  onTrack,
	  onTrigger
	} = shared.EMPTY_OBJ) {
	  if (cb && once) {
	    const _cb = cb;
	    cb = (...args) => {
	      _cb(...args);
	      unwatch();
	    };
	  }
	  if (deep !== void 0 && typeof deep === "number") {
	    warn$1(
	      `watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.`
	    );
	  }
	  if (!cb) {
	    if (immediate !== void 0) {
	      warn$1(
	        `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
	      );
	    }
	    if (deep !== void 0) {
	      warn$1(
	        `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
	      );
	    }
	    if (once !== void 0) {
	      warn$1(
	        `watch() "once" option is only respected when using the watch(source, callback, options?) signature.`
	      );
	    }
	  }
	  const warnInvalidSource = (s) => {
	    warn$1(
	      `Invalid watch source: `,
	      s,
	      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
	    );
	  };
	  const instance = currentInstance;
	  const reactiveGetter = (source2) => deep === true ? source2 : (
	    traverse(source2, deep === false ? 1 : void 0)
	  );
	  let getter;
	  let forceTrigger = false;
	  let isMultiSource = false;
	  if (reactivity.isRef(source)) {
	    getter = () => source.value;
	    forceTrigger = reactivity.isShallow(source);
	  } else if (reactivity.isReactive(source)) {
	    getter = () => reactiveGetter(source);
	    forceTrigger = true;
	  } else if (shared.isArray(source)) {
	    isMultiSource = true;
	    forceTrigger = source.some((s) => reactivity.isReactive(s) || reactivity.isShallow(s));
	    getter = () => source.map((s) => {
	      if (reactivity.isRef(s)) {
	        return s.value;
	      } else if (reactivity.isReactive(s)) {
	        return reactiveGetter(s);
	      } else if (shared.isFunction(s)) {
	        return callWithErrorHandling(s, instance, 2);
	      } else {
	        warnInvalidSource(s);
	      }
	    });
	  } else if (shared.isFunction(source)) {
	    if (cb) {
	      getter = () => callWithErrorHandling(source, instance, 2);
	    } else {
	      getter = () => {
	        if (cleanup) {
	          cleanup();
	        }
	        return callWithAsyncErrorHandling(
	          source,
	          instance,
	          3,
	          [onCleanup]
	        );
	      };
	    }
	  } else {
	    getter = shared.NOOP;
	    warnInvalidSource(source);
	  }
	  if (cb && deep) {
	    const baseGetter = getter;
	    getter = () => traverse(baseGetter());
	  }
	  let cleanup;
	  let onCleanup = (fn) => {
	    cleanup = effect.onStop = () => {
	      callWithErrorHandling(fn, instance, 4);
	      cleanup = effect.onStop = void 0;
	    };
	  };
	  let ssrCleanup;
	  if (isInSSRComponentSetup) {
	    onCleanup = shared.NOOP;
	    if (!cb) {
	      getter();
	    } else if (immediate) {
	      callWithAsyncErrorHandling(cb, instance, 3, [
	        getter(),
	        isMultiSource ? [] : void 0,
	        onCleanup
	      ]);
	    }
	    if (flush === "sync") {
	      const ctx = useSSRContext();
	      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
	    } else {
	      return shared.NOOP;
	    }
	  }
	  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
	  const job = () => {
	    if (!effect.active || !effect.dirty) {
	      return;
	    }
	    if (cb) {
	      const newValue = effect.run();
	      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => shared.hasChanged(v, oldValue[i])) : shared.hasChanged(newValue, oldValue)) || false) {
	        if (cleanup) {
	          cleanup();
	        }
	        callWithAsyncErrorHandling(cb, instance, 3, [
	          newValue,
	          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
	          onCleanup
	        ]);
	        oldValue = newValue;
	      }
	    } else {
	      effect.run();
	    }
	  };
	  job.allowRecurse = !!cb;
	  let scheduler;
	  if (flush === "sync") {
	    scheduler = job;
	  } else if (flush === "post") {
	    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
	  } else {
	    job.pre = true;
	    if (instance) job.id = instance.uid;
	    scheduler = () => queueJob(job);
	  }
	  const effect = new reactivity.ReactiveEffect(getter, shared.NOOP, scheduler);
	  const scope = reactivity.getCurrentScope();
	  const unwatch = () => {
	    effect.stop();
	    if (scope) {
	      shared.remove(scope.effects, effect);
	    }
	  };
	  {
	    effect.onTrack = onTrack;
	    effect.onTrigger = onTrigger;
	  }
	  if (cb) {
	    if (immediate) {
	      job();
	    } else {
	      oldValue = effect.run();
	    }
	  } else if (flush === "post") {
	    queuePostRenderEffect(
	      effect.run.bind(effect),
	      instance && instance.suspense
	    );
	  } else {
	    effect.run();
	  }
	  if (ssrCleanup) ssrCleanup.push(unwatch);
	  return unwatch;
	}
	function instanceWatch(source, value, options) {
	  const publicThis = this.proxy;
	  const getter = shared.isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
	  let cb;
	  if (shared.isFunction(value)) {
	    cb = value;
	  } else {
	    cb = value.handler;
	    options = value;
	  }
	  const reset = setCurrentInstance(this);
	  const res = doWatch(getter, cb.bind(publicThis), options);
	  reset();
	  return res;
	}
	function createPathGetter(ctx, path) {
	  const segments = path.split(".");
	  return () => {
	    let cur = ctx;
	    for (let i = 0; i < segments.length && cur; i++) {
	      cur = cur[segments[i]];
	    }
	    return cur;
	  };
	}
	function traverse(value, depth = Infinity, seen) {
	  if (depth <= 0 || !shared.isObject(value) || value["__v_skip"]) {
	    return value;
	  }
	  seen = seen ||  new Set();
	  if (seen.has(value)) {
	    return value;
	  }
	  seen.add(value);
	  depth--;
	  if (reactivity.isRef(value)) {
	    traverse(value.value, depth, seen);
	  } else if (shared.isArray(value)) {
	    for (let i = 0; i < value.length; i++) {
	      traverse(value[i], depth, seen);
	    }
	  } else if (shared.isSet(value) || shared.isMap(value)) {
	    value.forEach((v) => {
	      traverse(v, depth, seen);
	    });
	  } else if (shared.isPlainObject(value)) {
	    for (const key in value) {
	      traverse(value[key], depth, seen);
	    }
	    for (const key of Object.getOwnPropertySymbols(value)) {
	      if (Object.prototype.propertyIsEnumerable.call(value, key)) {
	        traverse(value[key], depth, seen);
	      }
	    }
	  }
	  return value;
	}
	function useModel(props, name, options = shared.EMPTY_OBJ) {
	  const i = getCurrentInstance();
	  if (!i) {
	    warn$1(`useModel() called without active instance.`);
	    return reactivity.ref();
	  }
	  if (!i.propsOptions[0][name]) {
	    warn$1(`useModel() called with prop "${name}" which is not declared.`);
	    return reactivity.ref();
	  }
	  const camelizedName = shared.camelize(name);
	  const hyphenatedName = shared.hyphenate(name);
	  const modifiers = getModelModifiers(props, name);
	  const res = reactivity.customRef((track, trigger) => {
	    let localValue;
	    let prevSetValue;
	    let prevEmittedValue;
	    watchSyncEffect(() => {
	      const propValue = props[name];
	      if (shared.hasChanged(localValue, propValue)) {
	        localValue = propValue;
	        trigger();
	      }
	    });
	    return {
	      get() {
	        track();
	        return options.get ? options.get(localValue) : localValue;
	      },
	      set(value) {
	        if (!shared.hasChanged(value, localValue)) {
	          return;
	        }
	        const rawProps = i.vnode.props;
	        if (!(rawProps &&
	        (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps))) {
	          localValue = value;
	          trigger();
	        }
	        const emittedValue = options.set ? options.set(value) : value;
	        i.emit(`update:${name}`, emittedValue);
	        if (value !== emittedValue && value !== prevSetValue && emittedValue === prevEmittedValue) {
	          trigger();
	        }
	        prevSetValue = value;
	        prevEmittedValue = emittedValue;
	      }
	    };
	  });
	  res[Symbol.iterator] = () => {
	    let i2 = 0;
	    return {
	      next() {
	        if (i2 < 2) {
	          return { value: i2++ ? modifiers || shared.EMPTY_OBJ : res, done: false };
	        } else {
	          return { done: true };
	        }
	      }
	    };
	  };
	  return res;
	}
	const getModelModifiers = (props, modelName) => {
	  return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${shared.camelize(modelName)}Modifiers`] || props[`${shared.hyphenate(modelName)}Modifiers`];
	};
	function emit(instance, event, ...rawArgs) {
	  if (instance.isUnmounted) return;
	  const props = instance.vnode.props || shared.EMPTY_OBJ;
	  {
	    const {
	      emitsOptions,
	      propsOptions: [propsOptions]
	    } = instance;
	    if (emitsOptions) {
	      if (!(event in emitsOptions) && true) {
	        if (!propsOptions || !(shared.toHandlerKey(event) in propsOptions)) {
	          warn$1(
	            `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${shared.toHandlerKey(event)}" prop.`
	          );
	        }
	      } else {
	        const validator = emitsOptions[event];
	        if (shared.isFunction(validator)) {
	          const isValid = validator(...rawArgs);
	          if (!isValid) {
	            warn$1(
	              `Invalid event arguments: event validation failed for event "${event}".`
	            );
	          }
	        }
	      }
	    }
	  }
	  let args = rawArgs;
	  const isModelListener = event.startsWith("update:");
	  const modifiers = isModelListener && getModelModifiers(props, event.slice(7));
	  if (modifiers) {
	    if (modifiers.trim) {
	      args = rawArgs.map((a) => shared.isString(a) ? a.trim() : a);
	    }
	    if (modifiers.number) {
	      args = rawArgs.map(shared.looseToNumber);
	    }
	  }
	  {
	    devtoolsComponentEmit(instance, event, args);
	  }
	  {
	    const lowerCaseEvent = event.toLowerCase();
	    if (lowerCaseEvent !== event && props[shared.toHandlerKey(lowerCaseEvent)]) {
	      warn$1(
	        `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
	          instance,
	          instance.type
	        )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${shared.hyphenate(
	          event
	        )}" instead of "${event}".`
	      );
	    }
	  }
	  let handlerName;
	  let handler = props[handlerName = shared.toHandlerKey(event)] ||
	  props[handlerName = shared.toHandlerKey(shared.camelize(event))];
	  if (!handler && isModelListener) {
	    handler = props[handlerName = shared.toHandlerKey(shared.hyphenate(event))];
	  }
	  if (handler) {
	    callWithAsyncErrorHandling(
	      handler,
	      instance,
	      6,
	      args
	    );
	  }
	  const onceHandler = props[handlerName + `Once`];
	  if (onceHandler) {
	    if (!instance.emitted) {
	      instance.emitted = {};
	    } else if (instance.emitted[handlerName]) {
	      return;
	    }
	    instance.emitted[handlerName] = true;
	    callWithAsyncErrorHandling(
	      onceHandler,
	      instance,
	      6,
	      args
	    );
	  }
	}
	function normalizeEmitsOptions(comp, appContext, asMixin = false) {
	  const cache = appContext.emitsCache;
	  const cached = cache.get(comp);
	  if (cached !== void 0) {
	    return cached;
	  }
	  const raw = comp.emits;
	  let normalized = {};
	  let hasExtends = false;
	  if (!shared.isFunction(comp)) {
	    const extendEmits = (raw2) => {
	      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
	      if (normalizedFromExtend) {
	        hasExtends = true;
	        shared.extend(normalized, normalizedFromExtend);
	      }
	    };
	    if (!asMixin && appContext.mixins.length) {
	      appContext.mixins.forEach(extendEmits);
	    }
	    if (comp.extends) {
	      extendEmits(comp.extends);
	    }
	    if (comp.mixins) {
	      comp.mixins.forEach(extendEmits);
	    }
	  }
	  if (!raw && !hasExtends) {
	    if (shared.isObject(comp)) {
	      cache.set(comp, null);
	    }
	    return null;
	  }
	  if (shared.isArray(raw)) {
	    raw.forEach((key) => normalized[key] = null);
	  } else {
	    shared.extend(normalized, raw);
	  }
	  if (shared.isObject(comp)) {
	    cache.set(comp, normalized);
	  }
	  return normalized;
	}
	function isEmitListener(options, key) {
	  if (!options || !shared.isOn(key)) {
	    return false;
	  }
	  key = key.slice(2).replace(/Once$/, "");
	  return shared.hasOwn(options, key[0].toLowerCase() + key.slice(1)) || shared.hasOwn(options, shared.hyphenate(key)) || shared.hasOwn(options, key);
	}
	let accessedAttrs = false;
	function markAttrsAccessed() {
	  accessedAttrs = true;
	}
	function renderComponentRoot(instance) {
	  const {
	    type: Component,
	    vnode,
	    proxy,
	    withProxy,
	    propsOptions: [propsOptions],
	    slots,
	    attrs,
	    emit,
	    render,
	    renderCache,
	    props,
	    data,
	    setupState,
	    ctx,
	    inheritAttrs
	  } = instance;
	  const prev = setCurrentRenderingInstance(instance);
	  let result;
	  let fallthroughAttrs;
	  {
	    accessedAttrs = false;
	  }
	  try {
	    if (vnode.shapeFlag & 4) {
	      const proxyToUse = withProxy || proxy;
	      const thisProxy = setupState.__isScriptSetup ? new Proxy(proxyToUse, {
	        get(target, key, receiver) {
	          warn$1(
	            `Property '${String(
	              key
	            )}' was accessed via 'this'. Avoid using 'this' in templates.`
	          );
	          return Reflect.get(target, key, receiver);
	        }
	      }) : proxyToUse;
	      result = normalizeVNode(
	        render.call(
	          thisProxy,
	          proxyToUse,
	          renderCache,
	          true ? reactivity.shallowReadonly(props) : props,
	          setupState,
	          data,
	          ctx
	        )
	      );
	      fallthroughAttrs = attrs;
	    } else {
	      const render2 = Component;
	      if (attrs === props) {
	        markAttrsAccessed();
	      }
	      result = normalizeVNode(
	        render2.length > 1 ? render2(
	          true ? reactivity.shallowReadonly(props) : props,
	          true ? {
	            get attrs() {
	              markAttrsAccessed();
	              return reactivity.shallowReadonly(attrs);
	            },
	            slots,
	            emit
	          } : { attrs, slots, emit }
	        ) : render2(
	          true ? reactivity.shallowReadonly(props) : props,
	          null
	        )
	      );
	      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
	    }
	  } catch (err) {
	    blockStack.length = 0;
	    handleError(err, instance, 1);
	    result = createVNode(Comment);
	  }
	  let root = result;
	  let setRoot = void 0;
	  if (result.patchFlag > 0 && result.patchFlag & 2048) {
	    [root, setRoot] = getChildRoot(result);
	  }
	  if (fallthroughAttrs && inheritAttrs !== false) {
	    const keys = Object.keys(fallthroughAttrs);
	    const { shapeFlag } = root;
	    if (keys.length) {
	      if (shapeFlag & (1 | 6)) {
	        if (propsOptions && keys.some(shared.isModelListener)) {
	          fallthroughAttrs = filterModelListeners(
	            fallthroughAttrs,
	            propsOptions
	          );
	        }
	        root = cloneVNode(root, fallthroughAttrs, false, true);
	      } else if (!accessedAttrs && root.type !== Comment) {
	        const allAttrs = Object.keys(attrs);
	        const eventAttrs = [];
	        const extraAttrs = [];
	        for (let i = 0, l = allAttrs.length; i < l; i++) {
	          const key = allAttrs[i];
	          if (shared.isOn(key)) {
	            if (!shared.isModelListener(key)) {
	              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
	            }
	          } else {
	            extraAttrs.push(key);
	          }
	        }
	        if (extraAttrs.length) {
	          warn$1(
	            `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
	          );
	        }
	        if (eventAttrs.length) {
	          warn$1(
	            `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
	          );
	        }
	      }
	    }
	  }
	  if (vnode.dirs) {
	    if (!isElementRoot(root)) {
	      warn$1(
	        `Runtime directive used on component with non-element root node. The directives will not function as intended.`
	      );
	    }
	    root = cloneVNode(root, null, false, true);
	    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
	  }
	  if (vnode.transition) {
	    if (!isElementRoot(root)) {
	      warn$1(
	        `Component inside <Transition> renders non-element root node that cannot be animated.`
	      );
	    }
	    root.transition = vnode.transition;
	  }
	  if (setRoot) {
	    setRoot(root);
	  } else {
	    result = root;
	  }
	  setCurrentRenderingInstance(prev);
	  return result;
	}
	const getChildRoot = (vnode) => {
	  const rawChildren = vnode.children;
	  const dynamicChildren = vnode.dynamicChildren;
	  const childRoot = filterSingleRoot(rawChildren, false);
	  if (!childRoot) {
	    return [vnode, void 0];
	  } else if (childRoot.patchFlag > 0 && childRoot.patchFlag & 2048) {
	    return getChildRoot(childRoot);
	  }
	  const index = rawChildren.indexOf(childRoot);
	  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
	  const setRoot = (updatedRoot) => {
	    rawChildren[index] = updatedRoot;
	    if (dynamicChildren) {
	      if (dynamicIndex > -1) {
	        dynamicChildren[dynamicIndex] = updatedRoot;
	      } else if (updatedRoot.patchFlag > 0) {
	        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
	      }
	    }
	  };
	  return [normalizeVNode(childRoot), setRoot];
	};
	function filterSingleRoot(children, recurse = true) {
	  let singleRoot;
	  for (let i = 0; i < children.length; i++) {
	    const child = children[i];
	    if (isVNode(child)) {
	      if (child.type !== Comment || child.children === "v-if") {
	        if (singleRoot) {
	          return;
	        } else {
	          singleRoot = child;
	          if (recurse && singleRoot.patchFlag > 0 && singleRoot.patchFlag & 2048) {
	            return filterSingleRoot(singleRoot.children);
	          }
	        }
	      }
	    } else {
	      return;
	    }
	  }
	  return singleRoot;
	}
	const getFunctionalFallthrough = (attrs) => {
	  let res;
	  for (const key in attrs) {
	    if (key === "class" || key === "style" || shared.isOn(key)) {
	      (res || (res = {}))[key] = attrs[key];
	    }
	  }
	  return res;
	};
	const filterModelListeners = (attrs, props) => {
	  const res = {};
	  for (const key in attrs) {
	    if (!shared.isModelListener(key) || !(key.slice(9) in props)) {
	      res[key] = attrs[key];
	    }
	  }
	  return res;
	};
	const isElementRoot = (vnode) => {
	  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
	};
	function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
	  const { props: prevProps, children: prevChildren, component } = prevVNode;
	  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
	  const emits = component.emitsOptions;
	  if ((prevChildren || nextChildren) && isHmrUpdating) {
	    return true;
	  }
	  if (nextVNode.dirs || nextVNode.transition) {
	    return true;
	  }
	  if (optimized && patchFlag >= 0) {
	    if (patchFlag & 1024) {
	      return true;
	    }
	    if (patchFlag & 16) {
	      if (!prevProps) {
	        return !!nextProps;
	      }
	      return hasPropsChanged(prevProps, nextProps, emits);
	    } else if (patchFlag & 8) {
	      const dynamicProps = nextVNode.dynamicProps;
	      for (let i = 0; i < dynamicProps.length; i++) {
	        const key = dynamicProps[i];
	        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
	          return true;
	        }
	      }
	    }
	  } else {
	    if (prevChildren || nextChildren) {
	      if (!nextChildren || !nextChildren.$stable) {
	        return true;
	      }
	    }
	    if (prevProps === nextProps) {
	      return false;
	    }
	    if (!prevProps) {
	      return !!nextProps;
	    }
	    if (!nextProps) {
	      return true;
	    }
	    return hasPropsChanged(prevProps, nextProps, emits);
	  }
	  return false;
	}
	function hasPropsChanged(prevProps, nextProps, emitsOptions) {
	  const nextKeys = Object.keys(nextProps);
	  if (nextKeys.length !== Object.keys(prevProps).length) {
	    return true;
	  }
	  for (let i = 0; i < nextKeys.length; i++) {
	    const key = nextKeys[i];
	    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
	      return true;
	    }
	  }
	  return false;
	}
	function updateHOCHostEl({ vnode, parent }, el) {
	  while (parent) {
	    const root = parent.subTree;
	    if (root.suspense && root.suspense.activeBranch === vnode) {
	      root.el = vnode.el;
	    }
	    if (root === vnode) {
	      (vnode = parent.vnode).el = el;
	      parent = parent.parent;
	    } else {
	      break;
	    }
	  }
	}
	const isSuspense = (type) => type.__isSuspense;
	let suspenseId = 0;
	const SuspenseImpl = {
	  name: "Suspense",
	  __isSuspense: true,
	  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
	    if (n1 == null) {
	      mountSuspense(
	        n2,
	        container,
	        anchor,
	        parentComponent,
	        parentSuspense,
	        namespace,
	        slotScopeIds,
	        optimized,
	        rendererInternals
	      );
	    } else {
	      if (parentSuspense && parentSuspense.deps > 0 && !n1.suspense.isInFallback) {
	        n2.suspense = n1.suspense;
	        n2.suspense.vnode = n2;
	        n2.el = n1.el;
	        return;
	      }
	      patchSuspense(
	        n1,
	        n2,
	        container,
	        anchor,
	        parentComponent,
	        namespace,
	        slotScopeIds,
	        optimized,
	        rendererInternals
	      );
	    }
	  },
	  hydrate: hydrateSuspense,
	  normalize: normalizeSuspenseChildren
	};
	const Suspense = SuspenseImpl ;
	function triggerEvent(vnode, name) {
	  const eventListener = vnode.props && vnode.props[name];
	  if (shared.isFunction(eventListener)) {
	    eventListener();
	  }
	}
	function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
	  const {
	    p: patch,
	    o: { createElement }
	  } = rendererInternals;
	  const hiddenContainer = createElement("div");
	  const suspense = vnode.suspense = createSuspenseBoundary(
	    vnode,
	    parentSuspense,
	    parentComponent,
	    container,
	    hiddenContainer,
	    anchor,
	    namespace,
	    slotScopeIds,
	    optimized,
	    rendererInternals
	  );
	  patch(
	    null,
	    suspense.pendingBranch = vnode.ssContent,
	    hiddenContainer,
	    null,
	    parentComponent,
	    suspense,
	    namespace,
	    slotScopeIds
	  );
	  if (suspense.deps > 0) {
	    triggerEvent(vnode, "onPending");
	    triggerEvent(vnode, "onFallback");
	    patch(
	      null,
	      vnode.ssFallback,
	      container,
	      anchor,
	      parentComponent,
	      null,
	      namespace,
	      slotScopeIds
	    );
	    setActiveBranch(suspense, vnode.ssFallback);
	  } else {
	    suspense.resolve(false, true);
	  }
	}
	function patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
	  const suspense = n2.suspense = n1.suspense;
	  suspense.vnode = n2;
	  n2.el = n1.el;
	  const newBranch = n2.ssContent;
	  const newFallback = n2.ssFallback;
	  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
	  if (pendingBranch) {
	    suspense.pendingBranch = newBranch;
	    if (isSameVNodeType(newBranch, pendingBranch)) {
	      patch(
	        pendingBranch,
	        newBranch,
	        suspense.hiddenContainer,
	        null,
	        parentComponent,
	        suspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	      if (suspense.deps <= 0) {
	        suspense.resolve();
	      } else if (isInFallback) {
	        if (!isHydrating) {
	          patch(
	            activeBranch,
	            newFallback,
	            container,
	            anchor,
	            parentComponent,
	            null,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	          setActiveBranch(suspense, newFallback);
	        }
	      }
	    } else {
	      suspense.pendingId = suspenseId++;
	      if (isHydrating) {
	        suspense.isHydrating = false;
	        suspense.activeBranch = pendingBranch;
	      } else {
	        unmount(pendingBranch, parentComponent, suspense);
	      }
	      suspense.deps = 0;
	      suspense.effects.length = 0;
	      suspense.hiddenContainer = createElement("div");
	      if (isInFallback) {
	        patch(
	          null,
	          newBranch,
	          suspense.hiddenContainer,
	          null,
	          parentComponent,
	          suspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	        if (suspense.deps <= 0) {
	          suspense.resolve();
	        } else {
	          patch(
	            activeBranch,
	            newFallback,
	            container,
	            anchor,
	            parentComponent,
	            null,
	            namespace,
	            slotScopeIds,
	            optimized
	          );
	          setActiveBranch(suspense, newFallback);
	        }
	      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
	        patch(
	          activeBranch,
	          newBranch,
	          container,
	          anchor,
	          parentComponent,
	          suspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	        suspense.resolve(true);
	      } else {
	        patch(
	          null,
	          newBranch,
	          suspense.hiddenContainer,
	          null,
	          parentComponent,
	          suspense,
	          namespace,
	          slotScopeIds,
	          optimized
	        );
	        if (suspense.deps <= 0) {
	          suspense.resolve();
	        }
	      }
	    }
	  } else {
	    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
	      patch(
	        activeBranch,
	        newBranch,
	        container,
	        anchor,
	        parentComponent,
	        suspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	      setActiveBranch(suspense, newBranch);
	    } else {
	      triggerEvent(n2, "onPending");
	      suspense.pendingBranch = newBranch;
	      if (newBranch.shapeFlag & 512) {
	        suspense.pendingId = newBranch.component.suspenseId;
	      } else {
	        suspense.pendingId = suspenseId++;
	      }
	      patch(
	        null,
	        newBranch,
	        suspense.hiddenContainer,
	        null,
	        parentComponent,
	        suspense,
	        namespace,
	        slotScopeIds,
	        optimized
	      );
	      if (suspense.deps <= 0) {
	        suspense.resolve();
	      } else {
	        const { timeout, pendingId } = suspense;
	        if (timeout > 0) {
	          setTimeout(() => {
	            if (suspense.pendingId === pendingId) {
	              suspense.fallback(newFallback);
	            }
	          }, timeout);
	        } else if (timeout === 0) {
	          suspense.fallback(newFallback);
	        }
	      }
	    }
	  }
	}
	let hasWarned = false;
	function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
	  if (!hasWarned) {
	    hasWarned = true;
	    console[console.info ? "info" : "log"](
	      `<Suspense> is an experimental feature and its API will likely change.`
	    );
	  }
	  const {
	    p: patch,
	    m: move,
	    um: unmount,
	    n: next,
	    o: { parentNode, remove }
	  } = rendererInternals;
	  let parentSuspenseId;
	  const isSuspensible = isVNodeSuspensible(vnode);
	  if (isSuspensible) {
	    if (parentSuspense && parentSuspense.pendingBranch) {
	      parentSuspenseId = parentSuspense.pendingId;
	      parentSuspense.deps++;
	    }
	  }
	  const timeout = vnode.props ? shared.toNumber(vnode.props.timeout) : void 0;
	  {
	    assertNumber(timeout, `Suspense timeout`);
	  }
	  const initialAnchor = anchor;
	  const suspense = {
	    vnode,
	    parent: parentSuspense,
	    parentComponent,
	    namespace,
	    container,
	    hiddenContainer,
	    deps: 0,
	    pendingId: suspenseId++,
	    timeout: typeof timeout === "number" ? timeout : -1,
	    activeBranch: null,
	    pendingBranch: null,
	    isInFallback: !isHydrating,
	    isHydrating,
	    isUnmounted: false,
	    effects: [],
	    resolve(resume = false, sync = false) {
	      {
	        if (!resume && !suspense.pendingBranch) {
	          throw new Error(
	            `suspense.resolve() is called without a pending branch.`
	          );
	        }
	        if (suspense.isUnmounted) {
	          throw new Error(
	            `suspense.resolve() is called on an already unmounted suspense boundary.`
	          );
	        }
	      }
	      const {
	        vnode: vnode2,
	        activeBranch,
	        pendingBranch,
	        pendingId,
	        effects,
	        parentComponent: parentComponent2,
	        container: container2
	      } = suspense;
	      let delayEnter = false;
	      if (suspense.isHydrating) {
	        suspense.isHydrating = false;
	      } else if (!resume) {
	        delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
	        if (delayEnter) {
	          activeBranch.transition.afterLeave = () => {
	            if (pendingId === suspense.pendingId) {
	              move(
	                pendingBranch,
	                container2,
	                anchor === initialAnchor ? next(activeBranch) : anchor,
	                0
	              );
	              queuePostFlushCb(effects);
	            }
	          };
	        }
	        if (activeBranch) {
	          if (parentNode(activeBranch.el) !== suspense.hiddenContainer) {
	            anchor = next(activeBranch);
	          }
	          unmount(activeBranch, parentComponent2, suspense, true);
	        }
	        if (!delayEnter) {
	          move(pendingBranch, container2, anchor, 0);
	        }
	      }
	      setActiveBranch(suspense, pendingBranch);
	      suspense.pendingBranch = null;
	      suspense.isInFallback = false;
	      let parent = suspense.parent;
	      let hasUnresolvedAncestor = false;
	      while (parent) {
	        if (parent.pendingBranch) {
	          parent.effects.push(...effects);
	          hasUnresolvedAncestor = true;
	          break;
	        }
	        parent = parent.parent;
	      }
	      if (!hasUnresolvedAncestor && !delayEnter) {
	        queuePostFlushCb(effects);
	      }
	      suspense.effects = [];
	      if (isSuspensible) {
	        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
	          parentSuspense.deps--;
	          if (parentSuspense.deps === 0 && !sync) {
	            parentSuspense.resolve();
	          }
	        }
	      }
	      triggerEvent(vnode2, "onResolve");
	    },
	    fallback(fallbackVNode) {
	      if (!suspense.pendingBranch) {
	        return;
	      }
	      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, namespace: namespace2 } = suspense;
	      triggerEvent(vnode2, "onFallback");
	      const anchor2 = next(activeBranch);
	      const mountFallback = () => {
	        if (!suspense.isInFallback) {
	          return;
	        }
	        patch(
	          null,
	          fallbackVNode,
	          container2,
	          anchor2,
	          parentComponent2,
	          null,
	          namespace2,
	          slotScopeIds,
	          optimized
	        );
	        setActiveBranch(suspense, fallbackVNode);
	      };
	      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
	      if (delayEnter) {
	        activeBranch.transition.afterLeave = mountFallback;
	      }
	      suspense.isInFallback = true;
	      unmount(
	        activeBranch,
	        parentComponent2,
	        null,
	        true
	      );
	      if (!delayEnter) {
	        mountFallback();
	      }
	    },
	    move(container2, anchor2, type) {
	      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
	      suspense.container = container2;
	    },
	    next() {
	      return suspense.activeBranch && next(suspense.activeBranch);
	    },
	    registerDep(instance, setupRenderEffect, optimized2) {
	      const isInPendingSuspense = !!suspense.pendingBranch;
	      if (isInPendingSuspense) {
	        suspense.deps++;
	      }
	      const hydratedEl = instance.vnode.el;
	      instance.asyncDep.catch((err) => {
	        handleError(err, instance, 0);
	      }).then((asyncSetupResult) => {
	        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
	          return;
	        }
	        instance.asyncResolved = true;
	        const { vnode: vnode2 } = instance;
	        {
	          pushWarningContext(vnode2);
	        }
	        handleSetupResult(instance, asyncSetupResult, false);
	        if (hydratedEl) {
	          vnode2.el = hydratedEl;
	        }
	        const placeholder = !hydratedEl && instance.subTree.el;
	        setupRenderEffect(
	          instance,
	          vnode2,
	          parentNode(hydratedEl || instance.subTree.el),
	          hydratedEl ? null : next(instance.subTree),
	          suspense,
	          namespace,
	          optimized2
	        );
	        if (placeholder) {
	          remove(placeholder);
	        }
	        updateHOCHostEl(instance, vnode2.el);
	        {
	          popWarningContext();
	        }
	        if (isInPendingSuspense && --suspense.deps === 0) {
	          suspense.resolve();
	        }
	      });
	    },
	    unmount(parentSuspense2, doRemove) {
	      suspense.isUnmounted = true;
	      if (suspense.activeBranch) {
	        unmount(
	          suspense.activeBranch,
	          parentComponent,
	          parentSuspense2,
	          doRemove
	        );
	      }
	      if (suspense.pendingBranch) {
	        unmount(
	          suspense.pendingBranch,
	          parentComponent,
	          parentSuspense2,
	          doRemove
	        );
	      }
	    }
	  };
	  return suspense;
	}
	function hydrateSuspense(node, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {
	  const suspense = vnode.suspense = createSuspenseBoundary(
	    vnode,
	    parentSuspense,
	    parentComponent,
	    node.parentNode,
	    document.createElement("div"),
	    null,
	    namespace,
	    slotScopeIds,
	    optimized,
	    rendererInternals,
	    true
	  );
	  const result = hydrateNode(
	    node,
	    suspense.pendingBranch = vnode.ssContent,
	    parentComponent,
	    suspense,
	    slotScopeIds,
	    optimized
	  );
	  if (suspense.deps === 0) {
	    suspense.resolve(false, true);
	  }
	  return result;
	}
	function normalizeSuspenseChildren(vnode) {
	  const { shapeFlag, children } = vnode;
	  const isSlotChildren = shapeFlag & 32;
	  vnode.ssContent = normalizeSuspenseSlot(
	    isSlotChildren ? children.default : children
	  );
	  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
	}
	function normalizeSuspenseSlot(s) {
	  let block;
	  if (shared.isFunction(s)) {
	    const trackBlock = isBlockTreeEnabled && s._c;
	    if (trackBlock) {
	      s._d = false;
	      openBlock();
	    }
	    s = s();
	    if (trackBlock) {
	      s._d = true;
	      block = currentBlock;
	      closeBlock();
	    }
	  }
	  if (shared.isArray(s)) {
	    const singleChild = filterSingleRoot(s);
	    if (!singleChild && s.filter((child) => child !== NULL_DYNAMIC_COMPONENT).length > 0) {
	      warn$1(`<Suspense> slots expect a single root node.`);
	    }
	    s = singleChild;
	  }
	  s = normalizeVNode(s);
	  if (block && !s.dynamicChildren) {
	    s.dynamicChildren = block.filter((c) => c !== s);
	  }
	  return s;
	}
	function queueEffectWithSuspense(fn, suspense) {
	  if (suspense && suspense.pendingBranch) {
	    if (shared.isArray(fn)) {
	      suspense.effects.push(...fn);
	    } else {
	      suspense.effects.push(fn);
	    }
	  } else {
	    queuePostFlushCb(fn);
	  }
	}
	function setActiveBranch(suspense, branch) {
	  suspense.activeBranch = branch;
	  const { vnode, parentComponent } = suspense;
	  let el = branch.el;
	  while (!el && branch.component) {
	    branch = branch.component.subTree;
	    el = branch.el;
	  }
	  vnode.el = el;
	  if (parentComponent && parentComponent.subTree === vnode) {
	    parentComponent.vnode.el = el;
	    updateHOCHostEl(parentComponent, el);
	  }
	}
	function isVNodeSuspensible(vnode) {
	  const suspensible = vnode.props && vnode.props.suspensible;
	  return suspensible != null && suspensible !== false;
	}
	const Fragment = Symbol.for("v-fgt");
	const Text = Symbol.for("v-txt");
	const Comment = Symbol.for("v-cmt");
	const Static = Symbol.for("v-stc");
	const blockStack = [];
	let currentBlock = null;
	function openBlock(disableTracking = false) {
	  blockStack.push(currentBlock = disableTracking ? null : []);
	}
	function closeBlock() {
	  blockStack.pop();
	  currentBlock = blockStack[blockStack.length - 1] || null;
	}
	let isBlockTreeEnabled = 1;
	function setBlockTracking(value) {
	  isBlockTreeEnabled += value;
	  if (value < 0 && currentBlock) {
	    currentBlock.hasOnce = true;
	  }
	}
	function setupBlock(vnode) {
	  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || shared.EMPTY_ARR : null;
	  closeBlock();
	  if (isBlockTreeEnabled > 0 && currentBlock) {
	    currentBlock.push(vnode);
	  }
	  return vnode;
	}
	function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
	  return setupBlock(
	    createBaseVNode(
	      type,
	      props,
	      children,
	      patchFlag,
	      dynamicProps,
	      shapeFlag,
	      true
	    )
	  );
	}
	function createBlock(type, props, children, patchFlag, dynamicProps) {
	  return setupBlock(
	    createVNode(
	      type,
	      props,
	      children,
	      patchFlag,
	      dynamicProps,
	      true
	    )
	  );
	}
	function isVNode(value) {
	  return value ? value.__v_isVNode === true : false;
	}
	function isSameVNodeType(n1, n2) {
	  if (n2.shapeFlag & 6 && n1.component) {
	    const dirtyInstances = hmrDirtyComponents.get(n2.type);
	    if (dirtyInstances && dirtyInstances.has(n1.component)) {
	      n1.shapeFlag &= ~256;
	      n2.shapeFlag &= ~512;
	      return false;
	    }
	  }
	  return n1.type === n2.type && n1.key === n2.key;
	}
	let vnodeArgsTransformer;
	function transformVNodeArgs(transformer) {
	  vnodeArgsTransformer = transformer;
	}
	const createVNodeWithArgsTransform = (...args) => {
	  return _createVNode(
	    ...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args
	  );
	};
	const normalizeKey = ({ key }) => key != null ? key : null;
	const normalizeRef = ({
	  ref,
	  ref_key,
	  ref_for
	}) => {
	  if (typeof ref === "number") {
	    ref = "" + ref;
	  }
	  return ref != null ? shared.isString(ref) || reactivity.isRef(ref) || shared.isFunction(ref) ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for } : ref : null;
	};
	function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
	  const vnode = {
	    __v_isVNode: true,
	    __v_skip: true,
	    type,
	    props,
	    key: props && normalizeKey(props),
	    ref: props && normalizeRef(props),
	    scopeId: currentScopeId,
	    slotScopeIds: null,
	    children,
	    component: null,
	    suspense: null,
	    ssContent: null,
	    ssFallback: null,
	    dirs: null,
	    transition: null,
	    el: null,
	    anchor: null,
	    target: null,
	    targetStart: null,
	    targetAnchor: null,
	    staticCount: 0,
	    shapeFlag,
	    patchFlag,
	    dynamicProps,
	    dynamicChildren: null,
	    appContext: null,
	    ctx: currentRenderingInstance
	  };
	  if (needFullChildrenNormalization) {
	    normalizeChildren(vnode, children);
	    if (shapeFlag & 128) {
	      type.normalize(vnode);
	    }
	  } else if (children) {
	    vnode.shapeFlag |= shared.isString(children) ? 8 : 16;
	  }
	  if (vnode.key !== vnode.key) {
	    warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
	  }
	  if (isBlockTreeEnabled > 0 &&
	  !isBlockNode &&
	  currentBlock &&
	  (vnode.patchFlag > 0 || shapeFlag & 6) &&
	  vnode.patchFlag !== 32) {
	    currentBlock.push(vnode);
	  }
	  return vnode;
	}
	const createVNode = createVNodeWithArgsTransform ;
	function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
	  if (!type || type === NULL_DYNAMIC_COMPONENT) {
	    if (!type) {
	      warn$1(`Invalid vnode type when creating vnode: ${type}.`);
	    }
	    type = Comment;
	  }
	  if (isVNode(type)) {
	    const cloned = cloneVNode(
	      type,
	      props,
	      true
	    );
	    if (children) {
	      normalizeChildren(cloned, children);
	    }
	    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
	      if (cloned.shapeFlag & 6) {
	        currentBlock[currentBlock.indexOf(type)] = cloned;
	      } else {
	        currentBlock.push(cloned);
	      }
	    }
	    cloned.patchFlag = -2;
	    return cloned;
	  }
	  if (isClassComponent(type)) {
	    type = type.__vccOpts;
	  }
	  if (props) {
	    props = guardReactiveProps(props);
	    let { class: klass, style } = props;
	    if (klass && !shared.isString(klass)) {
	      props.class = shared.normalizeClass(klass);
	    }
	    if (shared.isObject(style)) {
	      if (reactivity.isProxy(style) && !shared.isArray(style)) {
	        style = shared.extend({}, style);
	      }
	      props.style = shared.normalizeStyle(style);
	    }
	  }
	  const shapeFlag = shared.isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : shared.isObject(type) ? 4 : shared.isFunction(type) ? 2 : 0;
	  if (shapeFlag & 4 && reactivity.isProxy(type)) {
	    type = reactivity.toRaw(type);
	    warn$1(
	      `Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
	      `
Component that was made reactive: `,
	      type
	    );
	  }
	  return createBaseVNode(
	    type,
	    props,
	    children,
	    patchFlag,
	    dynamicProps,
	    shapeFlag,
	    isBlockNode,
	    true
	  );
	}
	function guardReactiveProps(props) {
	  if (!props) return null;
	  return reactivity.isProxy(props) || isInternalObject(props) ? shared.extend({}, props) : props;
	}
	function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
	  const { props, ref, patchFlag, children, transition } = vnode;
	  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
	  const cloned = {
	    __v_isVNode: true,
	    __v_skip: true,
	    type: vnode.type,
	    props: mergedProps,
	    key: mergedProps && normalizeKey(mergedProps),
	    ref: extraProps && extraProps.ref ? (
	      mergeRef && ref ? shared.isArray(ref) ? ref.concat(normalizeRef(extraProps)) : [ref, normalizeRef(extraProps)] : normalizeRef(extraProps)
	    ) : ref,
	    scopeId: vnode.scopeId,
	    slotScopeIds: vnode.slotScopeIds,
	    children: patchFlag === -1 && shared.isArray(children) ? children.map(deepCloneVNode) : children,
	    target: vnode.target,
	    targetStart: vnode.targetStart,
	    targetAnchor: vnode.targetAnchor,
	    staticCount: vnode.staticCount,
	    shapeFlag: vnode.shapeFlag,
	    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
	    dynamicProps: vnode.dynamicProps,
	    dynamicChildren: vnode.dynamicChildren,
	    appContext: vnode.appContext,
	    dirs: vnode.dirs,
	    transition,
	    component: vnode.component,
	    suspense: vnode.suspense,
	    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
	    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
	    el: vnode.el,
	    anchor: vnode.anchor,
	    ctx: vnode.ctx,
	    ce: vnode.ce
	  };
	  if (transition && cloneTransition) {
	    setTransitionHooks(
	      cloned,
	      transition.clone(cloned)
	    );
	  }
	  return cloned;
	}
	function deepCloneVNode(vnode) {
	  const cloned = cloneVNode(vnode);
	  if (shared.isArray(vnode.children)) {
	    cloned.children = vnode.children.map(deepCloneVNode);
	  }
	  return cloned;
	}
	function createTextVNode(text = " ", flag = 0) {
	  return createVNode(Text, null, text, flag);
	}
	function createStaticVNode(content, numberOfNodes) {
	  const vnode = createVNode(Static, null, content);
	  vnode.staticCount = numberOfNodes;
	  return vnode;
	}
	function createCommentVNode(text = "", asBlock = false) {
	  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
	}
	function normalizeVNode(child) {
	  if (child == null || typeof child === "boolean") {
	    return createVNode(Comment);
	  } else if (shared.isArray(child)) {
	    return createVNode(
	      Fragment,
	      null,
	      child.slice()
	    );
	  } else if (typeof child === "object") {
	    return cloneIfMounted(child);
	  } else {
	    return createVNode(Text, null, String(child));
	  }
	}
	function cloneIfMounted(child) {
	  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
	}
	function normalizeChildren(vnode, children) {
	  let type = 0;
	  const { shapeFlag } = vnode;
	  if (children == null) {
	    children = null;
	  } else if (shared.isArray(children)) {
	    type = 16;
	  } else if (typeof children === "object") {
	    if (shapeFlag & (1 | 64)) {
	      const slot = children.default;
	      if (slot) {
	        slot._c && (slot._d = false);
	        normalizeChildren(vnode, slot());
	        slot._c && (slot._d = true);
	      }
	      return;
	    } else {
	      type = 32;
	      const slotFlag = children._;
	      if (!slotFlag && !isInternalObject(children)) {
	        children._ctx = currentRenderingInstance;
	      } else if (slotFlag === 3 && currentRenderingInstance) {
	        if (currentRenderingInstance.slots._ === 1) {
	          children._ = 1;
	        } else {
	          children._ = 2;
	          vnode.patchFlag |= 1024;
	        }
	      }
	    }
	  } else if (shared.isFunction(children)) {
	    children = { default: children, _ctx: currentRenderingInstance };
	    type = 32;
	  } else {
	    children = String(children);
	    if (shapeFlag & 64) {
	      type = 16;
	      children = [createTextVNode(children)];
	    } else {
	      type = 8;
	    }
	  }
	  vnode.children = children;
	  vnode.shapeFlag |= type;
	}
	function mergeProps(...args) {
	  const ret = {};
	  for (let i = 0; i < args.length; i++) {
	    const toMerge = args[i];
	    for (const key in toMerge) {
	      if (key === "class") {
	        if (ret.class !== toMerge.class) {
	          ret.class = shared.normalizeClass([ret.class, toMerge.class]);
	        }
	      } else if (key === "style") {
	        ret.style = shared.normalizeStyle([ret.style, toMerge.style]);
	      } else if (shared.isOn(key)) {
	        const existing = ret[key];
	        const incoming = toMerge[key];
	        if (incoming && existing !== incoming && !(shared.isArray(existing) && existing.includes(incoming))) {
	          ret[key] = existing ? [].concat(existing, incoming) : incoming;
	        }
	      } else if (key !== "") {
	        ret[key] = toMerge[key];
	      }
	    }
	  }
	  return ret;
	}
	function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
	  callWithAsyncErrorHandling(hook, instance, 7, [
	    vnode,
	    prevVNode
	  ]);
	}
	const emptyAppContext = createAppContext();
	let uid = 0;
	function createComponentInstance(vnode, parent, suspense) {
	  const type = vnode.type;
	  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
	  const instance = {
	    uid: uid++,
	    vnode,
	    type,
	    parent,
	    appContext,
	    root: null,
	    next: null,
	    subTree: null,
	    effect: null,
	    update: null,
	    scope: new reactivity.EffectScope(
	      true
	    ),
	    render: null,
	    proxy: null,
	    exposed: null,
	    exposeProxy: null,
	    withProxy: null,
	    provides: parent ? parent.provides : Object.create(appContext.provides),
	    accessCache: null,
	    renderCache: [],
	    components: null,
	    directives: null,
	    propsOptions: normalizePropsOptions(type, appContext),
	    emitsOptions: normalizeEmitsOptions(type, appContext),
	    emit: null,
	    emitted: null,
	    propsDefaults: shared.EMPTY_OBJ,
	    inheritAttrs: type.inheritAttrs,
	    ctx: shared.EMPTY_OBJ,
	    data: shared.EMPTY_OBJ,
	    props: shared.EMPTY_OBJ,
	    attrs: shared.EMPTY_OBJ,
	    slots: shared.EMPTY_OBJ,
	    refs: shared.EMPTY_OBJ,
	    setupState: shared.EMPTY_OBJ,
	    setupContext: null,
	    attrsProxy: null,
	    slotsProxy: null,
	    suspense,
	    suspenseId: suspense ? suspense.pendingId : 0,
	    asyncDep: null,
	    asyncResolved: false,
	    isMounted: false,
	    isUnmounted: false,
	    isDeactivated: false,
	    bc: null,
	    c: null,
	    bm: null,
	    m: null,
	    bu: null,
	    u: null,
	    um: null,
	    bum: null,
	    da: null,
	    a: null,
	    rtg: null,
	    rtc: null,
	    ec: null,
	    sp: null
	  };
	  {
	    instance.ctx = createDevRenderContext(instance);
	  }
	  instance.root = parent ? parent.root : instance;
	  instance.emit = emit.bind(null, instance);
	  if (vnode.ce) {
	    vnode.ce(instance);
	  }
	  return instance;
	}
	let currentInstance = null;
	const getCurrentInstance = () => currentInstance || currentRenderingInstance;
	let internalSetCurrentInstance;
	let setInSSRSetupState;
	{
	  const g = shared.getGlobalThis();
	  const registerGlobalSetter = (key, setter) => {
	    let setters;
	    if (!(setters = g[key])) setters = g[key] = [];
	    setters.push(setter);
	    return (v) => {
	      if (setters.length > 1) setters.forEach((set) => set(v));
	      else setters[0](v);
	    };
	  };
	  internalSetCurrentInstance = registerGlobalSetter(
	    `__VUE_INSTANCE_SETTERS__`,
	    (v) => currentInstance = v
	  );
	  setInSSRSetupState = registerGlobalSetter(
	    `__VUE_SSR_SETTERS__`,
	    (v) => isInSSRComponentSetup = v
	  );
	}
	const setCurrentInstance = (instance) => {
	  const prev = currentInstance;
	  internalSetCurrentInstance(instance);
	  instance.scope.on();
	  return () => {
	    instance.scope.off();
	    internalSetCurrentInstance(prev);
	  };
	};
	const unsetCurrentInstance = () => {
	  currentInstance && currentInstance.scope.off();
	  internalSetCurrentInstance(null);
	};
	const isBuiltInTag =  shared.makeMap("slot,component");
	function validateComponentName(name, { isNativeTag }) {
	  if (isBuiltInTag(name) || isNativeTag(name)) {
	    warn$1(
	      "Do not use built-in or reserved HTML elements as component id: " + name
	    );
	  }
	}
	function isStatefulComponent(instance) {
	  return instance.vnode.shapeFlag & 4;
	}
	let isInSSRComponentSetup = false;
	function setupComponent(instance, isSSR = false, optimized = false) {
	  isSSR && setInSSRSetupState(isSSR);
	  const { props, children } = instance.vnode;
	  const isStateful = isStatefulComponent(instance);
	  initProps(instance, props, isStateful, isSSR);
	  initSlots(instance, children, optimized);
	  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
	  isSSR && setInSSRSetupState(false);
	  return setupResult;
	}
	function setupStatefulComponent(instance, isSSR) {
	  var _a;
	  const Component = instance.type;
	  {
	    if (Component.name) {
	      validateComponentName(Component.name, instance.appContext.config);
	    }
	    if (Component.components) {
	      const names = Object.keys(Component.components);
	      for (let i = 0; i < names.length; i++) {
	        validateComponentName(names[i], instance.appContext.config);
	      }
	    }
	    if (Component.directives) {
	      const names = Object.keys(Component.directives);
	      for (let i = 0; i < names.length; i++) {
	        validateDirectiveName(names[i]);
	      }
	    }
	    if (Component.compilerOptions && isRuntimeOnly()) {
	      warn$1(
	        `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
	      );
	    }
	  }
	  instance.accessCache =  Object.create(null);
	  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
	  {
	    exposePropsOnRenderContext(instance);
	  }
	  const { setup } = Component;
	  if (setup) {
	    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
	    const reset = setCurrentInstance(instance);
	    reactivity.pauseTracking();
	    const setupResult = callWithErrorHandling(
	      setup,
	      instance,
	      0,
	      [
	        reactivity.shallowReadonly(instance.props) ,
	        setupContext
	      ]
	    );
	    reactivity.resetTracking();
	    reset();
	    if (shared.isPromise(setupResult)) {
	      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
	      if (isSSR) {
	        return setupResult.then((resolvedResult) => {
	          handleSetupResult(instance, resolvedResult, isSSR);
	        }).catch((e) => {
	          handleError(e, instance, 0);
	        });
	      } else {
	        instance.asyncDep = setupResult;
	        if (!instance.suspense) {
	          const name = (_a = Component.name) != null ? _a : "Anonymous";
	          warn$1(
	            `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
	          );
	        }
	      }
	    } else {
	      handleSetupResult(instance, setupResult, isSSR);
	    }
	  } else {
	    finishComponentSetup(instance, isSSR);
	  }
	}
	function handleSetupResult(instance, setupResult, isSSR) {
	  if (shared.isFunction(setupResult)) {
	    if (instance.type.__ssrInlineRender) {
	      instance.ssrRender = setupResult;
	    } else {
	      instance.render = setupResult;
	    }
	  } else if (shared.isObject(setupResult)) {
	    if (isVNode(setupResult)) {
	      warn$1(
	        `setup() should not return VNodes directly - return a render function instead.`
	      );
	    }
	    {
	      instance.devtoolsRawSetupState = setupResult;
	    }
	    instance.setupState = reactivity.proxyRefs(setupResult);
	    {
	      exposeSetupStateOnRenderContext(instance);
	    }
	  } else if (setupResult !== void 0) {
	    warn$1(
	      `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
	    );
	  }
	  finishComponentSetup(instance, isSSR);
	}
	let compile;
	let installWithProxy;
	function registerRuntimeCompiler(_compile) {
	  compile = _compile;
	  installWithProxy = (i) => {
	    if (i.render._rc) {
	      i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
	    }
	  };
	}
	const isRuntimeOnly = () => !compile;
	function finishComponentSetup(instance, isSSR, skipOptions) {
	  const Component = instance.type;
	  if (!instance.render) {
	    if (!isSSR && compile && !Component.render) {
	      const template = Component.template || resolveMergedOptions(instance).template;
	      if (template) {
	        {
	          startMeasure(instance, `compile`);
	        }
	        const { isCustomElement, compilerOptions } = instance.appContext.config;
	        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
	        const finalCompilerOptions = shared.extend(
	          shared.extend(
	            {
	              isCustomElement,
	              delimiters
	            },
	            compilerOptions
	          ),
	          componentCompilerOptions
	        );
	        Component.render = compile(template, finalCompilerOptions);
	        {
	          endMeasure(instance, `compile`);
	        }
	      }
	    }
	    instance.render = Component.render || shared.NOOP;
	    if (installWithProxy) {
	      installWithProxy(instance);
	    }
	  }
	  {
	    const reset = setCurrentInstance(instance);
	    reactivity.pauseTracking();
	    try {
	      applyOptions(instance);
	    } finally {
	      reactivity.resetTracking();
	      reset();
	    }
	  }
	  if (!Component.render && instance.render === shared.NOOP && !isSSR) {
	    if (!compile && Component.template) {
	      warn$1(
	        `Component provided template option but runtime compilation is not supported in this build of Vue.` + (``)
	      );
	    } else {
	      warn$1(`Component is missing template or render function: `, Component);
	    }
	  }
	}
	const attrsProxyHandlers = {
	  get(target, key) {
	    markAttrsAccessed();
	    reactivity.track(target, "get", "");
	    return target[key];
	  },
	  set() {
	    warn$1(`setupContext.attrs is readonly.`);
	    return false;
	  },
	  deleteProperty() {
	    warn$1(`setupContext.attrs is readonly.`);
	    return false;
	  }
	} ;
	function getSlotsProxy(instance) {
	  return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
	    get(target, key) {
	      reactivity.track(instance, "get", "$slots");
	      return target[key];
	    }
	  }));
	}
	function createSetupContext(instance) {
	  const expose = (exposed) => {
	    {
	      if (instance.exposed) {
	        warn$1(`expose() should be called only once per setup().`);
	      }
	      if (exposed != null) {
	        let exposedType = typeof exposed;
	        if (exposedType === "object") {
	          if (shared.isArray(exposed)) {
	            exposedType = "array";
	          } else if (reactivity.isRef(exposed)) {
	            exposedType = "ref";
	          }
	        }
	        if (exposedType !== "object") {
	          warn$1(
	            `expose() should be passed a plain object, received ${exposedType}.`
	          );
	        }
	      }
	    }
	    instance.exposed = exposed || {};
	  };
	  {
	    let attrsProxy;
	    return Object.freeze({
	      get attrs() {
	        return attrsProxy || (attrsProxy = new Proxy(instance.attrs, attrsProxyHandlers));
	      },
	      get slots() {
	        return getSlotsProxy(instance);
	      },
	      get emit() {
	        return (event, ...args) => instance.emit(event, ...args);
	      },
	      expose
	    });
	  }
	}
	function getComponentPublicInstance(instance) {
	  if (instance.exposed) {
	    return instance.exposeProxy || (instance.exposeProxy = new Proxy(reactivity.proxyRefs(reactivity.markRaw(instance.exposed)), {
	      get(target, key) {
	        if (key in target) {
	          return target[key];
	        } else if (key in publicPropertiesMap) {
	          return publicPropertiesMap[key](instance);
	        }
	      },
	      has(target, key) {
	        return key in target || key in publicPropertiesMap;
	      }
	    }));
	  } else {
	    return instance.proxy;
	  }
	}
	const classifyRE = /(?:^|[-_])(\w)/g;
	const classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
	function getComponentName(Component, includeInferred = true) {
	  return shared.isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
	}
	function formatComponentName(instance, Component, isRoot = false) {
	  let name = getComponentName(Component);
	  if (!name && Component.__file) {
	    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
	    if (match) {
	      name = match[1];
	    }
	  }
	  if (!name && instance && instance.parent) {
	    const inferFromRegistry = (registry) => {
	      for (const key in registry) {
	        if (registry[key] === Component) {
	          return key;
	        }
	      }
	    };
	    name = inferFromRegistry(
	      instance.components || instance.parent.type.components
	    ) || inferFromRegistry(instance.appContext.components);
	  }
	  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
	}
	function isClassComponent(value) {
	  return shared.isFunction(value) && "__vccOpts" in value;
	}
	const computed = (getterOrOptions, debugOptions) => {
	  const c = reactivity.computed(getterOrOptions, debugOptions, isInSSRComponentSetup);
	  {
	    const i = getCurrentInstance();
	    if (i && i.appContext.config.warnRecursiveComputed) {
	      c._warnRecursive = true;
	    }
	  }
	  return c;
	};
	function h(type, propsOrChildren, children) {
	  const l = arguments.length;
	  if (l === 2) {
	    if (shared.isObject(propsOrChildren) && !shared.isArray(propsOrChildren)) {
	      if (isVNode(propsOrChildren)) {
	        return createVNode(type, null, [propsOrChildren]);
	      }
	      return createVNode(type, propsOrChildren);
	    } else {
	      return createVNode(type, null, propsOrChildren);
	    }
	  } else {
	    if (l > 3) {
	      children = Array.prototype.slice.call(arguments, 2);
	    } else if (l === 3 && isVNode(children)) {
	      children = [children];
	    }
	    return createVNode(type, propsOrChildren, children);
	  }
	}
	function initCustomFormatter() {
	  if (typeof window === "undefined") {
	    return;
	  }
	  const vueStyle = { style: "color:#3ba776" };
	  const numberStyle = { style: "color:#1677ff" };
	  const stringStyle = { style: "color:#f5222d" };
	  const keywordStyle = { style: "color:#eb2f96" };
	  const formatter = {
	    __vue_custom_formatter: true,
	    header(obj) {
	      if (!shared.isObject(obj)) {
	        return null;
	      }
	      if (obj.__isVue) {
	        return ["div", vueStyle, `VueInstance`];
	      } else if (reactivity.isRef(obj)) {
	        return [
	          "div",
	          {},
	          ["span", vueStyle, genRefFlag(obj)],
	          "<",
	          formatValue(obj.value),
	          `>`
	        ];
	      } else if (reactivity.isReactive(obj)) {
	        return [
	          "div",
	          {},
	          ["span", vueStyle, reactivity.isShallow(obj) ? "ShallowReactive" : "Reactive"],
	          "<",
	          formatValue(obj),
	          `>${reactivity.isReadonly(obj) ? ` (readonly)` : ``}`
	        ];
	      } else if (reactivity.isReadonly(obj)) {
	        return [
	          "div",
	          {},
	          ["span", vueStyle, reactivity.isShallow(obj) ? "ShallowReadonly" : "Readonly"],
	          "<",
	          formatValue(obj),
	          ">"
	        ];
	      }
	      return null;
	    },
	    hasBody(obj) {
	      return obj && obj.__isVue;
	    },
	    body(obj) {
	      if (obj && obj.__isVue) {
	        return [
	          "div",
	          {},
	          ...formatInstance(obj.$)
	        ];
	      }
	    }
	  };
	  function formatInstance(instance) {
	    const blocks = [];
	    if (instance.type.props && instance.props) {
	      blocks.push(createInstanceBlock("props", reactivity.toRaw(instance.props)));
	    }
	    if (instance.setupState !== shared.EMPTY_OBJ) {
	      blocks.push(createInstanceBlock("setup", instance.setupState));
	    }
	    if (instance.data !== shared.EMPTY_OBJ) {
	      blocks.push(createInstanceBlock("data", reactivity.toRaw(instance.data)));
	    }
	    const computed = extractKeys(instance, "computed");
	    if (computed) {
	      blocks.push(createInstanceBlock("computed", computed));
	    }
	    const injected = extractKeys(instance, "inject");
	    if (injected) {
	      blocks.push(createInstanceBlock("injected", injected));
	    }
	    blocks.push([
	      "div",
	      {},
	      [
	        "span",
	        {
	          style: keywordStyle.style + ";opacity:0.66"
	        },
	        "$ (internal): "
	      ],
	      ["object", { object: instance }]
	    ]);
	    return blocks;
	  }
	  function createInstanceBlock(type, target) {
	    target = shared.extend({}, target);
	    if (!Object.keys(target).length) {
	      return ["span", {}];
	    }
	    return [
	      "div",
	      { style: "line-height:1.25em;margin-bottom:0.6em" },
	      [
	        "div",
	        {
	          style: "color:#476582"
	        },
	        type
	      ],
	      [
	        "div",
	        {
	          style: "padding-left:1.25em"
	        },
	        ...Object.keys(target).map((key) => {
	          return [
	            "div",
	            {},
	            ["span", keywordStyle, key + ": "],
	            formatValue(target[key], false)
	          ];
	        })
	      ]
	    ];
	  }
	  function formatValue(v, asRaw = true) {
	    if (typeof v === "number") {
	      return ["span", numberStyle, v];
	    } else if (typeof v === "string") {
	      return ["span", stringStyle, JSON.stringify(v)];
	    } else if (typeof v === "boolean") {
	      return ["span", keywordStyle, v];
	    } else if (shared.isObject(v)) {
	      return ["object", { object: asRaw ? reactivity.toRaw(v) : v }];
	    } else {
	      return ["span", stringStyle, String(v)];
	    }
	  }
	  function extractKeys(instance, type) {
	    const Comp = instance.type;
	    if (shared.isFunction(Comp)) {
	      return;
	    }
	    const extracted = {};
	    for (const key in instance.ctx) {
	      if (isKeyOfType(Comp, key, type)) {
	        extracted[key] = instance.ctx[key];
	      }
	    }
	    return extracted;
	  }
	  function isKeyOfType(Comp, key, type) {
	    const opts = Comp[type];
	    if (shared.isArray(opts) && opts.includes(key) || shared.isObject(opts) && key in opts) {
	      return true;
	    }
	    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
	      return true;
	    }
	    if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
	      return true;
	    }
	  }
	  function genRefFlag(v) {
	    if (reactivity.isShallow(v)) {
	      return `ShallowRef`;
	    }
	    if (v.effect) {
	      return `ComputedRef`;
	    }
	    return `Ref`;
	  }
	  if (window.devtoolsFormatters) {
	    window.devtoolsFormatters.push(formatter);
	  } else {
	    window.devtoolsFormatters = [formatter];
	  }
	}
	function withMemo(memo, render, cache, index) {
	  const cached = cache[index];
	  if (cached && isMemoSame(cached, memo)) {
	    return cached;
	  }
	  const ret = render();
	  ret.memo = memo.slice();
	  ret.cacheIndex = index;
	  return cache[index] = ret;
	}
	function isMemoSame(cached, memo) {
	  const prev = cached.memo;
	  if (prev.length != memo.length) {
	    return false;
	  }
	  for (let i = 0; i < prev.length; i++) {
	    if (shared.hasChanged(prev[i], memo[i])) {
	      return false;
	    }
	  }
	  if (isBlockTreeEnabled > 0 && currentBlock) {
	    currentBlock.push(cached);
	  }
	  return true;
	}
	const version = "3.4.32";
	const warn = warn$1 ;
	const ErrorTypeStrings = ErrorTypeStrings$1 ;
	const devtools = devtools$1 ;
	const setDevtoolsHook = setDevtoolsHook$1 ;
	const _ssrUtils = {
	  createComponentInstance,
	  setupComponent,
	  renderComponentRoot,
	  setCurrentRenderingInstance,
	  isVNode: isVNode,
	  normalizeVNode,
	  getComponentPublicInstance
	};
	const ssrUtils = _ssrUtils ;
	const resolveFilter = null;
	const compatUtils = null;
	const DeprecationTypes = null;
	runtimeCore_cjs.EffectScope = reactivity.EffectScope;
	runtimeCore_cjs.ReactiveEffect = reactivity.ReactiveEffect;
	runtimeCore_cjs.TrackOpTypes = reactivity.TrackOpTypes;
	runtimeCore_cjs.TriggerOpTypes = reactivity.TriggerOpTypes;
	runtimeCore_cjs.customRef = reactivity.customRef;
	runtimeCore_cjs.effect = reactivity.effect;
	runtimeCore_cjs.effectScope = reactivity.effectScope;
	runtimeCore_cjs.getCurrentScope = reactivity.getCurrentScope;
	runtimeCore_cjs.isProxy = reactivity.isProxy;
	runtimeCore_cjs.isReactive = reactivity.isReactive;
	runtimeCore_cjs.isReadonly = reactivity.isReadonly;
	runtimeCore_cjs.isRef = reactivity.isRef;
	runtimeCore_cjs.isShallow = reactivity.isShallow;
	runtimeCore_cjs.markRaw = reactivity.markRaw;
	runtimeCore_cjs.onScopeDispose = reactivity.onScopeDispose;
	runtimeCore_cjs.proxyRefs = reactivity.proxyRefs;
	runtimeCore_cjs.reactive = reactivity.reactive;
	runtimeCore_cjs.readonly = reactivity.readonly;
	runtimeCore_cjs.ref = reactivity.ref;
	runtimeCore_cjs.shallowReactive = reactivity.shallowReactive;
	runtimeCore_cjs.shallowReadonly = reactivity.shallowReadonly;
	runtimeCore_cjs.shallowRef = reactivity.shallowRef;
	runtimeCore_cjs.stop = reactivity.stop;
	runtimeCore_cjs.toRaw = reactivity.toRaw;
	runtimeCore_cjs.toRef = reactivity.toRef;
	runtimeCore_cjs.toRefs = reactivity.toRefs;
	runtimeCore_cjs.toValue = reactivity.toValue;
	runtimeCore_cjs.triggerRef = reactivity.triggerRef;
	runtimeCore_cjs.unref = reactivity.unref;
	runtimeCore_cjs.camelize = shared.camelize;
	runtimeCore_cjs.capitalize = shared.capitalize;
	runtimeCore_cjs.normalizeClass = shared.normalizeClass;
	runtimeCore_cjs.normalizeProps = shared.normalizeProps;
	runtimeCore_cjs.normalizeStyle = shared.normalizeStyle;
	runtimeCore_cjs.toDisplayString = shared.toDisplayString;
	runtimeCore_cjs.toHandlerKey = shared.toHandlerKey;
	runtimeCore_cjs.BaseTransition = BaseTransition;
	runtimeCore_cjs.BaseTransitionPropsValidators = BaseTransitionPropsValidators;
	runtimeCore_cjs.Comment = Comment;
	runtimeCore_cjs.DeprecationTypes = DeprecationTypes;
	runtimeCore_cjs.ErrorCodes = ErrorCodes;
	runtimeCore_cjs.ErrorTypeStrings = ErrorTypeStrings;
	runtimeCore_cjs.Fragment = Fragment;
	runtimeCore_cjs.KeepAlive = KeepAlive;
	runtimeCore_cjs.Static = Static;
	runtimeCore_cjs.Suspense = Suspense;
	runtimeCore_cjs.Teleport = Teleport;
	runtimeCore_cjs.Text = Text;
	runtimeCore_cjs.assertNumber = assertNumber;
	runtimeCore_cjs.callWithAsyncErrorHandling = callWithAsyncErrorHandling;
	runtimeCore_cjs.callWithErrorHandling = callWithErrorHandling;
	runtimeCore_cjs.cloneVNode = cloneVNode;
	runtimeCore_cjs.compatUtils = compatUtils;
	runtimeCore_cjs.computed = computed;
	runtimeCore_cjs.createBlock = createBlock;
	runtimeCore_cjs.createCommentVNode = createCommentVNode;
	runtimeCore_cjs.createElementBlock = createElementBlock;
	runtimeCore_cjs.createElementVNode = createBaseVNode;
	runtimeCore_cjs.createHydrationRenderer = createHydrationRenderer;
	runtimeCore_cjs.createPropsRestProxy = createPropsRestProxy;
	runtimeCore_cjs.createRenderer = createRenderer;
	runtimeCore_cjs.createSlots = createSlots;
	runtimeCore_cjs.createStaticVNode = createStaticVNode;
	runtimeCore_cjs.createTextVNode = createTextVNode;
	runtimeCore_cjs.createVNode = createVNode;
	runtimeCore_cjs.defineAsyncComponent = defineAsyncComponent;
	runtimeCore_cjs.defineComponent = defineComponent;
	runtimeCore_cjs.defineEmits = defineEmits;
	runtimeCore_cjs.defineExpose = defineExpose;
	runtimeCore_cjs.defineModel = defineModel;
	runtimeCore_cjs.defineOptions = defineOptions;
	runtimeCore_cjs.defineProps = defineProps;
	runtimeCore_cjs.defineSlots = defineSlots;
	runtimeCore_cjs.devtools = devtools;
	runtimeCore_cjs.getCurrentInstance = getCurrentInstance;
	runtimeCore_cjs.getTransitionRawChildren = getTransitionRawChildren;
	runtimeCore_cjs.guardReactiveProps = guardReactiveProps;
	runtimeCore_cjs.h = h;
	runtimeCore_cjs.handleError = handleError;
	runtimeCore_cjs.hasInjectionContext = hasInjectionContext;
	runtimeCore_cjs.initCustomFormatter = initCustomFormatter;
	runtimeCore_cjs.inject = inject;
	runtimeCore_cjs.isMemoSame = isMemoSame;
	runtimeCore_cjs.isRuntimeOnly = isRuntimeOnly;
	runtimeCore_cjs.isVNode = isVNode;
	runtimeCore_cjs.mergeDefaults = mergeDefaults;
	runtimeCore_cjs.mergeModels = mergeModels;
	runtimeCore_cjs.mergeProps = mergeProps;
	runtimeCore_cjs.nextTick = nextTick;
	runtimeCore_cjs.onActivated = onActivated;
	runtimeCore_cjs.onBeforeMount = onBeforeMount;
	runtimeCore_cjs.onBeforeUnmount = onBeforeUnmount;
	runtimeCore_cjs.onBeforeUpdate = onBeforeUpdate;
	runtimeCore_cjs.onDeactivated = onDeactivated;
	runtimeCore_cjs.onErrorCaptured = onErrorCaptured;
	runtimeCore_cjs.onMounted = onMounted;
	runtimeCore_cjs.onRenderTracked = onRenderTracked;
	runtimeCore_cjs.onRenderTriggered = onRenderTriggered;
	runtimeCore_cjs.onServerPrefetch = onServerPrefetch;
	runtimeCore_cjs.onUnmounted = onUnmounted;
	runtimeCore_cjs.onUpdated = onUpdated;
	runtimeCore_cjs.openBlock = openBlock;
	runtimeCore_cjs.popScopeId = popScopeId;
	runtimeCore_cjs.provide = provide;
	runtimeCore_cjs.pushScopeId = pushScopeId;
	runtimeCore_cjs.queuePostFlushCb = queuePostFlushCb;
	runtimeCore_cjs.registerRuntimeCompiler = registerRuntimeCompiler;
	runtimeCore_cjs.renderList = renderList;
	runtimeCore_cjs.renderSlot = renderSlot;
	runtimeCore_cjs.resolveComponent = resolveComponent;
	runtimeCore_cjs.resolveDirective = resolveDirective;
	runtimeCore_cjs.resolveDynamicComponent = resolveDynamicComponent;
	runtimeCore_cjs.resolveFilter = resolveFilter;
	runtimeCore_cjs.resolveTransitionHooks = resolveTransitionHooks;
	runtimeCore_cjs.setBlockTracking = setBlockTracking;
	runtimeCore_cjs.setDevtoolsHook = setDevtoolsHook;
	runtimeCore_cjs.setTransitionHooks = setTransitionHooks;
	runtimeCore_cjs.ssrContextKey = ssrContextKey;
	runtimeCore_cjs.ssrUtils = ssrUtils;
	runtimeCore_cjs.toHandlers = toHandlers;
	runtimeCore_cjs.transformVNodeArgs = transformVNodeArgs;
	runtimeCore_cjs.useAttrs = useAttrs;
	runtimeCore_cjs.useModel = useModel;
	runtimeCore_cjs.useSSRContext = useSSRContext;
	runtimeCore_cjs.useSlots = useSlots;
	runtimeCore_cjs.useTransitionState = useTransitionState;
	runtimeCore_cjs.version = version;
	runtimeCore_cjs.warn = warn;
	runtimeCore_cjs.watch = watch;
	runtimeCore_cjs.watchEffect = watchEffect;
	runtimeCore_cjs.watchPostEffect = watchPostEffect;
	runtimeCore_cjs.watchSyncEffect = watchSyncEffect;
	runtimeCore_cjs.withAsyncContext = withAsyncContext;
	runtimeCore_cjs.withCtx = withCtx;
	runtimeCore_cjs.withDefaults = withDefaults;
	runtimeCore_cjs.withDirectives = withDirectives;
	runtimeCore_cjs.withMemo = withMemo;
	runtimeCore_cjs.withScopeId = withScopeId;
	return runtimeCore_cjs;
}

var hasRequiredRuntimeCore;
function requireRuntimeCore () {
	if (hasRequiredRuntimeCore) return runtimeCore.exports;
	hasRequiredRuntimeCore = 1;
	{
	  runtimeCore.exports = requireRuntimeCore_cjs();
	}
	return runtimeCore.exports;
}

var runtimeDom_cjs = {};

/**
* @vue/runtime-dom v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredRuntimeDom_cjs;
function requireRuntimeDom_cjs () {
	if (hasRequiredRuntimeDom_cjs) return runtimeDom_cjs;
	hasRequiredRuntimeDom_cjs = 1;
	(function (exports) {
		Object.defineProperty(exports, '__esModule', { value: true });
		var runtimeCore = requireRuntimeCore();
		var shared = requireShared();
		const svgNS = "http://www.w3.org/2000/svg";
		const mathmlNS = "http://www.w3.org/1998/Math/MathML";
		const doc = typeof document !== "undefined" ? document : null;
		const templateContainer = doc &&  doc.createElement("template");
		const nodeOps = {
		  insert: (child, parent, anchor) => {
		    parent.insertBefore(child, anchor || null);
		  },
		  remove: (child) => {
		    const parent = child.parentNode;
		    if (parent) {
		      parent.removeChild(child);
		    }
		  },
		  createElement: (tag, namespace, is, props) => {
		    const el = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is ? doc.createElement(tag, { is }) : doc.createElement(tag);
		    if (tag === "select" && props && props.multiple != null) {
		      el.setAttribute("multiple", props.multiple);
		    }
		    return el;
		  },
		  createText: (text) => doc.createTextNode(text),
		  createComment: (text) => doc.createComment(text),
		  setText: (node, text) => {
		    node.nodeValue = text;
		  },
		  setElementText: (el, text) => {
		    el.textContent = text;
		  },
		  parentNode: (node) => node.parentNode,
		  nextSibling: (node) => node.nextSibling,
		  querySelector: (selector) => doc.querySelector(selector),
		  setScopeId(el, id) {
		    el.setAttribute(id, "");
		  },
		  insertStaticContent(content, parent, anchor, namespace, start, end) {
		    const before = anchor ? anchor.previousSibling : parent.lastChild;
		    if (start && (start === end || start.nextSibling)) {
		      while (true) {
		        parent.insertBefore(start.cloneNode(true), anchor);
		        if (start === end || !(start = start.nextSibling)) break;
		      }
		    } else {
		      templateContainer.innerHTML = namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content;
		      const template = templateContainer.content;
		      if (namespace === "svg" || namespace === "mathml") {
		        const wrapper = template.firstChild;
		        while (wrapper.firstChild) {
		          template.appendChild(wrapper.firstChild);
		        }
		        template.removeChild(wrapper);
		      }
		      parent.insertBefore(template, anchor);
		    }
		    return [
		      before ? before.nextSibling : parent.firstChild,
		      anchor ? anchor.previousSibling : parent.lastChild
		    ];
		  }
		};
		const TRANSITION = "transition";
		const ANIMATION = "animation";
		const vtcKey = Symbol("_vtc");
		const Transition = (props, { slots }) => runtimeCore.h(runtimeCore.BaseTransition, resolveTransitionProps(props), slots);
		Transition.displayName = "Transition";
		const DOMTransitionPropsValidators = {
		  name: String,
		  type: String,
		  css: {
		    type: Boolean,
		    default: true
		  },
		  duration: [String, Number, Object],
		  enterFromClass: String,
		  enterActiveClass: String,
		  enterToClass: String,
		  appearFromClass: String,
		  appearActiveClass: String,
		  appearToClass: String,
		  leaveFromClass: String,
		  leaveActiveClass: String,
		  leaveToClass: String
		};
		const TransitionPropsValidators = Transition.props =  shared.extend(
		  {},
		  runtimeCore.BaseTransitionPropsValidators,
		  DOMTransitionPropsValidators
		);
		const callHook = (hook, args = []) => {
		  if (shared.isArray(hook)) {
		    hook.forEach((h2) => h2(...args));
		  } else if (hook) {
		    hook(...args);
		  }
		};
		const hasExplicitCallback = (hook) => {
		  return hook ? shared.isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
		};
		function resolveTransitionProps(rawProps) {
		  const baseProps = {};
		  for (const key in rawProps) {
		    if (!(key in DOMTransitionPropsValidators)) {
		      baseProps[key] = rawProps[key];
		    }
		  }
		  if (rawProps.css === false) {
		    return baseProps;
		  }
		  const {
		    name = "v",
		    type,
		    duration,
		    enterFromClass = `${name}-enter-from`,
		    enterActiveClass = `${name}-enter-active`,
		    enterToClass = `${name}-enter-to`,
		    appearFromClass = enterFromClass,
		    appearActiveClass = enterActiveClass,
		    appearToClass = enterToClass,
		    leaveFromClass = `${name}-leave-from`,
		    leaveActiveClass = `${name}-leave-active`,
		    leaveToClass = `${name}-leave-to`
		  } = rawProps;
		  const durations = normalizeDuration(duration);
		  const enterDuration = durations && durations[0];
		  const leaveDuration = durations && durations[1];
		  const {
		    onBeforeEnter,
		    onEnter,
		    onEnterCancelled,
		    onLeave,
		    onLeaveCancelled,
		    onBeforeAppear = onBeforeEnter,
		    onAppear = onEnter,
		    onAppearCancelled = onEnterCancelled
		  } = baseProps;
		  const finishEnter = (el, isAppear, done) => {
		    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
		    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
		    done && done();
		  };
		  const finishLeave = (el, done) => {
		    el._isLeaving = false;
		    removeTransitionClass(el, leaveFromClass);
		    removeTransitionClass(el, leaveToClass);
		    removeTransitionClass(el, leaveActiveClass);
		    done && done();
		  };
		  const makeEnterHook = (isAppear) => {
		    return (el, done) => {
		      const hook = isAppear ? onAppear : onEnter;
		      const resolve = () => finishEnter(el, isAppear, done);
		      callHook(hook, [el, resolve]);
		      nextFrame(() => {
		        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
		        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
		        if (!hasExplicitCallback(hook)) {
		          whenTransitionEnds(el, type, enterDuration, resolve);
		        }
		      });
		    };
		  };
		  return shared.extend(baseProps, {
		    onBeforeEnter(el) {
		      callHook(onBeforeEnter, [el]);
		      addTransitionClass(el, enterFromClass);
		      addTransitionClass(el, enterActiveClass);
		    },
		    onBeforeAppear(el) {
		      callHook(onBeforeAppear, [el]);
		      addTransitionClass(el, appearFromClass);
		      addTransitionClass(el, appearActiveClass);
		    },
		    onEnter: makeEnterHook(false),
		    onAppear: makeEnterHook(true),
		    onLeave(el, done) {
		      el._isLeaving = true;
		      const resolve = () => finishLeave(el, done);
		      addTransitionClass(el, leaveFromClass);
		      addTransitionClass(el, leaveActiveClass);
		      forceReflow();
		      nextFrame(() => {
		        if (!el._isLeaving) {
		          return;
		        }
		        removeTransitionClass(el, leaveFromClass);
		        addTransitionClass(el, leaveToClass);
		        if (!hasExplicitCallback(onLeave)) {
		          whenTransitionEnds(el, type, leaveDuration, resolve);
		        }
		      });
		      callHook(onLeave, [el, resolve]);
		    },
		    onEnterCancelled(el) {
		      finishEnter(el, false);
		      callHook(onEnterCancelled, [el]);
		    },
		    onAppearCancelled(el) {
		      finishEnter(el, true);
		      callHook(onAppearCancelled, [el]);
		    },
		    onLeaveCancelled(el) {
		      finishLeave(el);
		      callHook(onLeaveCancelled, [el]);
		    }
		  });
		}
		function normalizeDuration(duration) {
		  if (duration == null) {
		    return null;
		  } else if (shared.isObject(duration)) {
		    return [NumberOf(duration.enter), NumberOf(duration.leave)];
		  } else {
		    const n = NumberOf(duration);
		    return [n, n];
		  }
		}
		function NumberOf(val) {
		  const res = shared.toNumber(val);
		  {
		    runtimeCore.assertNumber(res, "<transition> explicit duration");
		  }
		  return res;
		}
		function addTransitionClass(el, cls) {
		  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
		  (el[vtcKey] || (el[vtcKey] =  new Set())).add(cls);
		}
		function removeTransitionClass(el, cls) {
		  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
		  const _vtc = el[vtcKey];
		  if (_vtc) {
		    _vtc.delete(cls);
		    if (!_vtc.size) {
		      el[vtcKey] = void 0;
		    }
		  }
		}
		function nextFrame(cb) {
		  requestAnimationFrame(() => {
		    requestAnimationFrame(cb);
		  });
		}
		let endId = 0;
		function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
		  const id = el._endId = ++endId;
		  const resolveIfNotStale = () => {
		    if (id === el._endId) {
		      resolve();
		    }
		  };
		  if (explicitTimeout) {
		    return setTimeout(resolveIfNotStale, explicitTimeout);
		  }
		  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
		  if (!type) {
		    return resolve();
		  }
		  const endEvent = type + "end";
		  let ended = 0;
		  const end = () => {
		    el.removeEventListener(endEvent, onEnd);
		    resolveIfNotStale();
		  };
		  const onEnd = (e) => {
		    if (e.target === el && ++ended >= propCount) {
		      end();
		    }
		  };
		  setTimeout(() => {
		    if (ended < propCount) {
		      end();
		    }
		  }, timeout + 1);
		  el.addEventListener(endEvent, onEnd);
		}
		function getTransitionInfo(el, expectedType) {
		  const styles = window.getComputedStyle(el);
		  const getStyleProperties = (key) => (styles[key] || "").split(", ");
		  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
		  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
		  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
		  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
		  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
		  const animationTimeout = getTimeout(animationDelays, animationDurations);
		  let type = null;
		  let timeout = 0;
		  let propCount = 0;
		  if (expectedType === TRANSITION) {
		    if (transitionTimeout > 0) {
		      type = TRANSITION;
		      timeout = transitionTimeout;
		      propCount = transitionDurations.length;
		    }
		  } else if (expectedType === ANIMATION) {
		    if (animationTimeout > 0) {
		      type = ANIMATION;
		      timeout = animationTimeout;
		      propCount = animationDurations.length;
		    }
		  } else {
		    timeout = Math.max(transitionTimeout, animationTimeout);
		    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
		    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
		  }
		  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(
		    getStyleProperties(`${TRANSITION}Property`).toString()
		  );
		  return {
		    type,
		    timeout,
		    propCount,
		    hasTransform
		  };
		}
		function getTimeout(delays, durations) {
		  while (delays.length < durations.length) {
		    delays = delays.concat(delays);
		  }
		  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
		}
		function toMs(s) {
		  if (s === "auto") return 0;
		  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
		}
		function forceReflow() {
		  return document.body.offsetHeight;
		}
		function patchClass(el, value, isSVG) {
		  const transitionClasses = el[vtcKey];
		  if (transitionClasses) {
		    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
		  }
		  if (value == null) {
		    el.removeAttribute("class");
		  } else if (isSVG) {
		    el.setAttribute("class", value);
		  } else {
		    el.className = value;
		  }
		}
		const vShowOriginalDisplay = Symbol("_vod");
		const vShowHidden = Symbol("_vsh");
		const vShow = {
		  beforeMount(el, { value }, { transition }) {
		    el[vShowOriginalDisplay] = el.style.display === "none" ? "" : el.style.display;
		    if (transition && value) {
		      transition.beforeEnter(el);
		    } else {
		      setDisplay(el, value);
		    }
		  },
		  mounted(el, { value }, { transition }) {
		    if (transition && value) {
		      transition.enter(el);
		    }
		  },
		  updated(el, { value, oldValue }, { transition }) {
		    if (!value === !oldValue) return;
		    if (transition) {
		      if (value) {
		        transition.beforeEnter(el);
		        setDisplay(el, true);
		        transition.enter(el);
		      } else {
		        transition.leave(el, () => {
		          setDisplay(el, false);
		        });
		      }
		    } else {
		      setDisplay(el, value);
		    }
		  },
		  beforeUnmount(el, { value }) {
		    setDisplay(el, value);
		  }
		};
		{
		  vShow.name = "show";
		}
		function setDisplay(el, value) {
		  el.style.display = value ? el[vShowOriginalDisplay] : "none";
		  el[vShowHidden] = !value;
		}
		function initVShowForSSR() {
		  vShow.getSSRProps = ({ value }) => {
		    if (!value) {
		      return { style: { display: "none" } };
		    }
		  };
		}
		const CSS_VAR_TEXT = Symbol("CSS_VAR_TEXT" );
		function useCssVars(getter) {
		  return;
		}
		const displayRE = /(^|;)\s*display\s*:/;
		function patchStyle(el, prev, next) {
		  const style = el.style;
		  const isCssString = shared.isString(next);
		  let hasControlledDisplay = false;
		  if (next && !isCssString) {
		    if (prev) {
		      if (!shared.isString(prev)) {
		        for (const key in prev) {
		          if (next[key] == null) {
		            setStyle(style, key, "");
		          }
		        }
		      } else {
		        for (const prevStyle of prev.split(";")) {
		          const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
		          if (next[key] == null) {
		            setStyle(style, key, "");
		          }
		        }
		      }
		    }
		    for (const key in next) {
		      if (key === "display") {
		        hasControlledDisplay = true;
		      }
		      setStyle(style, key, next[key]);
		    }
		  } else {
		    if (isCssString) {
		      if (prev !== next) {
		        const cssVarText = style[CSS_VAR_TEXT];
		        if (cssVarText) {
		          next += ";" + cssVarText;
		        }
		        style.cssText = next;
		        hasControlledDisplay = displayRE.test(next);
		      }
		    } else if (prev) {
		      el.removeAttribute("style");
		    }
		  }
		  if (vShowOriginalDisplay in el) {
		    el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
		    if (el[vShowHidden]) {
		      style.display = "none";
		    }
		  }
		}
		const semicolonRE = /[^\\];\s*$/;
		const importantRE = /\s*!important$/;
		function setStyle(style, name, val) {
		  if (shared.isArray(val)) {
		    val.forEach((v) => setStyle(style, name, v));
		  } else {
		    if (val == null) val = "";
		    {
		      if (semicolonRE.test(val)) {
		        runtimeCore.warn(
		          `Unexpected semicolon at the end of '${name}' style value: '${val}'`
		        );
		      }
		    }
		    if (name.startsWith("--")) {
		      style.setProperty(name, val);
		    } else {
		      const prefixed = autoPrefix(style, name);
		      if (importantRE.test(val)) {
		        style.setProperty(
		          shared.hyphenate(prefixed),
		          val.replace(importantRE, ""),
		          "important"
		        );
		      } else {
		        style[prefixed] = val;
		      }
		    }
		  }
		}
		const prefixes = ["Webkit", "Moz", "ms"];
		const prefixCache = {};
		function autoPrefix(style, rawName) {
		  const cached = prefixCache[rawName];
		  if (cached) {
		    return cached;
		  }
		  let name = runtimeCore.camelize(rawName);
		  if (name !== "filter" && name in style) {
		    return prefixCache[rawName] = name;
		  }
		  name = shared.capitalize(name);
		  for (let i = 0; i < prefixes.length; i++) {
		    const prefixed = prefixes[i] + name;
		    if (prefixed in style) {
		      return prefixCache[rawName] = prefixed;
		    }
		  }
		  return rawName;
		}
		const xlinkNS = "http://www.w3.org/1999/xlink";
		function patchAttr(el, key, value, isSVG, instance, isBoolean = shared.isSpecialBooleanAttr(key)) {
		  if (isSVG && key.startsWith("xlink:")) {
		    if (value == null) {
		      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
		    } else {
		      el.setAttributeNS(xlinkNS, key, value);
		    }
		  } else {
		    if (value == null || isBoolean && !shared.includeBooleanAttr(value)) {
		      el.removeAttribute(key);
		    } else {
		      el.setAttribute(
		        key,
		        isBoolean ? "" : shared.isSymbol(value) ? String(value) : value
		      );
		    }
		  }
		}
		function patchDOMProp(el, key, value, parentComponent) {
		  if (key === "innerHTML" || key === "textContent") {
		    if (value === null) return;
		    el[key] = value;
		    return;
		  }
		  const tag = el.tagName;
		  if (key === "value" && tag !== "PROGRESS" &&
		  !tag.includes("-")) {
		    const oldValue = tag === "OPTION" ? el.getAttribute("value") || "" : el.value;
		    const newValue = value == null ? "" : String(value);
		    if (oldValue !== newValue || !("_value" in el)) {
		      el.value = newValue;
		    }
		    if (value == null) {
		      el.removeAttribute(key);
		    }
		    el._value = value;
		    return;
		  }
		  let needRemove = false;
		  if (value === "" || value == null) {
		    const type = typeof el[key];
		    if (type === "boolean") {
		      value = shared.includeBooleanAttr(value);
		    } else if (value == null && type === "string") {
		      value = "";
		      needRemove = true;
		    } else if (type === "number") {
		      value = 0;
		      needRemove = true;
		    }
		  }
		  try {
		    el[key] = value;
		  } catch (e) {
		    if (!needRemove) {
		      runtimeCore.warn(
		        `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
		        e
		      );
		    }
		  }
		  needRemove && el.removeAttribute(key);
		}
		function addEventListener(el, event, handler, options) {
		  el.addEventListener(event, handler, options);
		}
		function removeEventListener(el, event, handler, options) {
		  el.removeEventListener(event, handler, options);
		}
		const veiKey = Symbol("_vei");
		function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
		  const invokers = el[veiKey] || (el[veiKey] = {});
		  const existingInvoker = invokers[rawName];
		  if (nextValue && existingInvoker) {
		    existingInvoker.value = sanitizeEventValue(nextValue, rawName) ;
		  } else {
		    const [name, options] = parseName(rawName);
		    if (nextValue) {
		      const invoker = invokers[rawName] = createInvoker(
		        sanitizeEventValue(nextValue, rawName) ,
		        instance
		      );
		      addEventListener(el, name, invoker, options);
		    } else if (existingInvoker) {
		      removeEventListener(el, name, existingInvoker, options);
		      invokers[rawName] = void 0;
		    }
		  }
		}
		const optionsModifierRE = /(?:Once|Passive|Capture)$/;
		function parseName(name) {
		  let options;
		  if (optionsModifierRE.test(name)) {
		    options = {};
		    let m;
		    while (m = name.match(optionsModifierRE)) {
		      name = name.slice(0, name.length - m[0].length);
		      options[m[0].toLowerCase()] = true;
		    }
		  }
		  const event = name[2] === ":" ? name.slice(3) : shared.hyphenate(name.slice(2));
		  return [event, options];
		}
		let cachedNow = 0;
		const p =  Promise.resolve();
		const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
		function createInvoker(initialValue, instance) {
		  const invoker = (e) => {
		    if (!e._vts) {
		      e._vts = Date.now();
		    } else if (e._vts <= invoker.attached) {
		      return;
		    }
		    runtimeCore.callWithAsyncErrorHandling(
		      patchStopImmediatePropagation(e, invoker.value),
		      instance,
		      5,
		      [e]
		    );
		  };
		  invoker.value = initialValue;
		  invoker.attached = getNow();
		  return invoker;
		}
		function sanitizeEventValue(value, propName) {
		  if (shared.isFunction(value) || shared.isArray(value)) {
		    return value;
		  }
		  runtimeCore.warn(
		    `Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof value}.`
		  );
		  return shared.NOOP;
		}
		function patchStopImmediatePropagation(e, value) {
		  if (shared.isArray(value)) {
		    const originalStop = e.stopImmediatePropagation;
		    e.stopImmediatePropagation = () => {
		      originalStop.call(e);
		      e._stopped = true;
		    };
		    return value.map(
		      (fn) => (e2) => !e2._stopped && fn && fn(e2)
		    );
		  } else {
		    return value;
		  }
		}
		const isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 &&
		key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
		const patchProp = (el, key, prevValue, nextValue, namespace, parentComponent) => {
		  const isSVG = namespace === "svg";
		  if (key === "class") {
		    patchClass(el, nextValue, isSVG);
		  } else if (key === "style") {
		    patchStyle(el, prevValue, nextValue);
		  } else if (shared.isOn(key)) {
		    if (!shared.isModelListener(key)) {
		      patchEvent(el, key, prevValue, nextValue, parentComponent);
		    }
		  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
		    patchDOMProp(el, key, nextValue);
		    if (!el.tagName.includes("-") && (key === "value" || key === "checked" || key === "selected")) {
		      patchAttr(el, key, nextValue, isSVG, parentComponent, key !== "value");
		    }
		  } else {
		    if (key === "true-value") {
		      el._trueValue = nextValue;
		    } else if (key === "false-value") {
		      el._falseValue = nextValue;
		    }
		    patchAttr(el, key, nextValue, isSVG);
		  }
		};
		function shouldSetAsProp(el, key, value, isSVG) {
		  if (isSVG) {
		    if (key === "innerHTML" || key === "textContent") {
		      return true;
		    }
		    if (key in el && isNativeOn(key) && shared.isFunction(value)) {
		      return true;
		    }
		    return false;
		  }
		  if (key === "spellcheck" || key === "draggable" || key === "translate") {
		    return false;
		  }
		  if (key === "form") {
		    return false;
		  }
		  if (key === "list" && el.tagName === "INPUT") {
		    return false;
		  }
		  if (key === "type" && el.tagName === "TEXTAREA") {
		    return false;
		  }
		  if (key === "width" || key === "height") {
		    const tag = el.tagName;
		    if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
		      return false;
		    }
		  }
		  if (isNativeOn(key) && shared.isString(value)) {
		    return false;
		  }
		  return key in el;
		}
		/*! #__NO_SIDE_EFFECTS__ */
		function defineCustomElement(options, extraOptions, hydrate2) {
		  const Comp = runtimeCore.defineComponent(options, extraOptions);
		  class VueCustomElement extends VueElement {
		    constructor(initialProps) {
		      super(Comp, initialProps, hydrate2);
		    }
		  }
		  VueCustomElement.def = Comp;
		  return VueCustomElement;
		}
		/*! #__NO_SIDE_EFFECTS__ */
		const defineSSRCustomElement =  (options, extraOptions) => {
		  return  defineCustomElement(options, extraOptions, hydrate);
		};
		const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
		};
		class VueElement extends BaseClass {
		  constructor(_def, _props = {}, hydrate2) {
		    super();
		    this._def = _def;
		    this._props = _props;
		    this._instance = null;
		    this._connected = false;
		    this._resolved = false;
		    this._numberProps = null;
		    this._ob = null;
		    if (this.shadowRoot && hydrate2) {
		      hydrate2(this._createVNode(), this.shadowRoot);
		    } else {
		      if (this.shadowRoot) {
		        runtimeCore.warn(
		          `Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`
		        );
		      }
		      this.attachShadow({ mode: "open" });
		      if (!this._def.__asyncLoader) {
		        this._resolveProps(this._def);
		      }
		    }
		  }
		  connectedCallback() {
		    this._connected = true;
		    if (!this._instance) {
		      if (this._resolved) {
		        this._update();
		      } else {
		        this._resolveDef();
		      }
		    }
		  }
		  disconnectedCallback() {
		    this._connected = false;
		    runtimeCore.nextTick(() => {
		      if (!this._connected) {
		        if (this._ob) {
		          this._ob.disconnect();
		          this._ob = null;
		        }
		        render(null, this.shadowRoot);
		        this._instance = null;
		      }
		    });
		  }
		  _resolveDef() {
		    this._resolved = true;
		    for (let i = 0; i < this.attributes.length; i++) {
		      this._setAttr(this.attributes[i].name);
		    }
		    this._ob = new MutationObserver((mutations) => {
		      for (const m of mutations) {
		        this._setAttr(m.attributeName);
		      }
		    });
		    this._ob.observe(this, { attributes: true });
		    const resolve = (def, isAsync = false) => {
		      const { props, styles } = def;
		      let numberProps;
		      if (props && !shared.isArray(props)) {
		        for (const key in props) {
		          const opt = props[key];
		          if (opt === Number || opt && opt.type === Number) {
		            if (key in this._props) {
		              this._props[key] = shared.toNumber(this._props[key]);
		            }
		            (numberProps || (numberProps =  Object.create(null)))[shared.camelize(key)] = true;
		          }
		        }
		      }
		      this._numberProps = numberProps;
		      if (isAsync) {
		        this._resolveProps(def);
		      }
		      this._applyStyles(styles);
		      this._update();
		    };
		    const asyncDef = this._def.__asyncLoader;
		    if (asyncDef) {
		      asyncDef().then((def) => resolve(def, true));
		    } else {
		      resolve(this._def);
		    }
		  }
		  _resolveProps(def) {
		    const { props } = def;
		    const declaredPropKeys = shared.isArray(props) ? props : Object.keys(props || {});
		    for (const key of Object.keys(this)) {
		      if (key[0] !== "_" && declaredPropKeys.includes(key)) {
		        this._setProp(key, this[key], true, false);
		      }
		    }
		    for (const key of declaredPropKeys.map(shared.camelize)) {
		      Object.defineProperty(this, key, {
		        get() {
		          return this._getProp(key);
		        },
		        set(val) {
		          this._setProp(key, val);
		        }
		      });
		    }
		  }
		  _setAttr(key) {
		    let value = this.hasAttribute(key) ? this.getAttribute(key) : void 0;
		    const camelKey = shared.camelize(key);
		    if (this._numberProps && this._numberProps[camelKey]) {
		      value = shared.toNumber(value);
		    }
		    this._setProp(camelKey, value, false);
		  }
		  _getProp(key) {
		    return this._props[key];
		  }
		  _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
		    if (val !== this._props[key]) {
		      this._props[key] = val;
		      if (shouldUpdate && this._instance) {
		        this._update();
		      }
		      if (shouldReflect) {
		        if (val === true) {
		          this.setAttribute(shared.hyphenate(key), "");
		        } else if (typeof val === "string" || typeof val === "number") {
		          this.setAttribute(shared.hyphenate(key), val + "");
		        } else if (!val) {
		          this.removeAttribute(shared.hyphenate(key));
		        }
		      }
		    }
		  }
		  _update() {
		    render(this._createVNode(), this.shadowRoot);
		  }
		  _createVNode() {
		    const vnode = runtimeCore.createVNode(this._def, shared.extend({}, this._props));
		    if (!this._instance) {
		      vnode.ce = (instance) => {
		        this._instance = instance;
		        instance.isCE = true;
		        {
		          instance.ceReload = (newStyles) => {
		            if (this._styles) {
		              this._styles.forEach((s) => this.shadowRoot.removeChild(s));
		              this._styles.length = 0;
		            }
		            this._applyStyles(newStyles);
		            this._instance = null;
		            this._update();
		          };
		        }
		        const dispatch = (event, args) => {
		          this.dispatchEvent(
		            new CustomEvent(event, {
		              detail: args
		            })
		          );
		        };
		        instance.emit = (event, ...args) => {
		          dispatch(event, args);
		          if (shared.hyphenate(event) !== event) {
		            dispatch(shared.hyphenate(event), args);
		          }
		        };
		        let parent = this;
		        while (parent = parent && (parent.parentNode || parent.host)) {
		          if (parent instanceof VueElement) {
		            instance.parent = parent._instance;
		            instance.provides = parent._instance.provides;
		            break;
		          }
		        }
		      };
		    }
		    return vnode;
		  }
		  _applyStyles(styles) {
		    if (styles) {
		      styles.forEach((css) => {
		        const s = document.createElement("style");
		        s.textContent = css;
		        this.shadowRoot.appendChild(s);
		        {
		          (this._styles || (this._styles = [])).push(s);
		        }
		      });
		    }
		  }
		}
		function useCssModule(name = "$style") {
		  {
		    const instance = runtimeCore.getCurrentInstance();
		    if (!instance) {
		      runtimeCore.warn(`useCssModule must be called inside setup()`);
		      return shared.EMPTY_OBJ;
		    }
		    const modules = instance.type.__cssModules;
		    if (!modules) {
		      runtimeCore.warn(`Current instance does not have CSS modules injected.`);
		      return shared.EMPTY_OBJ;
		    }
		    const mod = modules[name];
		    if (!mod) {
		      runtimeCore.warn(`Current instance does not have CSS module named "${name}".`);
		      return shared.EMPTY_OBJ;
		    }
		    return mod;
		  }
		}
		const positionMap =  new WeakMap();
		const newPositionMap =  new WeakMap();
		const moveCbKey = Symbol("_moveCb");
		const enterCbKey = Symbol("_enterCb");
		const TransitionGroupImpl = {
		  name: "TransitionGroup",
		  props:  shared.extend({}, TransitionPropsValidators, {
		    tag: String,
		    moveClass: String
		  }),
		  setup(props, { slots }) {
		    const instance = runtimeCore.getCurrentInstance();
		    const state = runtimeCore.useTransitionState();
		    let prevChildren;
		    let children;
		    runtimeCore.onUpdated(() => {
		      if (!prevChildren.length) {
		        return;
		      }
		      const moveClass = props.moveClass || `${props.name || "v"}-move`;
		      if (!hasCSSTransform(
		        prevChildren[0].el,
		        instance.vnode.el,
		        moveClass
		      )) {
		        return;
		      }
		      prevChildren.forEach(callPendingCbs);
		      prevChildren.forEach(recordPosition);
		      const movedChildren = prevChildren.filter(applyTranslation);
		      forceReflow();
		      movedChildren.forEach((c) => {
		        const el = c.el;
		        const style = el.style;
		        addTransitionClass(el, moveClass);
		        style.transform = style.webkitTransform = style.transitionDuration = "";
		        const cb = el[moveCbKey] = (e) => {
		          if (e && e.target !== el) {
		            return;
		          }
		          if (!e || /transform$/.test(e.propertyName)) {
		            el.removeEventListener("transitionend", cb);
		            el[moveCbKey] = null;
		            removeTransitionClass(el, moveClass);
		          }
		        };
		        el.addEventListener("transitionend", cb);
		      });
		    });
		    return () => {
		      const rawProps = runtimeCore.toRaw(props);
		      const cssTransitionProps = resolveTransitionProps(rawProps);
		      let tag = rawProps.tag || runtimeCore.Fragment;
		      prevChildren = [];
		      if (children) {
		        for (let i = 0; i < children.length; i++) {
		          const child = children[i];
		          if (child.el && child.el instanceof Element) {
		            prevChildren.push(child);
		            runtimeCore.setTransitionHooks(
		              child,
		              runtimeCore.resolveTransitionHooks(
		                child,
		                cssTransitionProps,
		                state,
		                instance
		              )
		            );
		            positionMap.set(
		              child,
		              child.el.getBoundingClientRect()
		            );
		          }
		        }
		      }
		      children = slots.default ? runtimeCore.getTransitionRawChildren(slots.default()) : [];
		      for (let i = 0; i < children.length; i++) {
		        const child = children[i];
		        if (child.key != null) {
		          runtimeCore.setTransitionHooks(
		            child,
		            runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance)
		          );
		        } else {
		          runtimeCore.warn(`<TransitionGroup> children must be keyed.`);
		        }
		      }
		      return runtimeCore.createVNode(tag, null, children);
		    };
		  }
		};
		const removeMode = (props) => delete props.mode;
		 removeMode(TransitionGroupImpl.props);
		const TransitionGroup = TransitionGroupImpl;
		function callPendingCbs(c) {
		  const el = c.el;
		  if (el[moveCbKey]) {
		    el[moveCbKey]();
		  }
		  if (el[enterCbKey]) {
		    el[enterCbKey]();
		  }
		}
		function recordPosition(c) {
		  newPositionMap.set(c, c.el.getBoundingClientRect());
		}
		function applyTranslation(c) {
		  const oldPos = positionMap.get(c);
		  const newPos = newPositionMap.get(c);
		  const dx = oldPos.left - newPos.left;
		  const dy = oldPos.top - newPos.top;
		  if (dx || dy) {
		    const s = c.el.style;
		    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
		    s.transitionDuration = "0s";
		    return c;
		  }
		}
		function hasCSSTransform(el, root, moveClass) {
		  const clone = el.cloneNode();
		  const _vtc = el[vtcKey];
		  if (_vtc) {
		    _vtc.forEach((cls) => {
		      cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
		    });
		  }
		  moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
		  clone.style.display = "none";
		  const container = root.nodeType === 1 ? root : root.parentNode;
		  container.appendChild(clone);
		  const { hasTransform } = getTransitionInfo(clone);
		  container.removeChild(clone);
		  return hasTransform;
		}
		const getModelAssigner = (vnode) => {
		  const fn = vnode.props["onUpdate:modelValue"] || false;
		  return shared.isArray(fn) ? (value) => shared.invokeArrayFns(fn, value) : fn;
		};
		function onCompositionStart(e) {
		  e.target.composing = true;
		}
		function onCompositionEnd(e) {
		  const target = e.target;
		  if (target.composing) {
		    target.composing = false;
		    target.dispatchEvent(new Event("input"));
		  }
		}
		const assignKey = Symbol("_assign");
		const vModelText = {
		  created(el, { modifiers: { lazy, trim, number } }, vnode) {
		    el[assignKey] = getModelAssigner(vnode);
		    const castToNumber = number || vnode.props && vnode.props.type === "number";
		    addEventListener(el, lazy ? "change" : "input", (e) => {
		      if (e.target.composing) return;
		      let domValue = el.value;
		      if (trim) {
		        domValue = domValue.trim();
		      }
		      if (castToNumber) {
		        domValue = shared.looseToNumber(domValue);
		      }
		      el[assignKey](domValue);
		    });
		    if (trim) {
		      addEventListener(el, "change", () => {
		        el.value = el.value.trim();
		      });
		    }
		    if (!lazy) {
		      addEventListener(el, "compositionstart", onCompositionStart);
		      addEventListener(el, "compositionend", onCompositionEnd);
		      addEventListener(el, "change", onCompositionEnd);
		    }
		  },
		  mounted(el, { value }) {
		    el.value = value == null ? "" : value;
		  },
		  beforeUpdate(el, { value, oldValue, modifiers: { lazy, trim, number } }, vnode) {
		    el[assignKey] = getModelAssigner(vnode);
		    if (el.composing) return;
		    const elValue = (number || el.type === "number") && !/^0\d/.test(el.value) ? shared.looseToNumber(el.value) : el.value;
		    const newValue = value == null ? "" : value;
		    if (elValue === newValue) {
		      return;
		    }
		    if (document.activeElement === el && el.type !== "range") {
		      if (lazy && value === oldValue) {
		        return;
		      }
		      if (trim && el.value.trim() === newValue) {
		        return;
		      }
		    }
		    el.value = newValue;
		  }
		};
		const vModelCheckbox = {
		  deep: true,
		  created(el, _, vnode) {
		    el[assignKey] = getModelAssigner(vnode);
		    addEventListener(el, "change", () => {
		      const modelValue = el._modelValue;
		      const elementValue = getValue(el);
		      const checked = el.checked;
		      const assign = el[assignKey];
		      if (shared.isArray(modelValue)) {
		        const index = shared.looseIndexOf(modelValue, elementValue);
		        const found = index !== -1;
		        if (checked && !found) {
		          assign(modelValue.concat(elementValue));
		        } else if (!checked && found) {
		          const filtered = [...modelValue];
		          filtered.splice(index, 1);
		          assign(filtered);
		        }
		      } else if (shared.isSet(modelValue)) {
		        const cloned = new Set(modelValue);
		        if (checked) {
		          cloned.add(elementValue);
		        } else {
		          cloned.delete(elementValue);
		        }
		        assign(cloned);
		      } else {
		        assign(getCheckboxValue(el, checked));
		      }
		    });
		  },
		  mounted: setChecked,
		  beforeUpdate(el, binding, vnode) {
		    el[assignKey] = getModelAssigner(vnode);
		    setChecked(el, binding, vnode);
		  }
		};
		function setChecked(el, { value, oldValue }, vnode) {
		  el._modelValue = value;
		  if (shared.isArray(value)) {
		    el.checked = shared.looseIndexOf(value, vnode.props.value) > -1;
		  } else if (shared.isSet(value)) {
		    el.checked = value.has(vnode.props.value);
		  } else if (value !== oldValue) {
		    el.checked = shared.looseEqual(value, getCheckboxValue(el, true));
		  }
		}
		const vModelRadio = {
		  created(el, { value }, vnode) {
		    el.checked = shared.looseEqual(value, vnode.props.value);
		    el[assignKey] = getModelAssigner(vnode);
		    addEventListener(el, "change", () => {
		      el[assignKey](getValue(el));
		    });
		  },
		  beforeUpdate(el, { value, oldValue }, vnode) {
		    el[assignKey] = getModelAssigner(vnode);
		    if (value !== oldValue) {
		      el.checked = shared.looseEqual(value, vnode.props.value);
		    }
		  }
		};
		const vModelSelect = {
		  deep: true,
		  created(el, { value, modifiers: { number } }, vnode) {
		    const isSetModel = shared.isSet(value);
		    addEventListener(el, "change", () => {
		      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map(
		        (o) => number ? shared.looseToNumber(getValue(o)) : getValue(o)
		      );
		      el[assignKey](
		        el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
		      );
		      el._assigning = true;
		      runtimeCore.nextTick(() => {
		        el._assigning = false;
		      });
		    });
		    el[assignKey] = getModelAssigner(vnode);
		  },
		  mounted(el, { value, modifiers: { number } }) {
		    setSelected(el, value);
		  },
		  beforeUpdate(el, _binding, vnode) {
		    el[assignKey] = getModelAssigner(vnode);
		  },
		  updated(el, { value, modifiers: { number } }) {
		    if (!el._assigning) {
		      setSelected(el, value);
		    }
		  }
		};
		function setSelected(el, value, number) {
		  const isMultiple = el.multiple;
		  const isArrayValue = shared.isArray(value);
		  if (isMultiple && !isArrayValue && !shared.isSet(value)) {
		    runtimeCore.warn(
		      `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`
		    );
		    return;
		  }
		  for (let i = 0, l = el.options.length; i < l; i++) {
		    const option = el.options[i];
		    const optionValue = getValue(option);
		    if (isMultiple) {
		      if (isArrayValue) {
		        const optionType = typeof optionValue;
		        if (optionType === "string" || optionType === "number") {
		          option.selected = value.some((v) => String(v) === String(optionValue));
		        } else {
		          option.selected = shared.looseIndexOf(value, optionValue) > -1;
		        }
		      } else {
		        option.selected = value.has(optionValue);
		      }
		    } else if (shared.looseEqual(getValue(option), value)) {
		      if (el.selectedIndex !== i) el.selectedIndex = i;
		      return;
		    }
		  }
		  if (!isMultiple && el.selectedIndex !== -1) {
		    el.selectedIndex = -1;
		  }
		}
		function getValue(el) {
		  return "_value" in el ? el._value : el.value;
		}
		function getCheckboxValue(el, checked) {
		  const key = checked ? "_trueValue" : "_falseValue";
		  return key in el ? el[key] : checked;
		}
		const vModelDynamic = {
		  created(el, binding, vnode) {
		    callModelHook(el, binding, vnode, null, "created");
		  },
		  mounted(el, binding, vnode) {
		    callModelHook(el, binding, vnode, null, "mounted");
		  },
		  beforeUpdate(el, binding, vnode, prevVNode) {
		    callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
		  },
		  updated(el, binding, vnode, prevVNode) {
		    callModelHook(el, binding, vnode, prevVNode, "updated");
		  }
		};
		function resolveDynamicModel(tagName, type) {
		  switch (tagName) {
		    case "SELECT":
		      return vModelSelect;
		    case "TEXTAREA":
		      return vModelText;
		    default:
		      switch (type) {
		        case "checkbox":
		          return vModelCheckbox;
		        case "radio":
		          return vModelRadio;
		        default:
		          return vModelText;
		      }
		  }
		}
		function callModelHook(el, binding, vnode, prevVNode, hook) {
		  const modelToUse = resolveDynamicModel(
		    el.tagName,
		    vnode.props && vnode.props.type
		  );
		  const fn = modelToUse[hook];
		  fn && fn(el, binding, vnode, prevVNode);
		}
		function initVModelForSSR() {
		  vModelText.getSSRProps = ({ value }) => ({ value });
		  vModelRadio.getSSRProps = ({ value }, vnode) => {
		    if (vnode.props && shared.looseEqual(vnode.props.value, value)) {
		      return { checked: true };
		    }
		  };
		  vModelCheckbox.getSSRProps = ({ value }, vnode) => {
		    if (shared.isArray(value)) {
		      if (vnode.props && shared.looseIndexOf(value, vnode.props.value) > -1) {
		        return { checked: true };
		      }
		    } else if (shared.isSet(value)) {
		      if (vnode.props && value.has(vnode.props.value)) {
		        return { checked: true };
		      }
		    } else if (value) {
		      return { checked: true };
		    }
		  };
		  vModelDynamic.getSSRProps = (binding, vnode) => {
		    if (typeof vnode.type !== "string") {
		      return;
		    }
		    const modelToUse = resolveDynamicModel(
		      vnode.type.toUpperCase(),
		      vnode.props && vnode.props.type
		    );
		    if (modelToUse.getSSRProps) {
		      return modelToUse.getSSRProps(binding, vnode);
		    }
		  };
		}
		const systemModifiers = ["ctrl", "shift", "alt", "meta"];
		const modifierGuards = {
		  stop: (e) => e.stopPropagation(),
		  prevent: (e) => e.preventDefault(),
		  self: (e) => e.target !== e.currentTarget,
		  ctrl: (e) => !e.ctrlKey,
		  shift: (e) => !e.shiftKey,
		  alt: (e) => !e.altKey,
		  meta: (e) => !e.metaKey,
		  left: (e) => "button" in e && e.button !== 0,
		  middle: (e) => "button" in e && e.button !== 1,
		  right: (e) => "button" in e && e.button !== 2,
		  exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
		};
		const withModifiers = (fn, modifiers) => {
		  const cache = fn._withMods || (fn._withMods = {});
		  const cacheKey = modifiers.join(".");
		  return cache[cacheKey] || (cache[cacheKey] = (event, ...args) => {
		    for (let i = 0; i < modifiers.length; i++) {
		      const guard = modifierGuards[modifiers[i]];
		      if (guard && guard(event, modifiers)) return;
		    }
		    return fn(event, ...args);
		  });
		};
		const keyNames = {
		  esc: "escape",
		  space: " ",
		  up: "arrow-up",
		  left: "arrow-left",
		  right: "arrow-right",
		  down: "arrow-down",
		  delete: "backspace"
		};
		const withKeys = (fn, modifiers) => {
		  const cache = fn._withKeys || (fn._withKeys = {});
		  const cacheKey = modifiers.join(".");
		  return cache[cacheKey] || (cache[cacheKey] = (event) => {
		    if (!("key" in event)) {
		      return;
		    }
		    const eventKey = shared.hyphenate(event.key);
		    if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
		      return fn(event);
		    }
		  });
		};
		const rendererOptions =  shared.extend({ patchProp }, nodeOps);
		let renderer;
		let enabledHydration = false;
		function ensureRenderer() {
		  return renderer || (renderer = runtimeCore.createRenderer(rendererOptions));
		}
		function ensureHydrationRenderer() {
		  renderer = enabledHydration ? renderer : runtimeCore.createHydrationRenderer(rendererOptions);
		  enabledHydration = true;
		  return renderer;
		}
		const render = (...args) => {
		  ensureRenderer().render(...args);
		};
		const hydrate = (...args) => {
		  ensureHydrationRenderer().hydrate(...args);
		};
		const createApp = (...args) => {
		  const app = ensureRenderer().createApp(...args);
		  {
		    injectNativeTagCheck(app);
		    injectCompilerOptionsCheck(app);
		  }
		  const { mount } = app;
		  app.mount = (containerOrSelector) => {
		    const container = normalizeContainer(containerOrSelector);
		    if (!container) return;
		    const component = app._component;
		    if (!shared.isFunction(component) && !component.render && !component.template) {
		      component.template = container.innerHTML;
		    }
		    container.innerHTML = "";
		    const proxy = mount(container, false, resolveRootNamespace(container));
		    if (container instanceof Element) {
		      container.removeAttribute("v-cloak");
		      container.setAttribute("data-v-app", "");
		    }
		    return proxy;
		  };
		  return app;
		};
		const createSSRApp = (...args) => {
		  const app = ensureHydrationRenderer().createApp(...args);
		  {
		    injectNativeTagCheck(app);
		    injectCompilerOptionsCheck(app);
		  }
		  const { mount } = app;
		  app.mount = (containerOrSelector) => {
		    const container = normalizeContainer(containerOrSelector);
		    if (container) {
		      return mount(container, true, resolveRootNamespace(container));
		    }
		  };
		  return app;
		};
		function resolveRootNamespace(container) {
		  if (container instanceof SVGElement) {
		    return "svg";
		  }
		  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
		    return "mathml";
		  }
		}
		function injectNativeTagCheck(app) {
		  Object.defineProperty(app.config, "isNativeTag", {
		    value: (tag) => shared.isHTMLTag(tag) || shared.isSVGTag(tag) || shared.isMathMLTag(tag),
		    writable: false
		  });
		}
		function injectCompilerOptionsCheck(app) {
		  if (runtimeCore.isRuntimeOnly()) {
		    const isCustomElement = app.config.isCustomElement;
		    Object.defineProperty(app.config, "isCustomElement", {
		      get() {
		        return isCustomElement;
		      },
		      set() {
		        runtimeCore.warn(
		          `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
		        );
		      }
		    });
		    const compilerOptions = app.config.compilerOptions;
		    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
		    Object.defineProperty(app.config, "compilerOptions", {
		      get() {
		        runtimeCore.warn(msg);
		        return compilerOptions;
		      },
		      set() {
		        runtimeCore.warn(msg);
		      }
		    });
		  }
		}
		function normalizeContainer(container) {
		  if (shared.isString(container)) {
		    const res = document.querySelector(container);
		    if (!res) {
		      runtimeCore.warn(
		        `Failed to mount app: mount target selector "${container}" returned null.`
		      );
		    }
		    return res;
		  }
		  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
		    runtimeCore.warn(
		      `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
		    );
		  }
		  return container;
		}
		let ssrDirectiveInitialized = false;
		const initDirectivesForSSR = () => {
		  if (!ssrDirectiveInitialized) {
		    ssrDirectiveInitialized = true;
		    initVModelForSSR();
		    initVShowForSSR();
		  }
		} ;
		exports.Transition = Transition;
		exports.TransitionGroup = TransitionGroup;
		exports.VueElement = VueElement;
		exports.createApp = createApp;
		exports.createSSRApp = createSSRApp;
		exports.defineCustomElement = defineCustomElement;
		exports.defineSSRCustomElement = defineSSRCustomElement;
		exports.hydrate = hydrate;
		exports.initDirectivesForSSR = initDirectivesForSSR;
		exports.render = render;
		exports.useCssModule = useCssModule;
		exports.useCssVars = useCssVars;
		exports.vModelCheckbox = vModelCheckbox;
		exports.vModelDynamic = vModelDynamic;
		exports.vModelRadio = vModelRadio;
		exports.vModelSelect = vModelSelect;
		exports.vModelText = vModelText;
		exports.vShow = vShow;
		exports.withKeys = withKeys;
		exports.withModifiers = withModifiers;
		Object.keys(runtimeCore).forEach(function (k) {
		  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = runtimeCore[k];
		});
	} (runtimeDom_cjs));
	return runtimeDom_cjs;
}

var hasRequiredRuntimeDom;
function requireRuntimeDom () {
	if (hasRequiredRuntimeDom) return runtimeDom.exports;
	hasRequiredRuntimeDom = 1;
	{
	  runtimeDom.exports = requireRuntimeDom_cjs();
	}
	return runtimeDom.exports;
}

var vue_cjs = {};

/**
* vue v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredVue_cjs;
function requireVue_cjs () {
	if (hasRequiredVue_cjs) return vue_cjs;
	hasRequiredVue_cjs = 1;
	(function (exports) {
		Object.defineProperty(exports, '__esModule', { value: true });
		var compilerDom = requireCompilerDom();
		var runtimeDom = requireRuntimeDom();
		var shared = requireShared();
		function _interopNamespaceDefault(e) {
		  var n = Object.create(null);
		  if (e) {
		    for (var k in e) {
		      n[k] = e[k];
		    }
		  }
		  n.default = e;
		  return Object.freeze(n);
		}
		var runtimeDom__namespace = _interopNamespaceDefault(runtimeDom);
		const compileCache =  new WeakMap();
		function getCache(options) {
		  let c = compileCache.get(options != null ? options : shared.EMPTY_OBJ);
		  if (!c) {
		    c =  Object.create(null);
		    compileCache.set(options != null ? options : shared.EMPTY_OBJ, c);
		  }
		  return c;
		}
		function compileToFunction(template, options) {
		  if (!shared.isString(template)) {
		    if (template.nodeType) {
		      template = template.innerHTML;
		    } else {
		      runtimeDom.warn(`invalid template option: `, template);
		      return shared.NOOP;
		    }
		  }
		  const key = template;
		  const cache = getCache(options);
		  const cached = cache[key];
		  if (cached) {
		    return cached;
		  }
		  if (template[0] === "#") {
		    const el = document.querySelector(template);
		    if (!el) {
		      runtimeDom.warn(`Template element not found or is empty: ${template}`);
		    }
		    template = el ? el.innerHTML : ``;
		  }
		  const opts = shared.extend(
		    {
		      hoistStatic: true,
		      onError: onError ,
		      onWarn: (e) => onError(e, true)
		    },
		    options
		  );
		  if (!opts.isCustomElement && typeof customElements !== "undefined") {
		    opts.isCustomElement = (tag) => !!customElements.get(tag);
		  }
		  const { code } = compilerDom.compile(template, opts);
		  function onError(err, asWarning = false) {
		    const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
		    const codeFrame = err.loc && shared.generateCodeFrame(
		      template,
		      err.loc.start.offset,
		      err.loc.end.offset
		    );
		    runtimeDom.warn(codeFrame ? `${message}
${codeFrame}` : message);
		  }
		  const render = new Function("Vue", code)(runtimeDom__namespace);
		  render._rc = true;
		  return cache[key] = render;
		}
		runtimeDom.registerRuntimeCompiler(compileToFunction);
		exports.compile = compileToFunction;
		Object.keys(runtimeDom).forEach(function (k) {
		  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = runtimeDom[k];
		});
	} (vue_cjs));
	return vue_cjs;
}

var hasRequiredVue;
function requireVue () {
	if (hasRequiredVue) return vue$1.exports;
	hasRequiredVue = 1;
	{
	  vue$1.exports = requireVue_cjs();
	}
	return vue$1.exports;
}

var serverRenderer$1 = {exports: {}};

var compilerSsr_cjs = {};

/**
* @vue/compiler-ssr v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredCompilerSsr_cjs;
function requireCompilerSsr_cjs () {
	if (hasRequiredCompilerSsr_cjs) return compilerSsr_cjs;
	hasRequiredCompilerSsr_cjs = 1;
	Object.defineProperty(compilerSsr_cjs, '__esModule', { value: true });
	var compilerDom = requireCompilerDom();
	var shared = requireShared();
	const SSR_INTERPOLATE = Symbol(`ssrInterpolate`);
	const SSR_RENDER_VNODE = Symbol(`ssrRenderVNode`);
	const SSR_RENDER_COMPONENT = Symbol(`ssrRenderComponent`);
	const SSR_RENDER_SLOT = Symbol(`ssrRenderSlot`);
	const SSR_RENDER_SLOT_INNER = Symbol(`ssrRenderSlotInner`);
	const SSR_RENDER_CLASS = Symbol(`ssrRenderClass`);
	const SSR_RENDER_STYLE = Symbol(`ssrRenderStyle`);
	const SSR_RENDER_ATTRS = Symbol(`ssrRenderAttrs`);
	const SSR_RENDER_ATTR = Symbol(`ssrRenderAttr`);
	const SSR_RENDER_DYNAMIC_ATTR = Symbol(`ssrRenderDynamicAttr`);
	const SSR_RENDER_LIST = Symbol(`ssrRenderList`);
	const SSR_INCLUDE_BOOLEAN_ATTR = Symbol(`ssrIncludeBooleanAttr`);
	const SSR_LOOSE_EQUAL = Symbol(`ssrLooseEqual`);
	const SSR_LOOSE_CONTAIN = Symbol(`ssrLooseContain`);
	const SSR_RENDER_DYNAMIC_MODEL = Symbol(`ssrRenderDynamicModel`);
	const SSR_GET_DYNAMIC_MODEL_PROPS = Symbol(`ssrGetDynamicModelProps`);
	const SSR_RENDER_TELEPORT = Symbol(`ssrRenderTeleport`);
	const SSR_RENDER_SUSPENSE = Symbol(`ssrRenderSuspense`);
	const SSR_GET_DIRECTIVE_PROPS = Symbol(`ssrGetDirectiveProps`);
	const ssrHelpers = {
	  [SSR_INTERPOLATE]: `ssrInterpolate`,
	  [SSR_RENDER_VNODE]: `ssrRenderVNode`,
	  [SSR_RENDER_COMPONENT]: `ssrRenderComponent`,
	  [SSR_RENDER_SLOT]: `ssrRenderSlot`,
	  [SSR_RENDER_SLOT_INNER]: `ssrRenderSlotInner`,
	  [SSR_RENDER_CLASS]: `ssrRenderClass`,
	  [SSR_RENDER_STYLE]: `ssrRenderStyle`,
	  [SSR_RENDER_ATTRS]: `ssrRenderAttrs`,
	  [SSR_RENDER_ATTR]: `ssrRenderAttr`,
	  [SSR_RENDER_DYNAMIC_ATTR]: `ssrRenderDynamicAttr`,
	  [SSR_RENDER_LIST]: `ssrRenderList`,
	  [SSR_INCLUDE_BOOLEAN_ATTR]: `ssrIncludeBooleanAttr`,
	  [SSR_LOOSE_EQUAL]: `ssrLooseEqual`,
	  [SSR_LOOSE_CONTAIN]: `ssrLooseContain`,
	  [SSR_RENDER_DYNAMIC_MODEL]: `ssrRenderDynamicModel`,
	  [SSR_GET_DYNAMIC_MODEL_PROPS]: `ssrGetDynamicModelProps`,
	  [SSR_RENDER_TELEPORT]: `ssrRenderTeleport`,
	  [SSR_RENDER_SUSPENSE]: `ssrRenderSuspense`,
	  [SSR_GET_DIRECTIVE_PROPS]: `ssrGetDirectiveProps`
	};
	compilerDom.registerRuntimeHelpers(ssrHelpers);
	const ssrTransformIf = compilerDom.createStructuralDirectiveTransform(
	  /^(if|else|else-if)$/,
	  compilerDom.processIf
	);
	function ssrProcessIf(node, context, disableNestedFragments = false, disableCommentAsIfAlternate = false) {
	  const [rootBranch] = node.branches;
	  const ifStatement = compilerDom.createIfStatement(
	    rootBranch.condition,
	    processIfBranch(rootBranch, context, disableNestedFragments)
	  );
	  context.pushStatement(ifStatement);
	  let currentIf = ifStatement;
	  for (let i = 1; i < node.branches.length; i++) {
	    const branch = node.branches[i];
	    const branchBlockStatement = processIfBranch(
	      branch,
	      context,
	      disableNestedFragments
	    );
	    if (branch.condition) {
	      currentIf = currentIf.alternate = compilerDom.createIfStatement(
	        branch.condition,
	        branchBlockStatement
	      );
	    } else {
	      currentIf.alternate = branchBlockStatement;
	    }
	  }
	  if (!currentIf.alternate && !disableCommentAsIfAlternate) {
	    currentIf.alternate = compilerDom.createBlockStatement([
	      compilerDom.createCallExpression(`_push`, ["`<!---->`"])
	    ]);
	  }
	}
	function processIfBranch(branch, context, disableNestedFragments = false) {
	  const { children } = branch;
	  const needFragmentWrapper = !disableNestedFragments && (children.length !== 1 || children[0].type !== 1) &&
	  !(children.length === 1 && children[0].type === 11);
	  return processChildrenAsStatement(branch, context, needFragmentWrapper);
	}
	const ssrTransformFor = compilerDom.createStructuralDirectiveTransform(
	  "for",
	  compilerDom.processFor
	);
	function ssrProcessFor(node, context, disableNestedFragments = false) {
	  const needFragmentWrapper = !disableNestedFragments && (node.children.length !== 1 || node.children[0].type !== 1);
	  const renderLoop = compilerDom.createFunctionExpression(
	    compilerDom.createForLoopParams(node.parseResult)
	  );
	  renderLoop.body = processChildrenAsStatement(
	    node,
	    context,
	    needFragmentWrapper
	  );
	  if (!disableNestedFragments) {
	    context.pushStringPart(`<!--[-->`);
	  }
	  context.pushStatement(
	    compilerDom.createCallExpression(context.helper(SSR_RENDER_LIST), [
	      node.source,
	      renderLoop
	    ])
	  );
	  if (!disableNestedFragments) {
	    context.pushStringPart(`<!--]-->`);
	  }
	}
	const ssrTransformSlotOutlet = (node, context) => {
	  if (compilerDom.isSlotOutlet(node)) {
	    const { slotName, slotProps } = compilerDom.processSlotOutlet(node, context);
	    const args = [
	      `_ctx.$slots`,
	      slotName,
	      slotProps || `{}`,
	      `null`,
	      `_push`,
	      `_parent`
	    ];
	    if (context.scopeId && context.slotted !== false) {
	      args.push(`"${context.scopeId}-s"`);
	    }
	    let method = SSR_RENDER_SLOT;
	    let parent = context.parent;
	    if (parent) {
	      const children = parent.children;
	      if (parent.type === 10) {
	        parent = context.grandParent;
	      }
	      let componentType;
	      if (parent.type === 1 && parent.tagType === 1 && ((componentType = compilerDom.resolveComponentType(parent, context, true)) === compilerDom.TRANSITION || componentType === compilerDom.TRANSITION_GROUP) && children.filter((c) => c.type === 1).length === 1) {
	        method = SSR_RENDER_SLOT_INNER;
	        if (!(context.scopeId && context.slotted !== false)) {
	          args.push("null");
	        }
	        args.push("true");
	      }
	    }
	    node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(method), args);
	  }
	};
	function ssrProcessSlotOutlet(node, context) {
	  const renderCall = node.ssrCodegenNode;
	  if (node.children.length) {
	    const fallbackRenderFn = compilerDom.createFunctionExpression([]);
	    fallbackRenderFn.body = processChildrenAsStatement(node, context);
	    renderCall.arguments[3] = fallbackRenderFn;
	  }
	  if (context.withSlotScopeId) {
	    const slotScopeId = renderCall.arguments[6];
	    renderCall.arguments[6] = slotScopeId ? `${slotScopeId} + _scopeId` : `_scopeId`;
	  }
	  context.pushStatement(node.ssrCodegenNode);
	}
	function createSSRCompilerError(code, loc) {
	  return compilerDom.createCompilerError(code, loc, SSRErrorMessages);
	}
	const SSRErrorMessages = {
	  [65]: `Unsafe attribute name for SSR.`,
	  [66]: `Missing the 'to' prop on teleport element.`,
	  [67]: `Invalid AST node during SSR transform.`
	};
	function ssrProcessTeleport(node, context) {
	  const targetProp = compilerDom.findProp(node, "to");
	  if (!targetProp) {
	    context.onError(
	      createSSRCompilerError(66, node.loc)
	    );
	    return;
	  }
	  let target;
	  if (targetProp.type === 6) {
	    target = targetProp.value && compilerDom.createSimpleExpression(targetProp.value.content, true);
	  } else {
	    target = targetProp.exp;
	  }
	  if (!target) {
	    context.onError(
	      createSSRCompilerError(
	        66,
	        targetProp.loc
	      )
	    );
	    return;
	  }
	  const disabledProp = compilerDom.findProp(
	    node,
	    "disabled",
	    false,
	    true
	  );
	  const disabled = disabledProp ? disabledProp.type === 6 ? `true` : disabledProp.exp || `false` : `false`;
	  const contentRenderFn = compilerDom.createFunctionExpression(
	    [`_push`],
	    void 0,
	    true,
	    false,
	    node.loc
	  );
	  contentRenderFn.body = processChildrenAsStatement(node, context);
	  context.pushStatement(
	    compilerDom.createCallExpression(context.helper(SSR_RENDER_TELEPORT), [
	      `_push`,
	      contentRenderFn,
	      target,
	      disabled,
	      `_parent`
	    ])
	  );
	}
	const wipMap$3 =  new WeakMap();
	function ssrTransformSuspense(node, context) {
	  return () => {
	    if (node.children.length) {
	      const wipEntry = {
	        slotsExp: null,
	        wipSlots: []
	      };
	      wipMap$3.set(node, wipEntry);
	      wipEntry.slotsExp = compilerDom.buildSlots(
	        node,
	        context,
	        (_props, _vForExp, children, loc) => {
	          const fn = compilerDom.createFunctionExpression(
	            [],
	            void 0,
	            true,
	            false,
	            loc
	          );
	          wipEntry.wipSlots.push({
	            fn,
	            children
	          });
	          return fn;
	        }
	      ).slots;
	    }
	  };
	}
	function ssrProcessSuspense(node, context) {
	  const wipEntry = wipMap$3.get(node);
	  if (!wipEntry) {
	    return;
	  }
	  const { slotsExp, wipSlots } = wipEntry;
	  for (let i = 0; i < wipSlots.length; i++) {
	    const slot = wipSlots[i];
	    slot.fn.body = processChildrenAsStatement(slot, context);
	  }
	  context.pushStatement(
	    compilerDom.createCallExpression(context.helper(SSR_RENDER_SUSPENSE), [
	      `_push`,
	      slotsExp
	    ])
	  );
	}
	const rawChildrenMap =  new WeakMap();
	const ssrTransformElement = (node, context) => {
	  if (node.type !== 1 || node.tagType !== 0) {
	    return;
	  }
	  return function ssrPostTransformElement() {
	    const openTag = [`<${node.tag}`];
	    const needTagForRuntime = node.tag === "textarea" || node.tag.indexOf("-") > 0;
	    const hasDynamicVBind = compilerDom.hasDynamicKeyVBind(node);
	    const hasCustomDir = node.props.some(
	      (p) => p.type === 7 && !shared.isBuiltInDirective(p.name)
	    );
	    const needMergeProps = hasDynamicVBind || hasCustomDir;
	    if (needMergeProps) {
	      const { props, directives } = compilerDom.buildProps(
	        node,
	        context,
	        node.props,
	        false,
	        false,
	        true
	      );
	      if (props || directives.length) {
	        const mergedProps = buildSSRProps(props, directives, context);
	        const propsExp = compilerDom.createCallExpression(
	          context.helper(SSR_RENDER_ATTRS),
	          [mergedProps]
	        );
	        if (node.tag === "textarea") {
	          const existingText = node.children[0];
	          if (!existingText || existingText.type !== 5) {
	            const tempId = `_temp${context.temps++}`;
	            propsExp.arguments = [
	              compilerDom.createAssignmentExpression(
	                compilerDom.createSimpleExpression(tempId, false),
	                mergedProps
	              )
	            ];
	            rawChildrenMap.set(
	              node,
	              compilerDom.createCallExpression(context.helper(SSR_INTERPOLATE), [
	                compilerDom.createConditionalExpression(
	                  compilerDom.createSimpleExpression(`"value" in ${tempId}`, false),
	                  compilerDom.createSimpleExpression(`${tempId}.value`, false),
	                  compilerDom.createSimpleExpression(
	                    existingText ? existingText.content : ``,
	                    true
	                  ),
	                  false
	                )
	              ])
	            );
	          }
	        } else if (node.tag === "input") {
	          const vModel = findVModel(node);
	          if (vModel) {
	            const tempId = `_temp${context.temps++}`;
	            const tempExp = compilerDom.createSimpleExpression(tempId, false);
	            propsExp.arguments = [
	              compilerDom.createSequenceExpression([
	                compilerDom.createAssignmentExpression(tempExp, mergedProps),
	                compilerDom.createCallExpression(context.helper(compilerDom.MERGE_PROPS), [
	                  tempExp,
	                  compilerDom.createCallExpression(
	                    context.helper(SSR_GET_DYNAMIC_MODEL_PROPS),
	                    [
	                      tempExp,
	                      vModel.exp
	                    ]
	                  )
	                ])
	              ])
	            ];
	          }
	        }
	        if (needTagForRuntime) {
	          propsExp.arguments.push(`"${node.tag}"`);
	        }
	        openTag.push(propsExp);
	      }
	    }
	    let dynamicClassBinding = void 0;
	    let staticClassBinding = void 0;
	    let dynamicStyleBinding = void 0;
	    for (let i = 0; i < node.props.length; i++) {
	      const prop = node.props[i];
	      if (node.tag === "input" && isTrueFalseValue(prop)) {
	        continue;
	      }
	      if (prop.type === 7) {
	        if (prop.name === "html" && prop.exp) {
	          rawChildrenMap.set(
	            node,
	            compilerDom.createCompoundExpression([`(`, prop.exp, `) ?? ''`])
	          );
	        } else if (prop.name === "text" && prop.exp) {
	          node.children = [compilerDom.createInterpolation(prop.exp, prop.loc)];
	        } else if (prop.name === "slot") {
	          context.onError(
	            compilerDom.createCompilerError(40, prop.loc)
	          );
	        } else if (isTextareaWithValue(node, prop) && prop.exp) {
	          if (!needMergeProps) {
	            node.children = [compilerDom.createInterpolation(prop.exp, prop.loc)];
	          }
	        } else if (!needMergeProps && prop.name !== "on") {
	          const directiveTransform = context.directiveTransforms[prop.name];
	          if (directiveTransform) {
	            const { props, ssrTagParts } = directiveTransform(
	              prop,
	              node,
	              context
	            );
	            if (ssrTagParts) {
	              openTag.push(...ssrTagParts);
	            }
	            for (let j = 0; j < props.length; j++) {
	              const { key, value } = props[j];
	              if (compilerDom.isStaticExp(key)) {
	                let attrName = key.content;
	                if (attrName === "key" || attrName === "ref") {
	                  continue;
	                }
	                if (attrName === "class") {
	                  openTag.push(
	                    ` class="`,
	                    dynamicClassBinding = compilerDom.createCallExpression(
	                      context.helper(SSR_RENDER_CLASS),
	                      [value]
	                    ),
	                    `"`
	                  );
	                } else if (attrName === "style") {
	                  if (dynamicStyleBinding) {
	                    mergeCall(dynamicStyleBinding, value);
	                  } else {
	                    openTag.push(
	                      ` style="`,
	                      dynamicStyleBinding = compilerDom.createCallExpression(
	                        context.helper(SSR_RENDER_STYLE),
	                        [value]
	                      ),
	                      `"`
	                    );
	                  }
	                } else {
	                  attrName = node.tag.indexOf("-") > 0 ? attrName : shared.propsToAttrMap[attrName] || attrName.toLowerCase();
	                  if (shared.isBooleanAttr(attrName)) {
	                    openTag.push(
	                      compilerDom.createConditionalExpression(
	                        compilerDom.createCallExpression(
	                          context.helper(SSR_INCLUDE_BOOLEAN_ATTR),
	                          [value]
	                        ),
	                        compilerDom.createSimpleExpression(" " + attrName, true),
	                        compilerDom.createSimpleExpression("", true),
	                        false
	                      )
	                    );
	                  } else if (shared.isSSRSafeAttrName(attrName)) {
	                    openTag.push(
	                      compilerDom.createCallExpression(context.helper(SSR_RENDER_ATTR), [
	                        key,
	                        value
	                      ])
	                    );
	                  } else {
	                    context.onError(
	                      createSSRCompilerError(
	                        65,
	                        key.loc
	                      )
	                    );
	                  }
	                }
	              } else {
	                const args = [key, value];
	                if (needTagForRuntime) {
	                  args.push(`"${node.tag}"`);
	                }
	                openTag.push(
	                  compilerDom.createCallExpression(
	                    context.helper(SSR_RENDER_DYNAMIC_ATTR),
	                    args
	                  )
	                );
	              }
	            }
	          }
	        }
	      } else {
	        const name = prop.name;
	        if (node.tag === "textarea" && name === "value" && prop.value) {
	          rawChildrenMap.set(node, shared.escapeHtml(prop.value.content));
	        } else if (!needMergeProps) {
	          if (name === "key" || name === "ref") {
	            continue;
	          }
	          if (name === "class" && prop.value) {
	            staticClassBinding = JSON.stringify(prop.value.content);
	          }
	          openTag.push(
	            ` ${prop.name}` + (prop.value ? `="${shared.escapeHtml(prop.value.content)}"` : ``)
	          );
	        }
	      }
	    }
	    if (dynamicClassBinding && staticClassBinding) {
	      mergeCall(dynamicClassBinding, staticClassBinding);
	      removeStaticBinding(openTag, "class");
	    }
	    if (context.scopeId) {
	      openTag.push(` ${context.scopeId}`);
	    }
	    node.ssrCodegenNode = compilerDom.createTemplateLiteral(openTag);
	  };
	};
	function buildSSRProps(props, directives, context) {
	  let mergePropsArgs = [];
	  if (props) {
	    if (props.type === 14) {
	      mergePropsArgs = props.arguments;
	    } else {
	      mergePropsArgs.push(props);
	    }
	  }
	  if (directives.length) {
	    for (const dir of directives) {
	      mergePropsArgs.push(
	        compilerDom.createCallExpression(context.helper(SSR_GET_DIRECTIVE_PROPS), [
	          `_ctx`,
	          ...compilerDom.buildDirectiveArgs(dir, context).elements
	        ])
	      );
	    }
	  }
	  return mergePropsArgs.length > 1 ? compilerDom.createCallExpression(context.helper(compilerDom.MERGE_PROPS), mergePropsArgs) : mergePropsArgs[0];
	}
	function isTrueFalseValue(prop) {
	  if (prop.type === 7) {
	    return prop.name === "bind" && prop.arg && compilerDom.isStaticExp(prop.arg) && (prop.arg.content === "true-value" || prop.arg.content === "false-value");
	  } else {
	    return prop.name === "true-value" || prop.name === "false-value";
	  }
	}
	function isTextareaWithValue(node, prop) {
	  return !!(node.tag === "textarea" && prop.name === "bind" && compilerDom.isStaticArgOf(prop.arg, "value"));
	}
	function mergeCall(call, arg) {
	  const existing = call.arguments[0];
	  if (existing.type === 17) {
	    existing.elements.push(arg);
	  } else {
	    call.arguments[0] = compilerDom.createArrayExpression([existing, arg]);
	  }
	}
	function removeStaticBinding(tag, binding) {
	  const regExp = new RegExp(`^ ${binding}=".+"$`);
	  const i = tag.findIndex((e) => typeof e === "string" && regExp.test(e));
	  if (i > -1) {
	    tag.splice(i, 1);
	  }
	}
	function findVModel(node) {
	  return node.props.find(
	    (p) => p.type === 7 && p.name === "model" && p.exp
	  );
	}
	function ssrProcessElement(node, context) {
	  const isVoidTag = context.options.isVoidTag || shared.NO;
	  const elementsToAdd = node.ssrCodegenNode.elements;
	  for (let j = 0; j < elementsToAdd.length; j++) {
	    context.pushStringPart(elementsToAdd[j]);
	  }
	  if (context.withSlotScopeId) {
	    context.pushStringPart(compilerDom.createSimpleExpression(`_scopeId`, false));
	  }
	  context.pushStringPart(`>`);
	  const rawChildren = rawChildrenMap.get(node);
	  if (rawChildren) {
	    context.pushStringPart(rawChildren);
	  } else if (node.children.length) {
	    processChildren(node, context);
	  }
	  if (!isVoidTag(node.tag)) {
	    context.pushStringPart(`</${node.tag}>`);
	  }
	}
	const wipMap$2 =  new WeakMap();
	function ssrTransformTransitionGroup(node, context) {
	  return () => {
	    const tag = compilerDom.findProp(node, "tag");
	    if (tag) {
	      const otherProps = node.props.filter((p) => p !== tag);
	      const { props, directives } = compilerDom.buildProps(
	        node,
	        context,
	        otherProps,
	        true,
	        false,
	        true
	      );
	      let propsExp = null;
	      if (props || directives.length) {
	        propsExp = compilerDom.createCallExpression(context.helper(SSR_RENDER_ATTRS), [
	          buildSSRProps(props, directives, context)
	        ]);
	      }
	      wipMap$2.set(node, {
	        tag,
	        propsExp,
	        scopeId: context.scopeId || null
	      });
	    }
	  };
	}
	function ssrProcessTransitionGroup(node, context) {
	  const entry = wipMap$2.get(node);
	  if (entry) {
	    const { tag, propsExp, scopeId } = entry;
	    if (tag.type === 7) {
	      context.pushStringPart(`<`);
	      context.pushStringPart(tag.exp);
	      if (propsExp) {
	        context.pushStringPart(propsExp);
	      }
	      if (scopeId) {
	        context.pushStringPart(` ${scopeId}`);
	      }
	      context.pushStringPart(`>`);
	      processChildren(
	        node,
	        context,
	        false,
	        true,
	        true
	      );
	      context.pushStringPart(`</`);
	      context.pushStringPart(tag.exp);
	      context.pushStringPart(`>`);
	    } else {
	      context.pushStringPart(`<${tag.value.content}`);
	      if (propsExp) {
	        context.pushStringPart(propsExp);
	      }
	      if (scopeId) {
	        context.pushStringPart(` ${scopeId}`);
	      }
	      context.pushStringPart(`>`);
	      processChildren(node, context, false, true);
	      context.pushStringPart(`</${tag.value.content}>`);
	    }
	  } else {
	    processChildren(node, context, true, true, true);
	  }
	}
	const wipMap$1 =  new WeakMap();
	function ssrTransformTransition(node, context) {
	  return () => {
	    const appear = compilerDom.findProp(node, "appear", false, true);
	    wipMap$1.set(node, !!appear);
	  };
	}
	function ssrProcessTransition(node, context) {
	  node.children = node.children.filter((c) => c.type !== 3);
	  const appear = wipMap$1.get(node);
	  if (appear) {
	    context.pushStringPart(`<template>`);
	    processChildren(node, context, false, true);
	    context.pushStringPart(`</template>`);
	  } else {
	    processChildren(node, context, false, true);
	  }
	}
	const wipMap =  new WeakMap();
	const WIP_SLOT = Symbol();
	const componentTypeMap =  new WeakMap();
	const ssrTransformComponent = (node, context) => {
	  if (node.type !== 1 || node.tagType !== 1) {
	    return;
	  }
	  const component = compilerDom.resolveComponentType(
	    node,
	    context,
	    true
	  );
	  const isDynamicComponent = shared.isObject(component) && component.callee === compilerDom.RESOLVE_DYNAMIC_COMPONENT;
	  componentTypeMap.set(node, component);
	  if (shared.isSymbol(component)) {
	    if (component === compilerDom.SUSPENSE) {
	      return ssrTransformSuspense(node, context);
	    } else if (component === compilerDom.TRANSITION_GROUP) {
	      return ssrTransformTransitionGroup(node, context);
	    } else if (component === compilerDom.TRANSITION) {
	      return ssrTransformTransition(node);
	    }
	    return;
	  }
	  const vnodeBranches = [];
	  const clonedNode = clone(node);
	  return function ssrPostTransformComponent() {
	    if (clonedNode.children.length) {
	      compilerDom.buildSlots(clonedNode, context, (props, vFor, children) => {
	        vnodeBranches.push(
	          createVNodeSlotBranch(props, vFor, children, context)
	        );
	        return compilerDom.createFunctionExpression(void 0);
	      });
	    }
	    let propsExp = `null`;
	    if (node.props.length) {
	      const { props, directives } = compilerDom.buildProps(
	        node,
	        context,
	        void 0,
	        true,
	        isDynamicComponent
	      );
	      if (props || directives.length) {
	        propsExp = buildSSRProps(props, directives, context);
	      }
	    }
	    const wipEntries = [];
	    wipMap.set(node, wipEntries);
	    const buildSSRSlotFn = (props, _vForExp, children, loc) => {
	      const param0 = props && compilerDom.stringifyExpression(props) || `_`;
	      const fn = compilerDom.createFunctionExpression(
	        [param0, `_push`, `_parent`, `_scopeId`],
	        void 0,
	        true,
	        true,
	        loc
	      );
	      wipEntries.push({
	        type: WIP_SLOT,
	        fn,
	        children,
	        vnodeBranch: vnodeBranches[wipEntries.length]
	      });
	      return fn;
	    };
	    const slots = node.children.length ? compilerDom.buildSlots(node, context, buildSSRSlotFn).slots : `null`;
	    if (typeof component !== "string") {
	      node.ssrCodegenNode = compilerDom.createCallExpression(
	        context.helper(SSR_RENDER_VNODE),
	        [
	          `_push`,
	          compilerDom.createCallExpression(context.helper(compilerDom.CREATE_VNODE), [
	            component,
	            propsExp,
	            slots
	          ]),
	          `_parent`
	        ]
	      );
	    } else {
	      node.ssrCodegenNode = compilerDom.createCallExpression(
	        context.helper(SSR_RENDER_COMPONENT),
	        [component, propsExp, slots, `_parent`]
	      );
	    }
	  };
	};
	function ssrProcessComponent(node, context, parent) {
	  const component = componentTypeMap.get(node);
	  if (!node.ssrCodegenNode) {
	    if (component === compilerDom.TELEPORT) {
	      return ssrProcessTeleport(node, context);
	    } else if (component === compilerDom.SUSPENSE) {
	      return ssrProcessSuspense(node, context);
	    } else if (component === compilerDom.TRANSITION_GROUP) {
	      return ssrProcessTransitionGroup(node, context);
	    } else {
	      if (parent.type === WIP_SLOT) {
	        context.pushStringPart(``);
	      }
	      if (component === compilerDom.TRANSITION) {
	        return ssrProcessTransition(node, context);
	      }
	      processChildren(node, context);
	    }
	  } else {
	    const wipEntries = wipMap.get(node) || [];
	    for (let i = 0; i < wipEntries.length; i++) {
	      const { fn, vnodeBranch } = wipEntries[i];
	      fn.body = compilerDom.createIfStatement(
	        compilerDom.createSimpleExpression(`_push`, false),
	        processChildrenAsStatement(
	          wipEntries[i],
	          context,
	          false,
	          true
	        ),
	        vnodeBranch
	      );
	    }
	    if (context.withSlotScopeId) {
	      node.ssrCodegenNode.arguments.push(`_scopeId`);
	    }
	    if (typeof component === "string") {
	      context.pushStatement(
	        compilerDom.createCallExpression(`_push`, [node.ssrCodegenNode])
	      );
	    } else {
	      context.pushStatement(node.ssrCodegenNode);
	    }
	  }
	}
	const rawOptionsMap =  new WeakMap();
	const [baseNodeTransforms, baseDirectiveTransforms] = compilerDom.getBaseTransformPreset(true);
	const vnodeNodeTransforms = [...baseNodeTransforms, ...compilerDom.DOMNodeTransforms];
	const vnodeDirectiveTransforms = {
	  ...baseDirectiveTransforms,
	  ...compilerDom.DOMDirectiveTransforms
	};
	function createVNodeSlotBranch(slotProps, vFor, children, parentContext) {
	  const rawOptions = rawOptionsMap.get(parentContext.root);
	  const subOptions = {
	    ...rawOptions,
	    nodeTransforms: [
	      ...vnodeNodeTransforms,
	      ...rawOptions.nodeTransforms || []
	    ],
	    directiveTransforms: {
	      ...vnodeDirectiveTransforms,
	      ...rawOptions.directiveTransforms || {}
	    }
	  };
	  const wrapperProps = [];
	  if (slotProps) {
	    wrapperProps.push({
	      type: 7,
	      name: "slot",
	      exp: slotProps,
	      arg: void 0,
	      modifiers: [],
	      loc: compilerDom.locStub
	    });
	  }
	  if (vFor) {
	    wrapperProps.push(shared.extend({}, vFor));
	  }
	  const wrapperNode = {
	    type: 1,
	    ns: 0,
	    tag: "template",
	    tagType: 3,
	    props: wrapperProps,
	    children,
	    loc: compilerDom.locStub,
	    codegenNode: void 0
	  };
	  subTransform(wrapperNode, subOptions, parentContext);
	  return compilerDom.createReturnStatement(children);
	}
	function subTransform(node, options, parentContext) {
	  const childRoot = compilerDom.createRoot([node]);
	  const childContext = compilerDom.createTransformContext(childRoot, options);
	  childContext.ssr = false;
	  childContext.scopes = { ...parentContext.scopes };
	  childContext.identifiers = { ...parentContext.identifiers };
	  childContext.imports = parentContext.imports;
	  compilerDom.traverseNode(childRoot, childContext);
	  ["helpers", "components", "directives"].forEach((key) => {
	    childContext[key].forEach((value, helperKey) => {
	      if (key === "helpers") {
	        const parentCount = parentContext.helpers.get(helperKey);
	        if (parentCount === void 0) {
	          parentContext.helpers.set(helperKey, value);
	        } else {
	          parentContext.helpers.set(helperKey, value + parentCount);
	        }
	      } else {
	        parentContext[key].add(value);
	      }
	    });
	  });
	}
	function clone(v) {
	  if (shared.isArray(v)) {
	    return v.map(clone);
	  } else if (shared.isPlainObject(v)) {
	    const res = {};
	    for (const key in v) {
	      res[key] = clone(v[key]);
	    }
	    return res;
	  } else {
	    return v;
	  }
	}
	function ssrCodegenTransform(ast, options) {
	  const context = createSSRTransformContext(ast, options);
	  if (options.ssrCssVars) {
	    const cssContext = compilerDom.createTransformContext(compilerDom.createRoot([]), options);
	    const varsExp = compilerDom.processExpression(
	      compilerDom.createSimpleExpression(options.ssrCssVars, false),
	      cssContext
	    );
	    context.body.push(
	      compilerDom.createCompoundExpression([`const _cssVars = { style: `, varsExp, `}`])
	    );
	    Array.from(cssContext.helpers.keys()).forEach((helper) => {
	      ast.helpers.add(helper);
	    });
	  }
	  const isFragment = ast.children.length > 1 && ast.children.some((c) => !compilerDom.isText(c));
	  processChildren(ast, context, isFragment);
	  ast.codegenNode = compilerDom.createBlockStatement(context.body);
	  ast.ssrHelpers = Array.from(
	     new Set([
	      ...Array.from(ast.helpers).filter((h) => h in ssrHelpers),
	      ...context.helpers
	    ])
	  );
	  ast.helpers = new Set(Array.from(ast.helpers).filter((h) => !(h in ssrHelpers)));
	}
	function createSSRTransformContext(root, options, helpers =  new Set(), withSlotScopeId = false) {
	  const body = [];
	  let currentString = null;
	  return {
	    root,
	    options,
	    body,
	    helpers,
	    withSlotScopeId,
	    onError: options.onError || ((e) => {
	      throw e;
	    }),
	    helper(name) {
	      helpers.add(name);
	      return name;
	    },
	    pushStringPart(part) {
	      if (!currentString) {
	        const currentCall = compilerDom.createCallExpression(`_push`);
	        body.push(currentCall);
	        currentString = compilerDom.createTemplateLiteral([]);
	        currentCall.arguments.push(currentString);
	      }
	      const bufferedElements = currentString.elements;
	      const lastItem = bufferedElements[bufferedElements.length - 1];
	      if (shared.isString(part) && shared.isString(lastItem)) {
	        bufferedElements[bufferedElements.length - 1] += part;
	      } else {
	        bufferedElements.push(part);
	      }
	    },
	    pushStatement(statement) {
	      currentString = null;
	      body.push(statement);
	    }
	  };
	}
	function createChildContext(parent, withSlotScopeId = parent.withSlotScopeId) {
	  return createSSRTransformContext(
	    parent.root,
	    parent.options,
	    parent.helpers,
	    withSlotScopeId
	  );
	}
	function processChildren(parent, context, asFragment = false, disableNestedFragments = false, disableCommentAsIfAlternate = false) {
	  if (asFragment) {
	    context.pushStringPart(`<!--[-->`);
	  }
	  const { children } = parent;
	  for (let i = 0; i < children.length; i++) {
	    const child = children[i];
	    switch (child.type) {
	      case 1:
	        switch (child.tagType) {
	          case 0:
	            ssrProcessElement(child, context);
	            break;
	          case 1:
	            ssrProcessComponent(child, context, parent);
	            break;
	          case 2:
	            ssrProcessSlotOutlet(child, context);
	            break;
	          case 3:
	            break;
	          default:
	            context.onError(
	              createSSRCompilerError(
	                67,
	                child.loc
	              )
	            );
	            const exhaustiveCheck2 = child;
	            return exhaustiveCheck2;
	        }
	        break;
	      case 2:
	        context.pushStringPart(shared.escapeHtml(child.content));
	        break;
	      case 3:
	        context.pushStringPart(`<!--${child.content}-->`);
	        break;
	      case 5:
	        context.pushStringPart(
	          compilerDom.createCallExpression(context.helper(SSR_INTERPOLATE), [
	            child.content
	          ])
	        );
	        break;
	      case 9:
	        ssrProcessIf(
	          child,
	          context,
	          disableNestedFragments,
	          disableCommentAsIfAlternate
	        );
	        break;
	      case 11:
	        ssrProcessFor(child, context, disableNestedFragments);
	        break;
	      case 10:
	        break;
	      case 12:
	      case 8:
	        break;
	      default:
	        context.onError(
	          createSSRCompilerError(
	            67,
	            child.loc
	          )
	        );
	        const exhaustiveCheck = child;
	        return exhaustiveCheck;
	    }
	  }
	  if (asFragment) {
	    context.pushStringPart(`<!--]-->`);
	  }
	}
	function processChildrenAsStatement(parent, parentContext, asFragment = false, withSlotScopeId = parentContext.withSlotScopeId) {
	  const childContext = createChildContext(parentContext, withSlotScopeId);
	  processChildren(parent, childContext, asFragment);
	  return compilerDom.createBlockStatement(childContext.body);
	}
	const ssrTransformModel = (dir, node, context) => {
	  const model = dir.exp;
	  function checkDuplicatedValue() {
	    const value = compilerDom.findProp(node, "value");
	    if (value) {
	      context.onError(
	        compilerDom.createDOMCompilerError(
	          60,
	          value.loc
	        )
	      );
	    }
	  }
	  function processOption(plainNode) {
	    if (plainNode.tag === "option") {
	      if (plainNode.props.findIndex((p) => p.name === "selected") === -1) {
	        const value = findValueBinding(plainNode);
	        plainNode.ssrCodegenNode.elements.push(
	          compilerDom.createConditionalExpression(
	            compilerDom.createCallExpression(context.helper(SSR_INCLUDE_BOOLEAN_ATTR), [
	              compilerDom.createConditionalExpression(
	                compilerDom.createCallExpression(`Array.isArray`, [model]),
	                compilerDom.createCallExpression(context.helper(SSR_LOOSE_CONTAIN), [
	                  model,
	                  value
	                ]),
	                compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
	                  model,
	                  value
	                ])
	              )
	            ]),
	            compilerDom.createSimpleExpression(" selected", true),
	            compilerDom.createSimpleExpression("", true),
	            false
	          )
	        );
	      }
	    } else if (plainNode.tag === "optgroup") {
	      plainNode.children.forEach(
	        (option) => processOption(option)
	      );
	    }
	  }
	  if (node.tagType === 0) {
	    const res = { props: [] };
	    const defaultProps = [
	      compilerDom.createObjectProperty(`value`, model)
	    ];
	    if (node.tag === "input") {
	      const type = compilerDom.findProp(node, "type");
	      if (type) {
	        const value = findValueBinding(node);
	        if (type.type === 7) {
	          res.ssrTagParts = [
	            compilerDom.createCallExpression(context.helper(SSR_RENDER_DYNAMIC_MODEL), [
	              type.exp,
	              model,
	              value
	            ])
	          ];
	        } else if (type.value) {
	          switch (type.value.content) {
	            case "radio":
	              res.props = [
	                compilerDom.createObjectProperty(
	                  `checked`,
	                  compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
	                    model,
	                    value
	                  ])
	                )
	              ];
	              break;
	            case "checkbox":
	              const trueValueBinding = compilerDom.findProp(node, "true-value");
	              if (trueValueBinding) {
	                const trueValue = trueValueBinding.type === 6 ? JSON.stringify(trueValueBinding.value.content) : trueValueBinding.exp;
	                res.props = [
	                  compilerDom.createObjectProperty(
	                    `checked`,
	                    compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
	                      model,
	                      trueValue
	                    ])
	                  )
	                ];
	              } else {
	                res.props = [
	                  compilerDom.createObjectProperty(
	                    `checked`,
	                    compilerDom.createConditionalExpression(
	                      compilerDom.createCallExpression(`Array.isArray`, [model]),
	                      compilerDom.createCallExpression(context.helper(SSR_LOOSE_CONTAIN), [
	                        model,
	                        value
	                      ]),
	                      model
	                    )
	                  )
	                ];
	              }
	              break;
	            case "file":
	              context.onError(
	                compilerDom.createDOMCompilerError(
	                  59,
	                  dir.loc
	                )
	              );
	              break;
	            default:
	              checkDuplicatedValue();
	              res.props = defaultProps;
	              break;
	          }
	        }
	      } else if (compilerDom.hasDynamicKeyVBind(node)) ; else {
	        checkDuplicatedValue();
	        res.props = defaultProps;
	      }
	    } else if (node.tag === "textarea") {
	      checkDuplicatedValue();
	      node.children = [compilerDom.createInterpolation(model, model.loc)];
	    } else if (node.tag === "select") {
	      node.children.forEach((child) => {
	        if (child.type === 1) {
	          processOption(child);
	        }
	      });
	    } else {
	      context.onError(
	        compilerDom.createDOMCompilerError(
	          57,
	          dir.loc
	        )
	      );
	    }
	    return res;
	  } else {
	    return compilerDom.transformModel(dir, node, context);
	  }
	};
	function findValueBinding(node) {
	  const valueBinding = compilerDom.findProp(node, "value");
	  return valueBinding ? valueBinding.type === 7 ? valueBinding.exp : compilerDom.createSimpleExpression(valueBinding.value.content, true) : compilerDom.createSimpleExpression(`null`, false);
	}
	const ssrTransformShow = (dir, node, context) => {
	  if (!dir.exp) {
	    context.onError(
	      compilerDom.createDOMCompilerError(61)
	    );
	  }
	  return {
	    props: [
	      compilerDom.createObjectProperty(
	        `style`,
	        compilerDom.createConditionalExpression(
	          dir.exp,
	          compilerDom.createSimpleExpression(`null`, false),
	          compilerDom.createObjectExpression([
	            compilerDom.createObjectProperty(
	              `display`,
	              compilerDom.createSimpleExpression(`none`, true)
	            )
	          ]),
	          false
	        )
	      )
	    ]
	  };
	};
	const filterChild = (node) => node.children.filter((n) => n.type !== 3);
	const hasSingleChild = (node) => filterChild(node).length === 1;
	const ssrInjectFallthroughAttrs = (node, context) => {
	  if (node.type === 0) {
	    context.identifiers._attrs = 1;
	  }
	  if (node.type === 1 && node.tagType === 1 && (node.tag === "transition" || node.tag === "Transition" || node.tag === "KeepAlive" || node.tag === "keep-alive")) {
	    const rootChildren = filterChild(context.root);
	    if (rootChildren.length === 1 && rootChildren[0] === node) {
	      if (hasSingleChild(node)) {
	        injectFallthroughAttrs(node.children[0]);
	      }
	      return;
	    }
	  }
	  const parent = context.parent;
	  if (!parent || parent.type !== 0) {
	    return;
	  }
	  if (node.type === 10 && hasSingleChild(node)) {
	    let hasEncounteredIf = false;
	    for (const c of filterChild(parent)) {
	      if (c.type === 9 || c.type === 1 && compilerDom.findDir(c, "if")) {
	        if (hasEncounteredIf) return;
	        hasEncounteredIf = true;
	      } else if (
	        !hasEncounteredIf ||
	        !(c.type === 1 && compilerDom.findDir(c, /else/, true))
	      ) {
	        return;
	      }
	    }
	    injectFallthroughAttrs(node.children[0]);
	  } else if (hasSingleChild(parent)) {
	    injectFallthroughAttrs(node);
	  }
	};
	function injectFallthroughAttrs(node) {
	  if (node.type === 1 && (node.tagType === 0 || node.tagType === 1) && !compilerDom.findDir(node, "for")) {
	    node.props.push({
	      type: 7,
	      name: "bind",
	      arg: void 0,
	      exp: compilerDom.createSimpleExpression(`_attrs`, false),
	      modifiers: [],
	      loc: compilerDom.locStub
	    });
	  }
	}
	const ssrInjectCssVars = (node, context) => {
	  if (!context.ssrCssVars) {
	    return;
	  }
	  if (node.type === 0) {
	    context.identifiers._cssVars = 1;
	  }
	  const parent = context.parent;
	  if (!parent || parent.type !== 0) {
	    return;
	  }
	  if (node.type === 10) {
	    for (const child of node.children) {
	      injectCssVars(child);
	    }
	  } else {
	    injectCssVars(node);
	  }
	};
	function injectCssVars(node) {
	  if (node.type === 1 && (node.tagType === 0 || node.tagType === 1) && !compilerDom.findDir(node, "for")) {
	    if (node.tag === "suspense" || node.tag === "Suspense") {
	      for (const child of node.children) {
	        if (child.type === 1 && child.tagType === 3) {
	          child.children.forEach(injectCssVars);
	        } else {
	          injectCssVars(child);
	        }
	      }
	    } else {
	      node.props.push({
	        type: 7,
	        name: "bind",
	        arg: void 0,
	        exp: compilerDom.createSimpleExpression(`_cssVars`, false),
	        modifiers: [],
	        loc: compilerDom.locStub
	      });
	    }
	  }
	}
	function compile(source, options = {}) {
	  options = {
	    ...options,
	    ...compilerDom.parserOptions,
	    ssr: true,
	    inSSR: true,
	    scopeId: options.mode === "function" ? null : options.scopeId,
	    prefixIdentifiers: true,
	    cacheHandlers: false,
	    hoistStatic: false
	  };
	  const ast = typeof source === "string" ? compilerDom.baseParse(source, options) : source;
	  rawOptionsMap.set(ast, options);
	  compilerDom.transform(ast, {
	    ...options,
	    hoistStatic: false,
	    nodeTransforms: [
	      ssrTransformIf,
	      ssrTransformFor,
	      compilerDom.trackVForSlotScopes,
	      compilerDom.transformExpression,
	      ssrTransformSlotOutlet,
	      ssrInjectFallthroughAttrs,
	      ssrInjectCssVars,
	      ssrTransformElement,
	      ssrTransformComponent,
	      compilerDom.trackSlotScopes,
	      compilerDom.transformStyle,
	      ...options.nodeTransforms || []
	    ],
	    directiveTransforms: {
	      bind: compilerDom.transformBind,
	      on: compilerDom.transformOn,
	      model: ssrTransformModel,
	      show: ssrTransformShow,
	      cloak: compilerDom.noopDirectiveTransform,
	      once: compilerDom.noopDirectiveTransform,
	      memo: compilerDom.noopDirectiveTransform,
	      ...options.directiveTransforms || {}
	    }
	  });
	  ssrCodegenTransform(ast, options);
	  return compilerDom.generate(ast, options);
	}
	compilerSsr_cjs.compile = compile;
	return compilerSsr_cjs;
}

var stream_stub;
var hasRequiredStream_stub;
function requireStream_stub () {
	if (hasRequiredStream_stub) return stream_stub;
	hasRequiredStream_stub = 1;
	stream_stub = {};
	return stream_stub;
}

var serverRenderer_cjs = {};

/**
* @vue/server-renderer v3.4.32
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var hasRequiredServerRenderer_cjs;
function requireServerRenderer_cjs () {
	if (hasRequiredServerRenderer_cjs) return serverRenderer_cjs;
	hasRequiredServerRenderer_cjs = 1;
	Object.defineProperty(serverRenderer_cjs, '__esModule', { value: true });
	var Vue = requireVue();
	var shared = requireShared();
	var compilerSsr = requireCompilerSsr_cjs();
	function _interopNamespaceDefault(e) {
	  var n = Object.create(null);
	  if (e) {
	    for (var k in e) {
	      n[k] = e[k];
	    }
	  }
	  n.default = e;
	  return Object.freeze(n);
	}
	var Vue__namespace = _interopNamespaceDefault(Vue);
	const shouldIgnoreProp =  shared.makeMap(
	  `,key,ref,innerHTML,textContent,ref_key,ref_for`
	);
	function ssrRenderAttrs(props, tag) {
	  let ret = "";
	  for (const key in props) {
	    if (shouldIgnoreProp(key) || shared.isOn(key) || tag === "textarea" && key === "value") {
	      continue;
	    }
	    const value = props[key];
	    if (key === "class") {
	      ret += ` class="${ssrRenderClass(value)}"`;
	    } else if (key === "style") {
	      ret += ` style="${ssrRenderStyle(value)}"`;
	    } else {
	      ret += ssrRenderDynamicAttr(key, value, tag);
	    }
	  }
	  return ret;
	}
	function ssrRenderDynamicAttr(key, value, tag) {
	  if (!shared.isRenderableAttrValue(value)) {
	    return ``;
	  }
	  const attrKey = tag && (tag.indexOf("-") > 0 || shared.isSVGTag(tag)) ? key : shared.propsToAttrMap[key] || key.toLowerCase();
	  if (shared.isBooleanAttr(attrKey)) {
	    return shared.includeBooleanAttr(value) ? ` ${attrKey}` : ``;
	  } else if (shared.isSSRSafeAttrName(attrKey)) {
	    return value === "" ? ` ${attrKey}` : ` ${attrKey}="${shared.escapeHtml(value)}"`;
	  } else {
	    console.warn(
	      `[@vue/server-renderer] Skipped rendering unsafe attribute name: ${attrKey}`
	    );
	    return ``;
	  }
	}
	function ssrRenderAttr(key, value) {
	  if (!shared.isRenderableAttrValue(value)) {
	    return ``;
	  }
	  return ` ${key}="${shared.escapeHtml(value)}"`;
	}
	function ssrRenderClass(raw) {
	  return shared.escapeHtml(shared.normalizeClass(raw));
	}
	function ssrRenderStyle(raw) {
	  if (!raw) {
	    return "";
	  }
	  if (shared.isString(raw)) {
	    return shared.escapeHtml(raw);
	  }
	  const styles = shared.normalizeStyle(raw);
	  return shared.escapeHtml(shared.stringifyStyle(styles));
	}
	function ssrRenderComponent(comp, props = null, children = null, parentComponent = null, slotScopeId) {
	  return renderComponentVNode(
	    Vue.createVNode(comp, props, children),
	    parentComponent,
	    slotScopeId
	  );
	}
	function ssrRenderSlot(slots, slotName, slotProps, fallbackRenderFn, push, parentComponent, slotScopeId) {
	  push(`<!--[-->`);
	  ssrRenderSlotInner(
	    slots,
	    slotName,
	    slotProps,
	    fallbackRenderFn,
	    push,
	    parentComponent,
	    slotScopeId
	  );
	  push(`<!--]-->`);
	}
	function ssrRenderSlotInner(slots, slotName, slotProps, fallbackRenderFn, push, parentComponent, slotScopeId, transition) {
	  const slotFn = slots[slotName];
	  if (slotFn) {
	    const slotBuffer = [];
	    const bufferedPush = (item) => {
	      slotBuffer.push(item);
	    };
	    const ret = slotFn(
	      slotProps,
	      bufferedPush,
	      parentComponent,
	      slotScopeId ? " " + slotScopeId : ""
	    );
	    if (shared.isArray(ret)) {
	      renderVNodeChildren(push, ret, parentComponent, slotScopeId);
	    } else {
	      let isEmptySlot = true;
	      if (transition) {
	        isEmptySlot = false;
	      } else {
	        for (let i = 0; i < slotBuffer.length; i++) {
	          if (!isComment(slotBuffer[i])) {
	            isEmptySlot = false;
	            break;
	          }
	        }
	      }
	      if (isEmptySlot) {
	        if (fallbackRenderFn) {
	          fallbackRenderFn();
	        }
	      } else {
	        let start = 0;
	        let end = slotBuffer.length;
	        if (transition && slotBuffer[0] === "<!--[-->" && slotBuffer[end - 1] === "<!--]-->") {
	          start++;
	          end--;
	        }
	        for (let i = start; i < end; i++) {
	          push(slotBuffer[i]);
	        }
	      }
	    }
	  } else if (fallbackRenderFn) {
	    fallbackRenderFn();
	  }
	}
	const commentTestRE = /^<!--[\s\S]*-->$/;
	const commentRE = /<!--[^]*?-->/gm;
	function isComment(item) {
	  if (typeof item !== "string" || !commentTestRE.test(item)) return false;
	  if (item.length <= 8) return true;
	  return !item.replace(commentRE, "").trim();
	}
	function ssrRenderTeleport(parentPush, contentRenderFn, target, disabled, parentComponent) {
	  parentPush("<!--teleport start-->");
	  const context = parentComponent.appContext.provides[Vue.ssrContextKey];
	  const teleportBuffers = context.__teleportBuffers || (context.__teleportBuffers = {});
	  const targetBuffer = teleportBuffers[target] || (teleportBuffers[target] = []);
	  const bufferIndex = targetBuffer.length;
	  let teleportContent;
	  if (disabled) {
	    contentRenderFn(parentPush);
	    teleportContent = `<!--teleport anchor-->`;
	  } else {
	    const { getBuffer, push } = createBuffer();
	    contentRenderFn(push);
	    push(`<!--teleport anchor-->`);
	    teleportContent = getBuffer();
	  }
	  targetBuffer.splice(bufferIndex, 0, teleportContent);
	  parentPush("<!--teleport end-->");
	}
	function ssrInterpolate(value) {
	  return shared.escapeHtml(shared.toDisplayString(value));
	}
	function toRaw(observed) {
	  const raw = observed && observed["__v_raw"];
	  return raw ? toRaw(raw) : observed;
	}
	function isRef(r) {
	  return !!(r && r.__v_isRef === true);
	}
	const stack = [];
	function pushWarningContext(vnode) {
	  stack.push(vnode);
	}
	function popWarningContext() {
	  stack.pop();
	}
	let isWarning = false;
	function warn$1(msg, ...args) {
	  if (isWarning) return;
	  isWarning = true;
	  const instance = stack.length ? stack[stack.length - 1].component : null;
	  const appWarnHandler = instance && instance.appContext.config.warnHandler;
	  const trace = getComponentTrace();
	  if (appWarnHandler) {
	    callWithErrorHandling(
	      appWarnHandler,
	      instance,
	      11,
	      [
	        msg + args.map((a) => {
	          var _a, _b;
	          return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);
	        }).join(""),
	        instance && instance.proxy,
	        trace.map(
	          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
	        ).join("\n"),
	        trace
	      ]
	    );
	  } else {
	    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
	    if (trace.length &&
	    true) {
	      warnArgs.push(`
`, ...formatTrace(trace));
	    }
	    console.warn(...warnArgs);
	  }
	  isWarning = false;
	}
	function getComponentTrace() {
	  let currentVNode = stack[stack.length - 1];
	  if (!currentVNode) {
	    return [];
	  }
	  const normalizedStack = [];
	  while (currentVNode) {
	    const last = normalizedStack[0];
	    if (last && last.vnode === currentVNode) {
	      last.recurseCount++;
	    } else {
	      normalizedStack.push({
	        vnode: currentVNode,
	        recurseCount: 0
	      });
	    }
	    const parentInstance = currentVNode.component && currentVNode.component.parent;
	    currentVNode = parentInstance && parentInstance.vnode;
	  }
	  return normalizedStack;
	}
	function formatTrace(trace) {
	  const logs = [];
	  trace.forEach((entry, i) => {
	    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
	  });
	  return logs;
	}
	function formatTraceEntry({ vnode, recurseCount }) {
	  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
	  const isRoot = vnode.component ? vnode.component.parent == null : false;
	  const open = ` at <${formatComponentName(
	    vnode.component,
	    vnode.type,
	    isRoot
	  )}`;
	  const close = `>` + postfix;
	  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
	}
	function formatProps(props) {
	  const res = [];
	  const keys = Object.keys(props);
	  keys.slice(0, 3).forEach((key) => {
	    res.push(...formatProp(key, props[key]));
	  });
	  if (keys.length > 3) {
	    res.push(` ...`);
	  }
	  return res;
	}
	function formatProp(key, value, raw) {
	  if (shared.isString(value)) {
	    value = JSON.stringify(value);
	    return raw ? value : [`${key}=${value}`];
	  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
	    return raw ? value : [`${key}=${value}`];
	  } else if (isRef(value)) {
	    value = formatProp(key, toRaw(value.value), true);
	    return raw ? value : [`${key}=Ref<`, value, `>`];
	  } else if (shared.isFunction(value)) {
	    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
	  } else {
	    value = toRaw(value);
	    return raw ? value : [`${key}=`, value];
	  }
	}
	const ErrorTypeStrings = {
	  ["sp"]: "serverPrefetch hook",
	  ["bc"]: "beforeCreate hook",
	  ["c"]: "created hook",
	  ["bm"]: "beforeMount hook",
	  ["m"]: "mounted hook",
	  ["bu"]: "beforeUpdate hook",
	  ["u"]: "updated",
	  ["bum"]: "beforeUnmount hook",
	  ["um"]: "unmounted hook",
	  ["a"]: "activated hook",
	  ["da"]: "deactivated hook",
	  ["ec"]: "errorCaptured hook",
	  ["rtc"]: "renderTracked hook",
	  ["rtg"]: "renderTriggered hook",
	  [0]: "setup function",
	  [1]: "render function",
	  [2]: "watcher getter",
	  [3]: "watcher callback",
	  [4]: "watcher cleanup function",
	  [5]: "native event handler",
	  [6]: "component event handler",
	  [7]: "vnode hook",
	  [8]: "directive hook",
	  [9]: "transition hook",
	  [10]: "app errorHandler",
	  [11]: "app warnHandler",
	  [12]: "ref function",
	  [13]: "async component loader",
	  [14]: "scheduler flush",
	  [15]: "component update"
	};
	function callWithErrorHandling(fn, instance, type, args) {
	  try {
	    return args ? fn(...args) : fn();
	  } catch (err) {
	    handleError(err, instance, type);
	  }
	}
	function handleError(err, instance, type, throwInDev = true) {
	  const contextVNode = instance ? instance.vnode : null;
	  if (instance) {
	    let cur = instance.parent;
	    const exposedInstance = instance.proxy;
	    const errorInfo = ErrorTypeStrings[type] ;
	    while (cur) {
	      const errorCapturedHooks = cur.ec;
	      if (errorCapturedHooks) {
	        for (let i = 0; i < errorCapturedHooks.length; i++) {
	          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
	            return;
	          }
	        }
	      }
	      cur = cur.parent;
	    }
	    const appErrorHandler = instance.appContext.config.errorHandler;
	    if (appErrorHandler) {
	      callWithErrorHandling(
	        appErrorHandler,
	        null,
	        10,
	        [err, exposedInstance, errorInfo]
	      );
	      return;
	    }
	  }
	  logError(err, type, contextVNode, throwInDev);
	}
	function logError(err, type, contextVNode, throwInDev = true) {
	  {
	    const info = ErrorTypeStrings[type];
	    if (contextVNode) {
	      pushWarningContext(contextVNode);
	    }
	    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
	    if (contextVNode) {
	      popWarningContext();
	    }
	    if (throwInDev) {
	      throw err;
	    } else {
	      console.error(err);
	    }
	  }
	}
	{
	  const g = shared.getGlobalThis();
	  const registerGlobalSetter = (key, setter) => {
	    let setters;
	    if (!(setters = g[key])) setters = g[key] = [];
	    setters.push(setter);
	    return (v) => {
	      if (setters.length > 1) setters.forEach((set) => set(v));
	      else setters[0](v);
	    };
	  };
	  registerGlobalSetter(
	    `__VUE_INSTANCE_SETTERS__`,
	    (v) => v
	  );
	  registerGlobalSetter(
	    `__VUE_SSR_SETTERS__`,
	    (v) => v
	  );
	}
	const classifyRE = /(?:^|[-_])(\w)/g;
	const classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
	function getComponentName(Component, includeInferred = true) {
	  return shared.isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
	}
	function formatComponentName(instance, Component, isRoot = false) {
	  let name = getComponentName(Component);
	  if (!name && Component.__file) {
	    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
	    if (match) {
	      name = match[1];
	    }
	  }
	  if (!name && instance && instance.parent) {
	    const inferFromRegistry = (registry) => {
	      for (const key in registry) {
	        if (registry[key] === Component) {
	          return key;
	        }
	      }
	    };
	    name = inferFromRegistry(
	      instance.components || instance.parent.type.components
	    ) || inferFromRegistry(instance.appContext.components);
	  }
	  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
	}
	const warn = warn$1 ;
	function ssrRenderList(source, renderItem) {
	  if (shared.isArray(source) || shared.isString(source)) {
	    for (let i = 0, l = source.length; i < l; i++) {
	      renderItem(source[i], i);
	    }
	  } else if (typeof source === "number") {
	    if (!Number.isInteger(source)) {
	      warn(`The v-for range expect an integer value but got ${source}.`);
	      return;
	    }
	    for (let i = 0; i < source; i++) {
	      renderItem(i + 1, i);
	    }
	  } else if (shared.isObject(source)) {
	    if (source[Symbol.iterator]) {
	      const arr = Array.from(source);
	      for (let i = 0, l = arr.length; i < l; i++) {
	        renderItem(arr[i], i);
	      }
	    } else {
	      const keys = Object.keys(source);
	      for (let i = 0, l = keys.length; i < l; i++) {
	        const key = keys[i];
	        renderItem(source[key], key, i);
	      }
	    }
	  }
	}
	async function ssrRenderSuspense(push, { default: renderContent }) {
	  if (renderContent) {
	    renderContent();
	  } else {
	    push(`<!---->`);
	  }
	}
	function ssrGetDirectiveProps(instance, dir, value, arg, modifiers = {}) {
	  if (typeof dir !== "function" && dir.getSSRProps) {
	    return dir.getSSRProps(
	      {
	        dir,
	        instance: Vue.ssrUtils.getComponentPublicInstance(instance.$),
	        value,
	        oldValue: void 0,
	        arg,
	        modifiers
	      },
	      null
	    ) || {};
	  }
	  return {};
	}
	const ssrLooseEqual = shared.looseEqual;
	function ssrLooseContain(arr, value) {
	  return shared.looseIndexOf(arr, value) > -1;
	}
	function ssrRenderDynamicModel(type, model, value) {
	  switch (type) {
	    case "radio":
	      return shared.looseEqual(model, value) ? " checked" : "";
	    case "checkbox":
	      return (shared.isArray(model) ? ssrLooseContain(model, value) : model) ? " checked" : "";
	    default:
	      return ssrRenderAttr("value", model);
	  }
	}
	function ssrGetDynamicModelProps(existingProps = {}, model) {
	  const { type, value } = existingProps;
	  switch (type) {
	    case "radio":
	      return shared.looseEqual(model, value) ? { checked: true } : null;
	    case "checkbox":
	      return (shared.isArray(model) ? ssrLooseContain(model, value) : model) ? { checked: true } : null;
	    default:
	      return { value: model };
	  }
	}
	var helpers = Object.freeze({
	  __proto__: null,
	  ssrGetDirectiveProps: ssrGetDirectiveProps,
	  ssrGetDynamicModelProps: ssrGetDynamicModelProps,
	  ssrIncludeBooleanAttr: shared.includeBooleanAttr,
	  ssrInterpolate: ssrInterpolate,
	  ssrLooseContain: ssrLooseContain,
	  ssrLooseEqual: ssrLooseEqual,
	  ssrRenderAttr: ssrRenderAttr,
	  ssrRenderAttrs: ssrRenderAttrs,
	  ssrRenderClass: ssrRenderClass,
	  ssrRenderComponent: ssrRenderComponent,
	  ssrRenderDynamicAttr: ssrRenderDynamicAttr,
	  ssrRenderDynamicModel: ssrRenderDynamicModel,
	  ssrRenderList: ssrRenderList,
	  ssrRenderSlot: ssrRenderSlot,
	  ssrRenderSlotInner: ssrRenderSlotInner,
	  ssrRenderStyle: ssrRenderStyle,
	  ssrRenderSuspense: ssrRenderSuspense,
	  ssrRenderTeleport: ssrRenderTeleport,
	  ssrRenderVNode: renderVNode
	});
	const compileCache =  Object.create(null);
	function ssrCompile(template, instance) {
	  const Component = instance.type;
	  const { isCustomElement, compilerOptions } = instance.appContext.config;
	  const { delimiters, compilerOptions: componentCompilerOptions } = Component;
	  const finalCompilerOptions = shared.extend(
	    shared.extend(
	      {
	        isCustomElement,
	        delimiters
	      },
	      compilerOptions
	    ),
	    componentCompilerOptions
	  );
	  finalCompilerOptions.isCustomElement = finalCompilerOptions.isCustomElement || shared.NO;
	  finalCompilerOptions.isNativeTag = finalCompilerOptions.isNativeTag || shared.NO;
	  const cacheKey = JSON.stringify(
	    {
	      template,
	      compilerOptions: finalCompilerOptions
	    },
	    (key, value) => {
	      return shared.isFunction(value) ? value.toString() : value;
	    }
	  );
	  const cached = compileCache[cacheKey];
	  if (cached) {
	    return cached;
	  }
	  finalCompilerOptions.onError = (err) => {
	    {
	      const message = `[@vue/server-renderer] Template compilation error: ${err.message}`;
	      const codeFrame = err.loc && shared.generateCodeFrame(
	        template,
	        err.loc.start.offset,
	        err.loc.end.offset
	      );
	      Vue.warn(codeFrame ? `${message}
${codeFrame}` : message);
	    }
	  };
	  const { code } = compilerSsr.compile(template, finalCompilerOptions);
	  const requireMap = {
	    vue: Vue__namespace,
	    "vue/server-renderer": helpers
	  };
	  const fakeRequire = (id) => requireMap[id];
	  return compileCache[cacheKey] = Function("require", code)(fakeRequire);
	}
	const {
	  createComponentInstance,
	  setCurrentRenderingInstance,
	  setupComponent,
	  renderComponentRoot,
	  normalizeVNode
	} = Vue.ssrUtils;
	function createBuffer() {
	  let appendable = false;
	  const buffer = [];
	  return {
	    getBuffer() {
	      return buffer;
	    },
	    push(item) {
	      const isStringItem = shared.isString(item);
	      if (appendable && isStringItem) {
	        buffer[buffer.length - 1] += item;
	        return;
	      }
	      buffer.push(item);
	      appendable = isStringItem;
	      if (shared.isPromise(item) || shared.isArray(item) && item.hasAsync) {
	        buffer.hasAsync = true;
	      }
	    }
	  };
	}
	function renderComponentVNode(vnode, parentComponent = null, slotScopeId) {
	  const instance = createComponentInstance(vnode, parentComponent, null);
	  const res = setupComponent(
	    instance,
	    true
	  );
	  const hasAsyncSetup = shared.isPromise(res);
	  const prefetches = instance.sp;
	  if (hasAsyncSetup || prefetches) {
	    let p = hasAsyncSetup ? res : Promise.resolve();
	    if (prefetches) {
	      p = p.then(
	        () => Promise.all(
	          prefetches.map((prefetch) => prefetch.call(instance.proxy))
	        )
	      ).catch(shared.NOOP);
	    }
	    return p.then(() => renderComponentSubTree(instance, slotScopeId));
	  } else {
	    return renderComponentSubTree(instance, slotScopeId);
	  }
	}
	function renderComponentSubTree(instance, slotScopeId) {
	  const comp = instance.type;
	  const { getBuffer, push } = createBuffer();
	  if (shared.isFunction(comp)) {
	    let root = renderComponentRoot(instance);
	    if (!comp.props) {
	      for (const key in instance.attrs) {
	        if (key.startsWith(`data-v-`)) {
	          (root.props || (root.props = {}))[key] = ``;
	        }
	      }
	    }
	    renderVNode(push, instance.subTree = root, instance, slotScopeId);
	  } else {
	    if ((!instance.render || instance.render === shared.NOOP) && !instance.ssrRender && !comp.ssrRender && shared.isString(comp.template)) {
	      comp.ssrRender = ssrCompile(comp.template, instance);
	    }
	    for (const e of instance.scope.effects) {
	      if (e.computed) {
	        e.computed._dirty = true;
	        e.computed._cacheable = true;
	      }
	    }
	    const ssrRender = instance.ssrRender || comp.ssrRender;
	    if (ssrRender) {
	      let attrs = instance.inheritAttrs !== false ? instance.attrs : void 0;
	      let hasCloned = false;
	      let cur = instance;
	      while (true) {
	        const scopeId = cur.vnode.scopeId;
	        if (scopeId) {
	          if (!hasCloned) {
	            attrs = { ...attrs };
	            hasCloned = true;
	          }
	          attrs[scopeId] = "";
	        }
	        const parent = cur.parent;
	        if (parent && parent.subTree && parent.subTree === cur.vnode) {
	          cur = parent;
	        } else {
	          break;
	        }
	      }
	      if (slotScopeId) {
	        if (!hasCloned) attrs = { ...attrs };
	        const slotScopeIdList = slotScopeId.trim().split(" ");
	        for (let i = 0; i < slotScopeIdList.length; i++) {
	          attrs[slotScopeIdList[i]] = "";
	        }
	      }
	      const prev = setCurrentRenderingInstance(instance);
	      try {
	        ssrRender(
	          instance.proxy,
	          push,
	          instance,
	          attrs,
	          instance.props,
	          instance.setupState,
	          instance.data,
	          instance.ctx
	        );
	      } finally {
	        setCurrentRenderingInstance(prev);
	      }
	    } else if (instance.render && instance.render !== shared.NOOP) {
	      renderVNode(
	        push,
	        instance.subTree = renderComponentRoot(instance),
	        instance,
	        slotScopeId
	      );
	    } else {
	      const componentName = comp.name || comp.__file || `<Anonymous>`;
	      Vue.warn(`Component ${componentName} is missing template or render function.`);
	      push(`<!---->`);
	    }
	  }
	  return getBuffer();
	}
	function renderVNode(push, vnode, parentComponent, slotScopeId) {
	  const { type, shapeFlag, children } = vnode;
	  switch (type) {
	    case Vue.Text:
	      push(shared.escapeHtml(children));
	      break;
	    case Vue.Comment:
	      push(
	        children ? `<!--${shared.escapeHtmlComment(children)}-->` : `<!---->`
	      );
	      break;
	    case Vue.Static:
	      push(children);
	      break;
	    case Vue.Fragment:
	      if (vnode.slotScopeIds) {
	        slotScopeId = (slotScopeId ? slotScopeId + " " : "") + vnode.slotScopeIds.join(" ");
	      }
	      push(`<!--[-->`);
	      renderVNodeChildren(
	        push,
	        children,
	        parentComponent,
	        slotScopeId
	      );
	      push(`<!--]-->`);
	      break;
	    default:
	      if (shapeFlag & 1) {
	        renderElementVNode(push, vnode, parentComponent, slotScopeId);
	      } else if (shapeFlag & 6) {
	        push(renderComponentVNode(vnode, parentComponent, slotScopeId));
	      } else if (shapeFlag & 64) {
	        renderTeleportVNode(push, vnode, parentComponent, slotScopeId);
	      } else if (shapeFlag & 128) {
	        renderVNode(push, vnode.ssContent, parentComponent, slotScopeId);
	      } else {
	        Vue.warn(
	          "[@vue/server-renderer] Invalid VNode type:",
	          type,
	          `(${typeof type})`
	        );
	      }
	  }
	}
	function renderVNodeChildren(push, children, parentComponent, slotScopeId) {
	  for (let i = 0; i < children.length; i++) {
	    renderVNode(push, normalizeVNode(children[i]), parentComponent, slotScopeId);
	  }
	}
	function renderElementVNode(push, vnode, parentComponent, slotScopeId) {
	  const tag = vnode.type;
	  let { props, children, shapeFlag, scopeId, dirs } = vnode;
	  let openTag = `<${tag}`;
	  if (dirs) {
	    props = applySSRDirectives(vnode, props, dirs);
	  }
	  if (props) {
	    openTag += ssrRenderAttrs(props, tag);
	  }
	  if (scopeId) {
	    openTag += ` ${scopeId}`;
	  }
	  let curParent = parentComponent;
	  let curVnode = vnode;
	  while (curParent && curVnode === curParent.subTree) {
	    curVnode = curParent.vnode;
	    if (curVnode.scopeId) {
	      openTag += ` ${curVnode.scopeId}`;
	    }
	    curParent = curParent.parent;
	  }
	  if (slotScopeId) {
	    openTag += ` ${slotScopeId}`;
	  }
	  push(openTag + `>`);
	  if (!shared.isVoidTag(tag)) {
	    let hasChildrenOverride = false;
	    if (props) {
	      if (props.innerHTML) {
	        hasChildrenOverride = true;
	        push(props.innerHTML);
	      } else if (props.textContent) {
	        hasChildrenOverride = true;
	        push(shared.escapeHtml(props.textContent));
	      } else if (tag === "textarea" && props.value) {
	        hasChildrenOverride = true;
	        push(shared.escapeHtml(props.value));
	      }
	    }
	    if (!hasChildrenOverride) {
	      if (shapeFlag & 8) {
	        push(shared.escapeHtml(children));
	      } else if (shapeFlag & 16) {
	        renderVNodeChildren(
	          push,
	          children,
	          parentComponent,
	          slotScopeId
	        );
	      }
	    }
	    push(`</${tag}>`);
	  }
	}
	function applySSRDirectives(vnode, rawProps, dirs) {
	  const toMerge = [];
	  for (let i = 0; i < dirs.length; i++) {
	    const binding = dirs[i];
	    const {
	      dir: { getSSRProps }
	    } = binding;
	    if (getSSRProps) {
	      const props = getSSRProps(binding, vnode);
	      if (props) toMerge.push(props);
	    }
	  }
	  return Vue.mergeProps(rawProps || {}, ...toMerge);
	}
	function renderTeleportVNode(push, vnode, parentComponent, slotScopeId) {
	  const target = vnode.props && vnode.props.to;
	  const disabled = vnode.props && vnode.props.disabled;
	  if (!target) {
	    if (!disabled) {
	      Vue.warn(`[@vue/server-renderer] Teleport is missing target prop.`);
	    }
	    return [];
	  }
	  if (!shared.isString(target)) {
	    Vue.warn(
	      `[@vue/server-renderer] Teleport target must be a query selector string.`
	    );
	    return [];
	  }
	  ssrRenderTeleport(
	    push,
	    (push2) => {
	      renderVNodeChildren(
	        push2,
	        vnode.children,
	        parentComponent,
	        slotScopeId
	      );
	    },
	    target,
	    disabled || disabled === "",
	    parentComponent
	  );
	}
	const { isVNode: isVNode$1 } = Vue.ssrUtils;
	function nestedUnrollBuffer(buffer, parentRet, startIndex) {
	  if (!buffer.hasAsync) {
	    return parentRet + unrollBufferSync$1(buffer);
	  }
	  let ret = parentRet;
	  for (let i = startIndex; i < buffer.length; i += 1) {
	    const item = buffer[i];
	    if (shared.isString(item)) {
	      ret += item;
	      continue;
	    }
	    if (shared.isPromise(item)) {
	      return item.then((nestedItem) => {
	        buffer[i] = nestedItem;
	        return nestedUnrollBuffer(buffer, ret, i);
	      });
	    }
	    const result = nestedUnrollBuffer(item, ret, 0);
	    if (shared.isPromise(result)) {
	      return result.then((nestedItem) => {
	        buffer[i] = nestedItem;
	        return nestedUnrollBuffer(buffer, "", i);
	      });
	    }
	    ret = result;
	  }
	  return ret;
	}
	function unrollBuffer$1(buffer) {
	  return nestedUnrollBuffer(buffer, "", 0);
	}
	function unrollBufferSync$1(buffer) {
	  let ret = "";
	  for (let i = 0; i < buffer.length; i++) {
	    let item = buffer[i];
	    if (shared.isString(item)) {
	      ret += item;
	    } else {
	      ret += unrollBufferSync$1(item);
	    }
	  }
	  return ret;
	}
	async function renderToString(input, context = {}) {
	  if (isVNode$1(input)) {
	    return renderToString(Vue.createApp({ render: () => input }), context);
	  }
	  const vnode = Vue.createVNode(input._component, input._props);
	  vnode.appContext = input._context;
	  input.provide(Vue.ssrContextKey, context);
	  const buffer = await renderComponentVNode(vnode);
	  const result = await unrollBuffer$1(buffer);
	  await resolveTeleports(context);
	  if (context.__watcherHandles) {
	    for (const unwatch of context.__watcherHandles) {
	      unwatch();
	    }
	  }
	  return result;
	}
	async function resolveTeleports(context) {
	  if (context.__teleportBuffers) {
	    context.teleports = context.teleports || {};
	    for (const key in context.__teleportBuffers) {
	      context.teleports[key] = await unrollBuffer$1(
	        await Promise.all([context.__teleportBuffers[key]])
	      );
	    }
	  }
	}
	const { isVNode } = Vue.ssrUtils;
	async function unrollBuffer(buffer, stream) {
	  if (buffer.hasAsync) {
	    for (let i = 0; i < buffer.length; i++) {
	      let item = buffer[i];
	      if (shared.isPromise(item)) {
	        item = await item;
	      }
	      if (shared.isString(item)) {
	        stream.push(item);
	      } else {
	        await unrollBuffer(item, stream);
	      }
	    }
	  } else {
	    unrollBufferSync(buffer, stream);
	  }
	}
	function unrollBufferSync(buffer, stream) {
	  for (let i = 0; i < buffer.length; i++) {
	    let item = buffer[i];
	    if (shared.isString(item)) {
	      stream.push(item);
	    } else {
	      unrollBufferSync(item, stream);
	    }
	  }
	}
	function renderToSimpleStream(input, context, stream) {
	  if (isVNode(input)) {
	    return renderToSimpleStream(
	      Vue.createApp({ render: () => input }),
	      context,
	      stream
	    );
	  }
	  const vnode = Vue.createVNode(input._component, input._props);
	  vnode.appContext = input._context;
	  input.provide(Vue.ssrContextKey, context);
	  Promise.resolve(renderComponentVNode(vnode)).then((buffer) => unrollBuffer(buffer, stream)).then(() => resolveTeleports(context)).then(() => {
	    if (context.__watcherHandles) {
	      for (const unwatch of context.__watcherHandles) {
	        unwatch();
	      }
	    }
	  }).then(() => stream.push(null)).catch((error) => {
	    stream.destroy(error);
	  });
	  return stream;
	}
	function renderToStream(input, context = {}) {
	  console.warn(
	    `[@vue/server-renderer] renderToStream is deprecated - use renderToNodeStream instead.`
	  );
	  return renderToNodeStream(input, context);
	}
	function renderToNodeStream(input, context = {}) {
	  const stream = new (requireStream_stub()).Readable({ read() {
	  } }) ;
	  if (!stream) {
	    throw new Error(
	      `ESM build of renderToStream() does not support renderToNodeStream(). Use pipeToNodeWritable() with an existing Node.js Writable stream instance instead.`
	    );
	  }
	  return renderToSimpleStream(input, context, stream);
	}
	function pipeToNodeWritable(input, context = {}, writable) {
	  renderToSimpleStream(input, context, {
	    push(content) {
	      if (content != null) {
	        writable.write(content);
	      } else {
	        writable.end();
	      }
	    },
	    destroy(err) {
	      writable.destroy(err);
	    }
	  });
	}
	function renderToWebStream(input, context = {}) {
	  if (typeof ReadableStream !== "function") {
	    throw new Error(
	      `ReadableStream constructor is not available in the global scope. If the target environment does support web streams, consider using pipeToWebWritable() with an existing WritableStream instance instead.`
	    );
	  }
	  const encoder = new TextEncoder();
	  let cancelled = false;
	  return new ReadableStream({
	    start(controller) {
	      renderToSimpleStream(input, context, {
	        push(content) {
	          if (cancelled) return;
	          if (content != null) {
	            controller.enqueue(encoder.encode(content));
	          } else {
	            controller.close();
	          }
	        },
	        destroy(err) {
	          controller.error(err);
	        }
	      });
	    },
	    cancel() {
	      cancelled = true;
	    }
	  });
	}
	function pipeToWebWritable(input, context = {}, writable) {
	  const writer = writable.getWriter();
	  const encoder = new TextEncoder();
	  let hasReady = false;
	  try {
	    hasReady = shared.isPromise(writer.ready);
	  } catch (e) {
	  }
	  renderToSimpleStream(input, context, {
	    async push(content) {
	      if (hasReady) {
	        await writer.ready;
	      }
	      if (content != null) {
	        return writer.write(encoder.encode(content));
	      } else {
	        return writer.close();
	      }
	    },
	    destroy(err) {
	      console.log(err);
	      writer.close();
	    }
	  });
	}
	Vue.initDirectivesForSSR();
	serverRenderer_cjs.ssrIncludeBooleanAttr = shared.includeBooleanAttr;
	serverRenderer_cjs.pipeToNodeWritable = pipeToNodeWritable;
	serverRenderer_cjs.pipeToWebWritable = pipeToWebWritable;
	serverRenderer_cjs.renderToNodeStream = renderToNodeStream;
	serverRenderer_cjs.renderToSimpleStream = renderToSimpleStream;
	serverRenderer_cjs.renderToStream = renderToStream;
	serverRenderer_cjs.renderToString = renderToString;
	serverRenderer_cjs.renderToWebStream = renderToWebStream;
	serverRenderer_cjs.ssrGetDirectiveProps = ssrGetDirectiveProps;
	serverRenderer_cjs.ssrGetDynamicModelProps = ssrGetDynamicModelProps;
	serverRenderer_cjs.ssrInterpolate = ssrInterpolate;
	serverRenderer_cjs.ssrLooseContain = ssrLooseContain;
	serverRenderer_cjs.ssrLooseEqual = ssrLooseEqual;
	serverRenderer_cjs.ssrRenderAttr = ssrRenderAttr;
	serverRenderer_cjs.ssrRenderAttrs = ssrRenderAttrs;
	serverRenderer_cjs.ssrRenderClass = ssrRenderClass;
	serverRenderer_cjs.ssrRenderComponent = ssrRenderComponent;
	serverRenderer_cjs.ssrRenderDynamicAttr = ssrRenderDynamicAttr;
	serverRenderer_cjs.ssrRenderDynamicModel = ssrRenderDynamicModel;
	serverRenderer_cjs.ssrRenderList = ssrRenderList;
	serverRenderer_cjs.ssrRenderSlot = ssrRenderSlot;
	serverRenderer_cjs.ssrRenderSlotInner = ssrRenderSlotInner;
	serverRenderer_cjs.ssrRenderStyle = ssrRenderStyle;
	serverRenderer_cjs.ssrRenderSuspense = ssrRenderSuspense;
	serverRenderer_cjs.ssrRenderTeleport = ssrRenderTeleport;
	serverRenderer_cjs.ssrRenderVNode = renderVNode;
	return serverRenderer_cjs;
}

var hasRequiredServerRenderer$1;
function requireServerRenderer$1 () {
	if (hasRequiredServerRenderer$1) return serverRenderer$1.exports;
	hasRequiredServerRenderer$1 = 1;
	{
	  serverRenderer$1.exports = requireServerRenderer_cjs();
	}
	return serverRenderer$1.exports;
}

var serverRenderer;
var hasRequiredServerRenderer;
function requireServerRenderer () {
	if (hasRequiredServerRenderer) return serverRenderer;
	hasRequiredServerRenderer = 1;
	serverRenderer = requireServerRenderer$1();
	return serverRenderer;
}

const vue = requireVue();
const server_renderer = requireServerRenderer();
var render_ssr_app = entry.render_ssr_app = server_renderer.renderToString;
var create_ssr_app = entry.create_ssr_app = vue.createSSRApp;

export { create_ssr_app, entry as default, render_ssr_app };
